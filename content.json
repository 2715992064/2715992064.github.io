{"meta":{"title":"Cedeat的摸鱼中心","subtitle":"Cedeat的摸鱼中心","description":"编程小白的记录，来看看吧~","author":"Cedeat","url":"http://2715992064.github.io","root":"/"},"pages":[{"title":"","date":"2022-02-28T05:41:56.419Z","updated":"2022-02-28T05:41:39.412Z","comments":true,"path":"baidu_verify_code-6whQLFjAsC.html","permalink":"http://2715992064.github.io/baidu_verify_code-6whQLFjAsC.html","excerpt":"","text":"6bdc6aa9db340950b5c9b8018f40dcfc"},{"title":"about","date":"2021-12-14T05:30:20.000Z","updated":"2021-12-14T05:30:36.794Z","comments":true,"path":"about/index.html","permalink":"http://2715992064.github.io/about/index.html","excerpt":"","text":""},{"title":"contact","date":"2021-12-14T05:31:46.000Z","updated":"2021-12-14T05:32:01.549Z","comments":true,"path":"contact/index.html","permalink":"http://2715992064.github.io/contact/index.html","excerpt":"","text":""},{"title":"404","date":"2021-09-27T12:43:30.000Z","updated":"2021-12-14T05:31:15.993Z","comments":true,"path":"404/index.html","permalink":"http://2715992064.github.io/404/index.html","excerpt":"","text":""},{"title":"friends","date":"2022-02-11T12:41:49.000Z","updated":"2022-02-11T12:42:12.187Z","comments":true,"path":"friends/index.html","permalink":"http://2715992064.github.io/friends/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-12-14T05:28:11.000Z","updated":"2021-12-14T05:28:43.848Z","comments":true,"path":"categories/index.html","permalink":"http://2715992064.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-12-14T05:29:24.000Z","updated":"2021-12-14T05:29:43.471Z","comments":true,"path":"tags/index.html","permalink":"http://2715992064.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"如何在vjudge提交洛谷题目","slug":"如何在vjudge提交洛谷题目","date":"2022-11-21T16:00:00.000Z","updated":"2022-11-22T09:16:34.969Z","comments":true,"path":"2022/11/22/ru-he-zai-vjudge-ti-jiao-luo-gu-ti-mu/","link":"","permalink":"http://2715992064.github.io/2022/11/22/ru-he-zai-vjudge-ti-jiao-luo-gu-ti-mu/","excerpt":"","text":"在 vjudge 上提交洛谷题目需要绑定账号，否则就会出现下面的提示： 如何在vjudge上提交洛谷题目，开始愉快AC呢？ 在提交界面的Account选项中，选择upadte（此处我已经绑定了账号所以显示已有账号） 然后会显示我们需要洛谷的COOKIE。 以Edge为例，获取COOKIE需要我们打开浏览器设置，并找到”Cookie 和网站权限”这一栏。 点击”管理和删除cookie和站点数据”。 我们需要首先对这两项进行如上设置 然后点击： 在右上角搜索 luogu.com.cn 搜索完成后，应该会出现如下几项： 如果你没有这几项，请先确保在打开”允许站点保存和储存cookie数据”这一项的前提，在洛谷注册并登录过一次。 随后我们打开这项： 就能找到对应的两个id 分别打开并复制它们的内容填在vjudge的绑定账户栏即可 绑定结束后会出现这个标识，代表我们成功绑定洛谷账号，可以开始刷题了。","categories":[],"tags":[],"author":"Cedeat"},{"title":"ACM常用算法模板总结ver2.0","slug":"ACM algorithm","date":"2022-09-11T16:00:00.000Z","updated":"2022-09-12T03:25:41.117Z","comments":true,"path":"2022/09/12/acm-algorithm/","link":"","permalink":"http://2715992064.github.io/2022/09/12/acm-algorithm/","excerpt":"","text":"暑假更新了一些数据结构和字符串。 [TOC] 1 数据结构1.1 并查集int p[N]; //存储每个点的祖宗节点 // int size[N]; 维护size // 返回x的祖宗节点 int find(int x) { if (p[x] != x) p[x] = find(p[x]); return p[x]; } // 初始化，假定节点编号是1~n void init (int x) { for (int i = 0; i &lt;= x; i ++ ) { p[i] = i; // size[i] = 1; 维护size } } // 合并a和b所在的两个集合： p[find(a)] = find(b); // size[b] += size[a];维 护size 1.2 单调栈找出每个数左边离它最近的比它大/小的数 stack&lt;int&gt; s; for (int i = 1; i &lt;= n; i ++ ) { while (sz(s) &amp;&amp; check(s.top(), i)) s.pop(); s.push(i); } 1.3 单调队列// 滑动窗口 int a[N], q[N]; // q为单调队列，需要注意，队列中存放的是数组下标。 int main() { int n, k; //n个数，窗口长度为k cin &gt;&gt; n &gt;&gt; k; for (int i = 0; i &lt; n; i ++ ) cin &gt;&gt; a[i]; int hh = 0, tt = -1; // hh为队列头，tt为队列尾。tt &lt; hh的原因是防止在刚进入循环时判断出错，所以要将tt小于hh，从而达到先入一个数的情况。 for (int i = 0; i &lt; n; i ++ ){ // 模拟队尾碰到新数a[i]的过程 if (hh &lt;= tt &amp;&amp; i - k + 1 &gt; q[hh]) hh ++ ; // 单调队列长度大于k，队头出队，加上hh &lt;= tt的原因主要是防止初始状态时tt &lt; hh。 while (hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt --; // 碰到新数a[i]后，若当前队尾大于a[i]，则放入后不满足单调递减 q[ ++ tt] = i; // 新元素入队 if (i &gt;= k - 1) printf(\"%d \", a[q[hh]]); // 用单调队列维护一个单调递减的区间，故每次窗口内最大值一定是队头 } printf(\"\\n\"); // 以下同上，改为维护单调递增即可。 hh = 0, tt = -1; for (int i = 0; i &lt; n; i ++ ){ if (hh &lt;= tt &amp;&amp; i - k + 1 &gt; q[hh]) hh ++ ; while (hh &lt;= tt &amp;&amp; a[q[tt]] &lt;= a[i]) tt --; q[ ++ tt] = i; if (i &gt;= k - 1) printf(\"%d \", a[q[hh]]); } printf(\"\\n\"); return 0; } 1.4 树状数组1.4.1 单点修改与区间查询int t[maxn]; int lowbit (int x) { return x &amp; -x; } void add(int x, int k){ // 单点修改， 可用于添数或建树 for (; x &lt;= n; x += x &amp; -x) t[x] += k; } int query(int x){ // 区间查询 (1 ~ x) int ans = 0; for (; x; x -= x &amp; -x) ans += t[x]; return ans; } int range (int l, int r) { // 区间查询 (l ~ r) return query(r) - query(l - 1); } 1.4.2 区间修改与单点查询int t[maxn], q[maxn]; // 用t数组维护差分数组 int lowbit (int x) { return x &amp; -x; } void add(int x, int k){ for (; x &lt;= n; x += x &amp; -x) t[x] += k; } int query(int x){ int ans = 0; for (; x; x -= x &amp; -x) ans += t[x]; return ans; } int range (int l, int r) { return query(r) - query(l - 1); } signed main() { cin &gt;&gt; n &gt;&gt; p; for (int i = 1; i &lt;= n; i ++ ){ cin &gt;&gt; q[i]; add(i, q[i] - q[i - 1]); } while (p -- ){ int op, l, r, x; cin &gt;&gt; op; if (op == 1){ cin &gt;&gt; l &gt;&gt; r &gt;&gt; x; add(l, x), add(r + 1, -x); } if (op == 2){ cin &gt;&gt; x; cout &lt;&lt; q[x] + ask(x) &lt;&lt; endl; // ask(x)即为q[x]的增量 } } return 0; } 1.4.3 区间修改与区间查询//区间修改与区间查询 #include &lt;bits/stdc++.h&gt; using namespace std; #define int long long int n, p; int q[1123456], t[1123456], s[1123456], sum[1123456]; inline int lowbit(int x) { return x &amp; -x; } void add1(int x, int k) { for (int i = x; i &lt;= n; i += lowbit(i)) t[i] += k, s[i] += x * k; } int ask1(int x) { int ans = 0; for (int i = x; i; i -= lowbit(i)) ans += (x + 1) * t[i] - s[i]; return ans; } signed main() { cin &gt;&gt; n &gt;&gt; p; for (int i = 1; i &lt;= n; i ++ ){ cin &gt;&gt; q[i]; sum[i] = q[i] + sum[i - 1]; add1(i, q[i] - q[i - 1]); } while (p -- ){ int op, l, r, x; cin &gt;&gt; op; if (op == 1){ cin &gt;&gt; l &gt;&gt; r &gt;&gt; x; add1(l, x), add1(r + 1, -x); } if (op == 2){ cin &gt;&gt; l &gt;&gt; r; cout &lt;&lt; ask1(r) - ask1(l - 1) &lt;&lt; endl; } } return 0; } 1.5 线段树// pushup void pushup1(int u) { tr[u].sum = tr[u &lt;&lt; 1].sum + tr[u &lt;&lt; 1 | 1].sum; } // 父节点的区间和等于左右儿子的区间和。 void pushup2(int u) { tr[u].v = max(tr[u &lt;&lt; 1].v, tr[u &lt;&lt; 1 | 1].v); } // 父节点的最大值等于左右儿子的最大值。 // pushdown void pushdown(int u) // 例为维护区间加的lazytag { auto &amp;r = tr[u], &amp;left = tr[u &lt;&lt; 1], &amp;right = tr[u &lt;&lt; 1 | 1]; if (r.add){ left.add += r.add, left.sum += (left.r - left.l + 1) * r.add; right.add += r.add, right.sum += (right.r - right.l + 1) * r.add; r.add = 0; } } // build void build (int u, int l, int r) { if (l == r) tr[u] = {l, r, q[r]}; else { tr[u] = {l, r, q[r], 0}; // 该节点的左端点，右端点，以及维护的值和lazytag（可以不为1） int mid = l + r &gt;&gt; 1; build(u &lt;&lt; 1, l, mid); // 向左下递归建树 build(u &lt;&lt; 1 | 1, mid + 1, r); // 向右下递归建树 pushup(u); // 最后自底向上更新节点所维护的值 } } //modify // 1.单点修改 void modify1(int u, int x, int v) // x为待修改的数的下标，v为修改后的值 { if (tr[u].l == x &amp;&amp; tr[u].r == x) tr[u].v = v; // 修改 else{ // 未达到就继续递归 int mid = tr[u].l + tr[u].r &gt;&gt; 1; if (x &lt;= mid) modify(u &lt;&lt; 1, x, v); else modify(u &lt;&lt; 1 | 1, x, v); pushup(u); // 修改后自底向上更新一下。 } } // 2.区间修改（需要lazytag） void modify2(int u, int l, int r, int d) { if (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) { tr[u].sum += (tr[u].r - tr[u].l + 1) * d; tr[u].add += d; } else { pushdown(u); int mid = tr[u].l + tr[u].r &gt;&gt; 1; if (l &lt;= mid) modify(u &lt;&lt; 1, l, r, d); if (r &gt; mid) modify(u &lt;&lt; 1 | 1, l, r, d); pushup(u); } } //query int query(int u, int l, int r) { if (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) return tr[u].sum; pushdown(u); // 如果有则加 int mid = tr[u].l + tr[u].r &gt;&gt; 1; int sum = 0; if (l &lt;= mid) sum += query(u &lt;&lt; 1, l, r); if (r &gt; mid) sum += query(u &lt;&lt; 1 | 1, l, r); return sum; } 1.6 对顶堆int q[i]; priority_queue&lt;int&gt; bg; // 大根堆 priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; ss; // 小根堆 //bg.push(q[1]); int mid = q[1]; cout &lt;&lt; mid &lt;&lt; endl; for (int i = 2; i &lt;= n; i ++ ) { if (q[i] &gt; mid) ss.push(q[i]); else bg.push(q[i]); if (i &amp; 1) { // 当i为奇数输出中位数 while (bg.size() != ss.size()) { if (bg.size() &gt; ss.size()) { ss.push(mid);v, mid = bg.top(); bg.pop(); } else { bg.push(mid); mid = ss.top(); ss.pop(); } } cout &lt;&lt; mid &lt;&lt; endl; } } 1.7 主席树#include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 100010; int n, m, len; int q[maxn], a[maxn]; int root[maxn], now = 0; struct node { int l, r, v; }tr[maxn * 20]; int build (int l, int r) { int p = ++ now, mid = (l + r) &gt;&gt; 1; if (l &lt; r) { tr[p].l = build(l, mid); tr[p].r = build(mid + 1, r); } tr[p].v = 0; return p; } int update (int pre, int l, int r, int v) { int p = ++ now, mid = (l + r) &gt;&gt; 1; tr[p].l = tr[pre].l, tr[p].r = tr[pre].r, tr[p].v = tr[pre].v + 1; if (l &lt; r) { if (v &lt;= mid) tr[p].l = update(tr[pre].l, l, mid, v); else tr[p].r = update(tr[pre].r, mid + 1, r, v); } return p; } int query (int x, int y, int l, int r, int k) { if (l == r) return l; int sum = tr[tr[y].l].v - tr[tr[x].l].v, mid = (l + r) &gt;&gt; 1; if (k &lt;= sum) return query(tr[x].l, tr[y].l, l, mid, k); else return query(tr[x].r, tr[y].r, mid + 1, r, k - sum); } int main () { scanf(\"%d %d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++ ) { scanf(\"%d\", &amp;q[i]); a[i] = q[i]; } sort(q + 1, q + n + 1); len = unique(q + 1, q + n + 1) - (q + 1); for (int i = 1; i &lt;= n; i ++ ) { a[i] = lower_bound(q + 1, q + len + 1, a[i]) - q; } root[0] = build(1, len); for (int i = 1; i &lt;= n; i ++ ) { root[i] = update(root[i - 1], 1, len, a[i]); } while (m -- ) { int l, r, k; scanf(\"%d %d %d\", &amp;l, &amp;r, &amp;k); int ans = query(root[l - 1], root[r], 1, len, k); printf(\"%d\\n\", q[ans]); } } 1.8 Treap1.8.1 旋转Treapint tt; int n, m, k; int now, root; int sz[maxn], key[maxn], cnt[maxn], rd[maxn], son[maxn][2]; inline void push_up(int x) { sz[x] = sz[son[x][0]] + sz[son[x][1]] + cnt[x]; } inline void rotate (int &amp;x, int y) { int ii = son[x][y ^ 1]; son[x][y ^ 1] = son[ii][y]; son[ii][y] = x; push_up(x), push_up(ii); x = ii; } void insert (int &amp;u, int x) { if (!u) { u = ++ now; sz[u] = cnt[u] = 1; key[u] = x; rd[u] = rand(); return; } if (key[u] == x) { cnt[u] ++ ; sz[u] ++ ; return; } int d = (x &gt; key[u]); insert(son[u][d], x); if (rd[u] &lt; rd[son[u][d]]) { rotate(u, d ^ 1); } push_up(u); } void del (int &amp;u, int x) { if (!u) return; if (x != key[u]) { del (son[u][x &gt; key[u]], x); } else { if (!son[u][0] &amp;&amp; !son[u][1]) { cnt[u] -- ; sz[u] -- ; if (cnt[u] == 0) u = 0; } else if (son[u][0] &amp;&amp; !son[u][1]) { rotate(u, 1); del (son[u][1], x); } else if (!son[u][0] &amp;&amp; son[u][1]) { rotate(u, 0); del (son[u][0], x); } else { int d = rd[son[u][0]] &gt; rd[son[u][1]]; rotate(u, d); del(son[u][d], x); } } push_up(u); } int get_rank(int u, int x) { // 得到排名 if (!u) return 0; if (key[u] == x) return sz[son[u][0]] + 1; if (key[u] &lt; x) return sz[son[u][0]] + cnt[u] + get_rank(son[u][1], x); return get_rank(son[u][0], x); } int find (int u, int x) { // 查询排名 if (!u) return 0; if(sz[son[u][0]] &gt;= x) { return find(son[u][0], x); } else if (sz[son[u][0]] + cnt[u] &lt; x) { return find(son[u][1], x - cnt[u] - sz[son[u][0]]); } else return key[u]; } int pre (int u, int x) { // 查询前驱 if (!u) return -inf; if (key[u] &gt;= x) { return pre(son[u][0], x); } else return max(key[u], pre(son[u][1], x)); } int suf (int u, int x) { // 查询后继 if (!u) return inf; if (key[u] &lt;= x) { return suf(son[u][1], x); } else return min(key[u], suf(son[u][0], x)); } void solve() { int query; cin &gt;&gt; query; while (query -- ) { int op, x; cin &gt;&gt; op &gt;&gt; x; if (op == 1) insert(root, x); if (op == 2) del(root, x); if (op == 3) cout &lt;&lt; get_rank(root, x) &lt;&lt; endl; if (op == 4) cout &lt;&lt; find(root, x) &lt;&lt; endl; if (op == 5) cout &lt;&lt; pre(root, x) &lt;&lt; endl; if (op == 6) cout &lt;&lt; suf(root, x) &lt;&lt; endl; } } 1.8.2 Fhq Treapmt19937 rnd(233); int root, idx; int x, y, z; struct fhq { int l, r; int key, val; // key权值，val堆值 int size; }tr[maxn]; inline int get_node (int key) { tr[ ++ idx].key = key; tr[idx].val = rnd(); tr[idx].size = 1; return idx; } inline void pushup (int u) { tr[u].size = tr[tr[u].l].size + tr[tr[u].r].size + 1; } inline void split (int u, int k, int &amp;x, int &amp;y) { if (!u) x = y = 0; else { if (tr[u].key &lt;= k) { x = u; split(tr[u].r, k, tr[u].r, y); } else { y = u; split(tr[u].l, k, x, tr[u].l); } pushup(u); } } inline int merge (int x, int y) { if (!x || !y) return x + y; if (tr[x].val &gt; tr[y].val) { tr[x].r = merge(tr[x].r, y); pushup(x); return x; } else { tr[y].l = merge(x, tr[y].l); pushup(y); return y; } } inline void insert (int k) { split (root, k, x, y); root = merge(merge(x, get_node(k)), y); } inline void del (int k) { split (root, k, x, z); split (x, k - 1, x, y); y = merge(tr[y].l, tr[y].r); root = merge(merge(x, y), z); } inline int get_rank (int k) { split (root, k - 1, x, y); k = tr[x].size + 1; root = merge(x, y); return k; } inline int get_key (int k) { int p = root; while (p) { if (tr[tr[p].l].size + 1 == k) { break; } else if (tr[tr[p].l].size &gt;= k) { p = tr[p].l; } else { k -= tr[tr[p].l].size + 1; p = tr[p].r; } } return tr[p].key; } inline int pre (int k) { split (root, k - 1, x, y); int p = x; while (tr[p].r) p = tr[p].r; k = tr[p].key; root = merge(x, y); return k; } inline int suf (int k) { split (root, k, x, y); int p = y; while (tr[p].l) p = tr[p].l; k = tr[p].key; root = merge(x, y); return k; } void solve() { read(n); for (int i = 1; i &lt;= n; i ++ ) { int op, x; read(op); read(x); if (op == 1) insert(x); else if (op == 2) del(x); else if (op == 3) printf(\"%lld\\n\", get_rank(x)); else if (op == 4) printf(\"%lld\\n\", get_key(x)); else if (op == 5) printf(\"%lld\\n\", pre(x)); else printf(\"%lld\\n\", suf(x)); } } // 区间反转版本 mt19937 rnd(233); int root, idx; int x, y, z; struct fhq { int l, r; int key, val; // key权值，val堆值 int size; int tag; }tr[maxn]; inline int get_node (int key) { tr[ ++ idx].key = key; tr[idx].val = rnd(); tr[idx].size = 1; tr[idx].tag = 0; return idx; } inline void pushup (int u) { tr[u].size = tr[tr[u].l].size + tr[tr[u].r].size + 1; } inline void pushdown (int u) { if (tr[u].tag) { swap(tr[u].l, tr[u].r); tr[tr[u].l].tag ^= 1, tr[tr[u].r].tag ^= 1; tr[u].tag = 0; } } inline void split (int u, int k, int &amp;x, int &amp;y) { if (!u) x = y = 0; else { pushdown(u); if (tr[tr[u].l].size + 1 &lt;= k) { x = u; split(tr[u].r, k - tr[tr[u].l].size - 1, tr[u].r, y); } else { y = u; split(tr[u].l, k, x, tr[u].l); } pushup(u); } } inline int merge (int x, int y) { if (!x || !y) return x + y; if (tr[x].val &gt; tr[y].val) { pushdown(x); tr[x].r = merge(tr[x].r, y); pushup(x); return x; } else { pushdown(y); tr[y].l = merge(x, tr[y].l); pushup(y); return y; } } inline void insert (int k) { split (root, k, x, y); root = merge(merge(x, get_node(k)), y); } inline void del (int k) { split (root, k, x, z); split (x, k - 1, x, y); y = merge(tr[y].l, tr[y].r); root = merge(merge(x, y), z); } inline int get_rank (int k) { split (root, k - 1, x, y); k = tr[x].size + 1; root = merge(x, y); return k; } inline int get_key (int k) { int p = root; while (p) { if (tr[tr[p].l].size + 1 == k) { break; } else if (tr[tr[p].l].size &gt;= k) { p = tr[p].l; } else { k -= tr[tr[p].l].size + 1; p = tr[p].r; } } return tr[p].key; } inline int pre (int k) { split (root, k - 1, x, y); int p = x; while (tr[p].r) p = tr[p].r; k = tr[p].key; root = merge(x, y); return k; } inline int suf (int k) { split (root, k, x, y); int p = y; while (tr[p].l) p = tr[p].l; k = tr[p].key; root = merge(x, y); return k; } inline void print (int u) { if (!u) return; pushdown(u); print(tr[u].l); printf(\"%lld \", tr[u].key); print(tr[u].r); } void solve() { read(n), read(m); // insert(-inf); insert(inf); for (int i = 1; i &lt;= n; i ++ ) insert(i); while (m -- ) { int l, r; read(l); read(r); split (root, l - 1, x, y); split (y, r - l + 1, y, z); tr[y].tag ^= 1; root = merge(x, merge(y, z)); } print(root); } 1.9 轻重链剖分int h[maxn], ne[maxn], e[maxn], idx; int w[maxn], wt[maxn], id[maxn], top[maxn], fa[maxn], depth[maxn], sz[maxn], son[maxn]; int tt; int n, m, k; int root, mod, cnt; struct node { int l, r; int sum, add; }tr[maxn &lt;&lt; 2]; inline void add (int a, int b) { e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ; } void dfs1 (int u, int f) { depth[u] = depth[f] + 1; fa[u] = f; sz[u] = 1; int mxson = -1; for (int i = h[u]; ~i; i = ne[i]) { int j = e[i]; if (j != f) { dfs1(j, u); sz[u] += sz[j]; if (sz[j] &gt; mxson) { mxson = sz[j]; son[u] = j; } } } } void dfs2 (int u, int topf) { id[u] = ++ cnt; wt[cnt] = w[u]; top[u] = topf; if (!son[u]) return; dfs2(son[u], topf); for (int i = h[u]; ~i; i = ne[i]) { int j = e[i]; if (!id[j]) dfs2(j, j); } } inline void pushup (int u) { tr[u].sum = (tr[u &lt;&lt; 1].sum + tr[u &lt;&lt; 1 | 1].sum) % mod; } inline void pushdown (int u) { auto &amp;r = tr[u], &amp;left = tr[u &lt;&lt; 1], &amp;right = tr[u &lt;&lt; 1 | 1]; if (r.add) { right.add = (right.add + r.add) % mod; right.sum = (right.sum + (right.r - right.l + 1) * r.add) % mod; left.add = (left.add + r.add) % mod; left.sum = (left.sum + (left.r - left.l + 1) * r.add) % mod; r.add = 0; } } inline void build (int u, int l, int r) { if (l == r) { tr[u] = {l, r, wt[r], 0}; return; } tr[u] = {l, r, 0, 0}; int mid = (l + r) &gt;&gt; 1; build(u &lt;&lt; 1, l, mid); build(u &lt;&lt; 1 | 1, mid + 1, r); pushup(u); } inline void modify (int u, int l, int r, int d) { if (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) { tr[u].sum = (tr[u].sum + (tr[u].r - tr[u].l + 1) * d) % mod; tr[u].add += d; } else { pushdown(u); int mid = tr[u].r + tr[u].l &gt;&gt; 1; if (l &lt;= mid) modify (u &lt;&lt; 1, l, r, d); if (r &gt; mid) modify (u &lt;&lt; 1 | 1, l, r, d); pushup(u); } } inline int query (int u, int l, int r) { if (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) { return tr[u].sum; } pushdown(u); int mid = tr[u].l + tr[u].r &gt;&gt; 1; int sum = 0; if (l &lt;= mid) sum = (sum + query(u &lt;&lt; 1, l, r)) % mod; if (r &gt; mid) sum = (sum + query(u &lt;&lt; 1 | 1, l, r)) % mod; return sum; } inline void Uprange (int x, int y, int d) { while (top[x] != top[y]) { if (depth[top[x]] &lt; depth[top[y]]) swap(x, y); modify(1, id[top[x]], id[x], d); x = fa[top[x]]; } if (depth[x] &gt; depth[y]) swap(x, y); modify(1, id[x], id[y], d); } inline int Qrange (int x, int y) { int sum = 0; while (top[x] != top[y]) { if (depth[top[x]] &lt; depth[top[y]]) swap(x, y); sum = (sum + query(1, id[top[x]], id[x])) % mod; x = fa[top[x]]; } if (depth[x] &gt; depth[y]) swap(x, y); sum = (sum + query(1, id[x], id[y])) % mod; return sum; } inline int lca (int x, int y) { while (top[x] != top[y]) { depth[top[x]] &gt; depth[top[y]] ? x = fa[top[x]] : y = fa[top[y]]; } return depth[x] &lt; depth[y] ? x : y; } void solve() { scanf(\"%d%d%d%d\", &amp;n, &amp;m, &amp;root, &amp;mod); for (int i = 1; i &lt;= n; i ++ ) scanf(\"%d\", w + i); ms(h, -1); for (int i = 1; i &lt; n; i ++ ) { int u, v; scanf(\"%d%d\", &amp;u, &amp;v); add(u, v);add(v, u); } dfs1(root, 0); dfs2(root, root); build(1, 1, n); for (int i = 1; i &lt;= m; i ++ ) { int op; scanf(\"%d\", &amp;op); if (op == 1) { int l, r, d; scanf(\"%d%d%d\", &amp;l, &amp;r, &amp;d); Uprange(l, r, d); } if (op == 2) { int l, r; scanf(\"%d%d\", &amp;l, &amp;r); printf(\"%d\\n\", Qrange(l, r)); } if (op == 3) { int x, d; scanf(\"%d%d\", &amp;x, &amp;d); modify(1, id[x], id[x] + sz[x] - 1, d % mod); } if (op == 4) { int x; scanf(\"%d\", &amp;x); printf(\"%d\\n\", query(1, id[x], id[x] + sz[x] - 1)); } } } 1.10 Dsu on Tree// 处理重儿子 void dfs (int u, int fa) { sz[u] = 1; for (auto j : G[u]) { if (j != fa) { dfs(j, u); sz[u] += sz[j]; if (sz[j] &gt; sz[son[u]]) son[u] = j; } } } // 这一步需要结合题意 void count (int u, int fa, int v) { cnt[val[u]] += v; // 增加或删除贡献 if (cnt[val[u]] &gt; mx) { mx = cnt[val[u]]; sum = val[u]; } else if (cnt[val[u]] == mx) { sum += val[u]; } // 统计除标记外的重儿子的所有子树的贡献 for (auto j : G[u]) { if (j == fa || j == flag) continue; count(j, u, v); } } void dfs (int u, int fa, bool op) { for (auto j : G[u]) { // 先处理所有轻儿子及其子树并且计算答案，删除贡献。 if (j != fa &amp;&amp; j != son[u]) { dfs(j, u, false); } } if (son[u]) { // 处理重儿子及其子树并计算答案，不删除贡献 dfs(son[u], u, true); flag = son[u]; } count(u, fa, 1); // 暴力统计u及其所有轻儿子的贡献合并到刚算出的重儿子信息里 flag = 0; ans[u] = sum; // 把需要删除贡献的删一删 if (!op) { count(u, fa, -1); sum = mx = 0; //这是因为count函数中会改变这两个变量值 } } 1.11 Splay#define ls(x) tr[x].ch[0] #define rs(x) tr[x].ch[1] #define fa(x) tr[x].fa #define root tr[0].ch[1] struct node { int fa , ch[2], val, rec, sum, tag; }tr[maxn]; int tot, pointnum; void update (int x) {tr[x].sum = tr[ls(x)].sum + tr[rs(x)].sum + tr[x].rec;} int ident (int x) {return tr[fa(x)].ch[0] == x ? 0 : 1;} void connect (int x, int fa, int how) {tr[fa].ch[how] = x; tr[x].fa = fa;} inline void pushdown (int u) { if (tr[u].tag) { tr[tr[u].ch[0]].tag ^= 1; tr[tr[u].ch[1]].tag ^= 1; swap(tr[u].ch[0], tr[u].ch[1]); tr[u].tag = 0; } } void rotate (int x) { int y = fa(x), r = fa(y); int yson = ident(x), rson = ident(y); connect(tr[x].ch[yson ^ 1], y, yson); connect(y, x, yson ^ 1); connect(x, r, rson); update(y), update(x); } void splay (int x, int to) { to = fa(to); while (fa(x) != to) { int y = fa(x); if (tr[y].fa == to) rotate(x); else if (ident(x) == ident(y)) rotate(y), rotate(x); else rotate(x), rotate(x); } } int newnode (int v, int f) { tr[ ++ tot].fa = f; tr[tot].rec = tr[tot].sum = 1; tr[tot].val = v; return tot; } void insert (int x) { int now = root; if (!root) {newnode(x, 0); root = tot;} else { while (1) { tr[now].sum ++ ; if (tr[now].val == x) {tr[now].rec ++ ; splay(now, root); return;} int ne = x &lt; tr[now].val ? 0 : 1; if (!tr[now].ch[ne]) { int p = newnode(x, now); tr[now].ch[ne] = p; splay(p, root); return; } now = tr[now].ch[ne]; } } } int find (int x) { // 找到值为x的某一结点 int now = root; while (1) { if (!now) return 0; if (tr[now].val == x) {splay(now, root); return now;} int ne = x &lt; tr[now].val ? 0 : 1; now = tr[now].ch[ne]; } } void del (int x) { int p = find(x); if (!p) return; if (tr[p].rec &gt; 1) {tr[p].rec -- , tr[p].sum -- ; return;} else { if (!tr[p].ch[0] &amp;&amp; !tr[p].ch[1]) {root = 0; return;} else if (!tr[p].ch[0]) { root = tr[p].ch[1]; tr[root].fa = 0; return; } else { int left = tr[p].ch[0]; while (tr[left].ch[1]) left = tr[left].ch[1]; splay(left, tr[p].ch[0]); connect (tr[p].ch[1], left, 1); connect (left, 0, 1); update(left); } } } int rk (int x) { // x的排名 int now = root, ans = 0; while (1) { if (tr[now].val == x) return ans + tr[tr[now].ch[0]].sum + 1; int ne = x &lt; tr[now].val ? 0 : 1; if (ne == 1) ans = ans + tr[tr[now].ch[0]].sum + tr[now].rec; now = tr[now].ch[ne]; } } int kth (int x) { // x排名的数 int now = root; while (1) { int used = tr[now].sum - tr[tr[now].ch[1]].sum; if (tr[tr[now].ch[0]].sum &lt; x &amp;&amp; x &lt;= used) { splay(now, root); return tr[now].val; // return now; 用于区间反转 } if (x &lt; used) now = tr[now].ch[0]; else now = tr[now].ch[1], x -= used; } } int pre (int x) { int now = root, ans = -inf; while (now) { if (tr[now].val &lt;= x) ans = max(ans, tr[now].val); int ne = x &lt;= tr[now].val ? 0 : 1; now = tr[now].ch[ne]; } return ans; } int suf (int x) { int now = root, ans = inf; while (now) { if (tr[now].val &gt;= x) ans = min(ans, tr[now].val); int ne = x &lt; tr[now].val ? 0 : 1; now = tr[now].ch[ne]; } return ans; } inline void reverse (int x, int y) { // 区间反转 int l = kth(x), r = kth(y + 2); splay(l, 0); splay(r, l); tr[tr[tr[root].ch[1]].ch[0]].tag ^= 1; } inline void print (int u) { // 中序遍历 pushdown(u); if (tr[u].ch[0]) print(tr[u].ch[0]); if (tr[u].val &gt; 1 &amp;&amp; tr[u].val &lt; n + 2) printf(\"%lld \", tr[u].val - 1); if (tr[u].ch[1]) print(tr[u].ch[1]); } 1.12 莫队// 普通莫队，add和del可以修改 int sq; struct query { int l, r, id; bool operator &lt; (const query &amp;it) const { if (l / sq != it.l / sq) return l &lt; it.l; if (l / sq &amp; 1) return r &lt; it.r; return r &gt; it.r; } }Q[1000010]; int q[1000010], ans[1000010], cnt[2000010], cur, l = 1, r; inline void add (int x) { if (!cnt[q[x]]) cur ++ ; cnt[q[x]] ++ ; } inline void del (int x) { cnt[q[x]] -- ; if (!cnt[q[x]]) cur -- ; } void solve() { read(n); sq = sqrt(n); for (int i = 1; i &lt;= n; i ++ ) read(q[i]); int query; read(query); for (int i = 0; i &lt; query; i ++ ) read(Q[i].l), read(Q[i].r), Q[i].id = i; sort(Q, Q + query); for (int i = 0; i &lt; query; i ++ ) { while (l &gt; Q[i].l) add( -- l); while (r &lt; Q[i].r) add( ++ r ); while (l &lt; Q[i].l) del(l ++ ); while (r &gt; Q[i].r) del(r -- ); ans[Q[i].id] = cur; } for (int i = 0; i &lt; query; i ++ ) printf(\"%d\\n\", ans[i]); } //带修莫队，块长可以选择pow(n*t, 0.33333) 或者 pow(n, 0.66666) const int maxn = 500010; int sq; struct query { int l, r, t, id; bool operator &lt; (const query &amp;it) const { if (l / sq != it.l / sq) return l &lt; it.l; else if (r / sq != it.r / sq) return r &lt; it.r; else return t &lt; it.t; } }Q[maxn]; struct change { int p, col; }c[maxn]; int q[maxn], ans[maxn], cnt[maxn * 2], cur; int l = 1, r = 0, qcnt, ccnt; inline void add (int x) { if (!cnt[x]) cur ++ ; cnt[x] ++ ; } inline void del (int x) { cnt[x] -- ; if (!cnt[x]) cur -- ; } inline void work (int x, int ti) { if (c[ti].p &gt;= Q[x].l &amp;&amp; c[ti].p &lt;= Q[x].r) { del(q[c[ti].p]); add(c[ti].col); } swap(q[c[ti].p], c[ti].col); } void solve() { read(n); read(m); sq = pow(n, 0.66666); // 块长 for (int i = 1; i &lt;= n; i ++ ) { read(q[i]); } char op[10]; for (int i = 1; i &lt;= m; i ++ ) { scanf(\"%s\", op); if (op[0] == 'Q') { qcnt ++ ; read(Q[qcnt].l); read(Q[qcnt].r); Q[qcnt].t = ccnt; Q[qcnt].id = qcnt; } else { ccnt ++ ; read(c[ccnt].p); read(c[ccnt].col); } } sort(Q + 1, Q + qcnt + 1); int now = 0; for (int i = 1; i &lt;= qcnt; i ++ ) { while (l &gt; Q[i].l) add(q[ -- l]); while (r &lt; Q[i].r) add(q[ ++ r]); while (l &lt; Q[i].l) del(q[l ++ ]); while (r &gt; Q[i].r) del(q[r -- ]); while (now &lt; Q[i].t) work(i, ++ now); while (now &gt; Q[i].t) work(i, now --); ans[Q[i].id] = cur; } for (int i = 1; i &lt;= qcnt; i ++ ) printf(\"%d\\n\", ans[i]); } 2. 图论2.1 最短路2.1.1 朴素Dijkstra O(n^2)int g[N][N]; // 邻接矩阵存稠密图 int dist[N]; // 每个点距离点1的距离 bool st[N]; // 判断该点是否确定 int dijkstra() { memset(dist, 0x3f, sizeof dist); dist[1] = 0; for (int i = 0; i &lt; n; i ++ ){ // n个点循环n次 int t = -1; for (int j = 1; j &lt;= n; j ++ ){ // 找未确定的点中dist最小的点 if (!st[j] &amp;&amp; (t == -1 || dist[j] &lt; dist[t])) t = j; } if (t == n &amp;&amp; dist[t] != 0x3f3f3f3f) return dist[t]; else if (t == n &amp;&amp; dist[t] == 0x3f3f3f3f) return -1; // 提前结束循环的优化 st[t] = true; for (int j = 1; j &lt;= n; j ++ )// 用t更新其他未确定点的距离 dist[j] = min(dist[j], dist[t] + g[t][j]); } if (dist[n] == 0x3f3f3f3f) return -1; else return dist[n]; } int main() { cin &gt;&gt; n &gt;&gt; m; memset(g, 0x3f, sizeof g); while (m -- ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; g[a][b] = min(g[a][b], c); } printf(\"%d\\n\", dijkstra()); return 0; } 2.1.2 堆优化Dijkstra O(mlogn)#include &lt;bits/stdc++.h&gt; using namespace std; typedef pair&lt;int, int&gt; PII; const int N = 1e6 + 10; int n, m; int h[N], w[N], e[N], ne[N], idx; int dist[N]; bool st[N]; int add(int a, int b, int c) { e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ; } // 求1号点到n号点的最短距离，如果不存在，则返回-1 int dijkstra() { memset(dist, 0x3f, sizeof dist); dist[1] = 0; priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap; heap.push({0, 1}); // first存储距离，second存储节点编号 while (heap.size()){ auto t = heap.top(); heap.pop(); int ver = t.second, distance = t.first; if (st[ver]) continue; // 防止产生冗余 st[ver] = true; for (int i = h[ver]; i != -1; i = ne[i]){ int j = e[i]; if (dist[j] &gt; dist[ver] + w[i]){ dist[j] = dist[ver] + w[i]; heap.push({dist[j], j}); } } } if (dist[n] == 0x3f3f3f3f) return -1; else return dist[n]; } int main() { cin &gt;&gt; n &gt;&gt; m; memset(h, -1, sizeof h); while (m -- ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; add(a, b, c); } cout &lt;&lt; dijkstra() &lt;&lt; endl; return 0; } 2.1.3 Bellman-ford O(nm)// 有边数限制的最短路 struct Edge { int a, b ,c; }edges[M]; // 结构体存边 int n, m, k; int dist[N]; int backup[N]; // 题目有特殊的边数限制，因此在更新时只能更新上次备份，否则会出现串联 void bellman_ford() { memset(dist, 0x3f, sizeof dist); dist[1] = 0; for (int i = 0; i &lt; k; i ++ ){ memcpy(backup, dist, sizeof dist); // 每次都将上次的dist存到备份里 for (int j = 0; j &lt; m; j ++ ){ auto e = edges[j]; dist[e.b] = min(dist[e.b], backup[e.a] + e.c); } } } int main() { cin &gt;&gt; n &gt;&gt; m &gt;&gt; k; for (int i = 0; i &lt; m ; i ++ ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; edges[i] = {a, b, c}; } bellman_ford(); if (dist[n] &gt; 0x3f3f3f3f / 2) printf(\"impossible\\n\"); else printf(\"%d\\n\", dist[n]); return 0; } // 无边数限制的最短路 #include &lt;bits/stdc++.h&gt; using namespace std; const int M = 1000010; struct Edge { int a, b ,c; }edges[M]; // 结构体存边 int n, m, k; int dist[M]; int bellman_ford() { memset(dist, 0x3f, sizeof dist); dist[1] = 0; //// 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。 for (int i = 0; i &lt; n; i ++ ){ for (int j = 0; j &lt; m; j ++ ){ auto e = edges[j]; dist[e.b] = min(dist[e.b], dist[e.a] + e.c); } } if (dist[n] == 0x3f3f3f3f) return -1; return dist[n]; } int main() { cin &gt;&gt; n &gt;&gt; m; for (int i = 0; i &lt; m ; i ++ ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; edges[i] = {a, b, c}; } if (bellman_ford() == -1) printf(\"impossible\\n\"); else printf(\"%d\\n\", dist[n]); return 0; } 2.1.4 SPFA O(nm)// 最短路 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 100010; int n, m; int h[N], w[N], e[N], ne[N], idx; int dist[N]; bool st[N]; void add(int a, int b, int c) { e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ; } int spfa() { memset(dist, 0x3f, sizeof dist); dist[1] = 0; queue&lt;int&gt; q; q.push(1); st[1] = true; while (q.size()){ int t = q.front(); q.pop(); st[t] = false; for (int i = h[t]; i != -1; i = ne[i]){ int j = e[i]; if (dist[j] &gt; dist[t] + w[i]){ dist[j] = dist[t] + w[i]; if (!st[j]){ q.push(j); st[j] = true; } } } } printf(\"%d\\n\", dist[n]); return dist[n]; } int main() { cin &gt;&gt; n &gt;&gt; m; memset(h, -1, sizeof h); while (m -- ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; add(a, b, c); } if (spfa() == 0x3f3f3f3f) printf(\"impossible\"); else printf(\"%d\\n\", spfa()); return 0; } // 判断负权环 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 2010, M = 10010; int n, m; int h[N], w[M], e[M], ne[M], idx; int dist[N], cnt[N]; bool st[N]; void add(int a, int b, int c) { e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ; } // 优化：queue改stack，或入队总数大于2*n即有负环 bool spfa() { queue&lt;int&gt; q; for (int i = 1; i &lt;= n; i ++ ){ st[i] = true; q.push(i); } while (q.size()){ int t = q.front(); q.pop(); st[t] = false; for (int i = h[t]; i != -1; i = ne[i]){ int j = e[i]; if (dist[j] &gt; dist[t] + w[i]){ dist[j] = dist[t] + w[i]; cnt[j] = cnt[t] + 1; if (cnt[j] &gt;= n) return true; if (!st[j]){ q.push(j); st[j] = true; } } } } return false; } int main() { cin &gt;&gt; n &gt;&gt; m; memset (h, -1, sizeof h); while (m -- ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; add(a, b, c); } if (spfa()) cout &lt;&lt; \"Yes\" &lt;&lt; endl; else cout &lt;&lt; \"No\" &lt;&lt; endl; return 0; } // SLF优化 int dist[maxn]; int cnt[maxn]; bool st[maxn]; vector&lt;PII&gt; G[maxn]; bool spfa(int s) { deque&lt;int&gt; q; dist[s] = 0; q.push_back(s); cnt[s] ++ ; st[s] = 1; while (q.size()) { int t = q.front(); q.pop_front(); st[t] = 0; for (auto it : G[t]) { int j = it.first, w = it.second; if (dist[j] &gt; dist[t] + w) { dist[j] = dist[t] + w; if (!st[j]) { if (!q.empty() &amp;&amp; dist[j] &gt; dist[q.front()]) { q.push_back(j); } else q.push_front(j); cnt[j] ++ ; if (cnt[j] &gt; n) return true; st[j] = 1; } } } } return false; } 2.1.5 Floyd O(n^3)#include &lt;bits/stdc++.h&gt; using namespace std; const int N = 210, INF = 1e9; int n, m, Q; int d[N][N]; // i到j距离 void floyd() { for (int k = 1; k &lt;= n; k ++ ){ for (int j = 1; j &lt;= n; j ++ ){ for (int i = 1; i &lt;= n; i ++ ){ d[i][j] = min(d[i][j], d[i][k] + d[k][j]); } } } } int main() { cin &gt;&gt; n &gt;&gt; m &gt;&gt; Q; for (int i = 1; i &lt;= n; i ++ ){ for (int j = 1; j &lt;= n; j ++ ){ if (i == j) d[i][j] = 0; else d[i][j] = INF; } } while (m -- ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; d[a][b] = min(d[a][b], c); } floyd(); while (Q -- ){ int a, b; cin &gt;&gt; a &gt;&gt; b; int t =d[a][b]; if (t &gt; INF / 2) printf(\"impossible\"); else printf(\"%d\\n\", t); } return 0; } // 传递闭包 for (int k = 0; k &lt; n; k ++ ) { for (int i = 0; i &lt; n; i ++ ) { for (int j = 0; j &lt; n; j ++ ) { d[i][j] |= d[i][k] &amp;&amp; d[k][j]; } } } // 求最小环 int n, m; int d[maxn][maxn], g[maxn][maxn]; int pos[maxn][maxn]; int path[maxn], cnt; void get_path (int i, int j) { if (pos[i][j] == 0) return; int k = pos[i][j]; get_path(i, k); path[cnt ++ ] = k; get_path(k, j); } int main () { cin &gt;&gt; n &gt;&gt; m; memset(g, 0x3f, sizeof g); for (int i = 1; i &lt;= n; i ++ ) g[i][i] = 0; while (m -- ) { int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; g[a][b] = g[b][a] = min(g[a][b], c); } int res = inf; memcpy(d, g, sizeof d); for (int k = 1; k &lt;= n; k ++ ) { for (int i = 1; i &lt; k; i ++ ) { for (int j = i + 1; j &lt; k; j ++ ) { if((long long)d[i][j] + g[j][k] + g[k][i] &lt; res) { res = d[i][j] + g[j][k] + g[k][i]; cnt = 0; path[cnt ++] = k; path[cnt ++] = i; get_path(i, j); path[cnt ++] = j; } } } for (int i = 1; i &lt;= n; i ++ ) { for (int j = 1; j &lt;= n; j ++ ) { if (d[i][j] &gt; d[i][k] + d[k][j]) { d[i][j] = d[i][k] + d[k][j]; pos[i][j] = k; } } } } if (res == inf) puts(\"No solution.\"); else { for (int i = 0; i &lt; cnt; i ++ ) cout &lt;&lt; path[i] &lt;&lt; ' '; cout &lt;&lt; endl; } } 2.1.6 路径还原//以朴素dijkstra为例，记录一个path数组，当dist数组被更新时，就同步跟新path数组 #include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 510; const int inf = 0x3f3f3f3f; int g[maxn][maxn]; int st[maxn]; int dist[500010]; int path[500010]; // 记录走来的路径 int n, m; int dijkstra() { memset(dist, 0x3f, sizeof dist); memset(path, -1 ,sizeof path); dist[1] = 0; for (int i = 1; i &lt;= n; i ++ ){ int t = -1; for (int j = 1; j &lt;= n; j ++ ){ if (!st[j] &amp;&amp; (t == -1 || dist[j] &lt; dist[t])) t = j; } st[t] = 1; for (int j = 1; j &lt;= n; j ++ ){ if (dist[j] &gt; dist[t] + g[t][j]){ dist[j] = dist[t] + g[t][j]; path[j] = t; // 记录 } } } return dist[n]; } vector&lt;int&gt; get_path(int x){ vector&lt;int&gt; p; for (; x != -1; x = path[x]) p.push_back(x); reverse(p.begin(), p.end()); //p中存下的是n到1的顺序，我们逆反一下顺序。 return p; } int main() { cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i ++ ){ for (int j = 1; j &lt;= n; j ++ ){ g[i][j] = (i == j) ? 0 : inf; } } for (int i = 1; i &lt;= m; i ++ ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; g[a][b] = min(g[a][b], c); } printf(\"%d\\n\", dijkstra()); vector&lt;int&gt; p = get_path(n); for (auto it : p){ printf(\"%d \", it); } return 0; } 2.1.7 最短路计数int cnt[maxn]; // 长度为i的路径的数量。 while (q.size()) { // 以bfs为例 auto t = q.front(); q.pop(); for (auto it : G[t]) { if (dist[it] &gt; dist[t] + 1) { dist[it] = dist[t] + 1; cnt[it] = cnt[t]; q.push(it); } else if (dist[it] == dist[t] + 1) cnt[it] = (cnt[it] + cnt[t]) % mod; } } 2.2 最小生成树2.2.1 Prim#include &lt;bits/stdc++.h&gt; using namespace std; const int N = 510, INF = 0x3f3f3f3f; int n, m; int g[N][N]; // 邻接矩阵存图 int dist[N]; // 1~i的距离 bool st[N]; int prim() { memset(dist, 0x3f, sizeof dist); int res = 0; for (int i = 0; i &lt; n; i ++ ){ int t = -1; for (int j = 1; j &lt;= n; j ++ ){ if (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j])) t = j; } if (i &amp;&amp; dist[t] == INF) return INF; if (i) res += dist[t]; st[t] = true; for (int j = 1; j &lt;= n; j ++ ) dist[j] = min(dist[j], g[t][j]); } return res; } int main() { cin &gt;&gt; n &gt;&gt; m; memset(g, 0x3f, sizeof g); while (m -- ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; g[a][b] = g[b][a] = min(g[a][b], c); // 无向图 } int t = prim(); if (t == INF) printf(\"impossible\"); else printf(\"%d\\n\", t); return 0; } 2.2.2 Kruskal#include &lt;bits/stdc++.h&gt; using namespace std; const int N = 100010, M = 200010, INF = 0x3f3f3f3f; int n, m; int p[N]; // 并查集 struct Edge { int a, b, w; }edges[M]; bool cmp(Edge a, Edge b) { return a.w &lt; b.w; } int find (int x) { if (p[x] != x) p[x] = find(p[x]); return p[x]; } int kruskal() { sort(edges, edges + m, cmp); for (int i = 0; i &lt;= n; i ++ ) p[i] = i; // 并查集的初始操作 int res = 0, cnt = 0; // cnt表示连通的边数 for (int i = 0; i &lt; m; i ++ ){ int a = edges[i].a, b = edges[i].b, w = edges[i].w; a = find(a), b = find(b); if (a != b){ p[a] = b; // 将边加入集合 res += w; cnt ++ ; } } if (cnt &lt; n - 1) return INF; return res; } int main() { cin &gt;&gt; n&gt;&gt; m; for (int i = 0; i &lt; m; i ++ ){ int a, b, w; cin &gt;&gt; a &gt;&gt; b &gt;&gt; w; edges[i] = {a, b, w}; } int t = kruskal(); if (t == INF) printf(\"impossible\"); // 不连通 else printf(\"%d\", t); return 0; } // 次小生成树 #include &lt;bits/stdc++.h&gt; using namespace std; #define int long long const int maxn = 510, maxm = 10010; typedef pair&lt;int, int&gt; PII; int n, m; struct node { int a, b, w; bool f; bool operator &lt; (const node &amp;it) const { return w &lt; it.w; } }e[maxm]; int p[maxn]; int d1[maxn][maxn], d2[maxn][maxn]; vector&lt;PII&gt; G[maxn]; int find (int x) { if (p[x] != x) p[x] = find(p[x]); return p[x]; } void dfs (int u, int fa, int maxd1, int maxd2, int d1[], int d2[]) { d1[u] = maxd1, d2[u] = maxd2; for (auto it : G[u]) { int j = it.first, w = it.second; if (j != fa) { int td1 = maxd1, td2 = maxd2; if (w &gt; td1) td2 = td1, td1 = w; else if (w &lt; td1 &amp;&amp; w &gt; td2) td2 = w; dfs(j, u, td1, td2, d1, d2); } } } signed main () { cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= m; i ++ ) { int a, b, w; cin &gt;&gt; a &gt;&gt; b &gt;&gt; w; e[i] = {a, b, w}; } sort(e + 1, e + m + 1); for (int i = 1; i &lt;= n; i ++ ) p[i] = i; int sum = 0; for (int i = 1; i &lt;= m; i ++ ) { int a = e[i].a, b = e[i].b, w = e[i].w; int pa = find(a), pb = find(b); if (pa != pb) { p[pa] = pb; sum += w; G[a].push_back({b, w}); G[b].push_back({a, w}); e[i].f = 1; } } for (int i = 1; i &lt;= n; i ++ ) { dfs(i, -1, -1e9, -1e9, d1[i], d2[i]); } int res = 1e18; for (int i = 1; i &lt;= m; i ++ ) { if (!e[i].f) { int a = e[i].a, b = e[i].b, w = e[i].w; int t; if (w &gt; d1[a][b]) { t = sum + w - d1[a][b]; } else if (w &gt; d2[a][b]) { t = sum + w - d2[a][b]; } res = min(res, t); } } cout &lt;&lt; res &lt;&lt; endl; } 2.3 二分图匹配2.3.1 染色法判断二分图/* 染色法的实现思路（DFS）： 1.用1，2代表两个颜色，0代表未染色，任选一个点染成1或2 2.遍历所有点，每次将未染色的点进行dfs 3.若染色失败即break/return */ #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 100010, M = 200010; int n, m; int h[N], e[M], ne[M], idx; int color[N]; void add(int a, int b) { e[idx] = b, ne[idx] = h[a], h[a] = idx ++; } bool dfs(int u, int c) { color[u] = c; // 染色 for (int i = h[u]; i != -1; i = ne[i]){ int j = e[i]; if (!color[j]){ if (!dfs(j, 3 - c)) return false; // 如果在dfs递归的过程中出现染色失败，则整个图都不是二分图 } else if (color[j] == c) return false; // 如果一条边的两端点同种颜色，则染色失败 } return true; // 无染色错误则染色成功 } int main() { cin &gt;&gt; n &gt;&gt; m; memset(h, -1, sizeof h); while (m -- ){ int a, b; cin &gt;&gt; a &gt;&gt; b; add(a, b), add(b, a); } bool flag = true; for (int i = 1; i &lt;= n; i ++ ){ // 遍历所有点，因为二分图不一定是连通图 if (!color[i]){ if (!dfs(i, 1)){ flag = false; break; } } } if (flag) printf(\"Yes\\n\"); else printf(\"No\"); return 0; } 2.3.2 匈牙利算法判断最大匹配#include &lt;bits/stdc++.h&gt; using namespace std; const int N = 510, M = 100010; int n1, n2, m; int h[N], e[M], ne[M], idx; int match[N]; // match[a] = b, 表示点a目前匹配了b bool st[N]; // st[a] = true, 表示点a目前已经有预定 void add(int a, int b) { e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ; } bool find(int x) // 注意与并查集的find函数区别，为x找一个匹配，或x的匹配点被别人预定，x要重新找一个匹配 { // 匹配成功返回true for (int i = h[x]; i != -1; i = ne[i]){ int j = e[i]; if (!st[j]){ // 该点目前没有被匹配 st[j] = true; // 预定该点 if (match[j] == 0 || find(match[j])){ // j点没有匹配，或与j匹配的点可以更换匹配 match[j] = x; return true; } } } return false; } int main() { scanf(\"%d%d%d\", &amp;n1, &amp;n2, &amp;m); memset(h, -1, sizeof h); while (m -- ){ int a, b; cin &gt;&gt; a &gt;&gt; b; add(a, b); // 从左集合找右集合，只存一条边也可以 } int res = 0; for (int i = 0; i &lt;= n1; i ++ ){ // 二分图不一定连通，因此要为所有点尝试匹配 memset(st, false, sizeof st); if (find(i)) res ++; } cout &lt;&lt; res &lt;&lt; endl; return 0; } 最小点覆盖 = 最大匹配 最大独立集 = n - 最大匹配 最小路径点覆盖= n - 最大匹配 2.4 拓扑排序const int N = 1e5 + 10; int e[N],ne[N],h[N],idx; int d[N];// d 代表每个元素的入度 int top[N];// top是拓扑排序的序列 int cnt = 1; // cnt代表top中有多少个元素 int n, m; void add(int a,int b){ e[idx] = b; ne[idx] = h[a]; h[a] = idx ++; } bool topsort(){ queue&lt;int&gt; q; int t; for(int i = 1;i &lt;= n; ++i)// 将所有入度为0的点加入队列 if(d[i] == 0) q.push(i); while(q.size()){ t = q.front();//每次取出队列的首部 top[cnt] = t;//加入到 拓扑序列中 cnt ++; // 序列中的元素 ++ q.pop(); for(int i = h[t];i != -1; i = ne[i]){ // 遍历 t 点的出边 int j = e[i]; d[j] --;// j 的入度 -- if(d[j] == 0) q.push(j); //如果 j 入度为0，加入队列当中 } } if(cnt &lt; n) return 0; else return 1; } int main(){ int a,b; cin &gt;&gt; n &gt;&gt; m; memset(h,-1,sizeof h); while(m--){ cin &gt;&gt; a &gt;&gt; b; add(a,b); d[b] ++;// a -&gt; b , b的入度++ } if(topsort() == 0) cout &lt;&lt; \"-1\"; // 序列不合法 else { for(int i = 1;i &lt;= n; ++i){ cout &lt;&lt; top[i] &lt;&lt;\" \"; } } return 0; } 2.5 LCAint n, m; int h[maxn], e[maxm], ne[maxm], idx; int depth[maxn], fa[maxn][20]; void add (int a, int b) { e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ; } void bfs (int root) { queue&lt;int&gt; q; q.push(root); memset(depth, 0x3f, sizeof depth); depth[0] = 0, depth[root] = 1; while (q.size()) { int t = q.front(); q.pop(); for (int i = h[t]; ~i; i = ne[i]) { int j = e[i]; if (depth[j] &gt; depth[t] + 1) { depth[j] = depth[t] + 1; q.push(j); fa[j][0] = t; for (int k = 1; k &lt;= 19; k ++ ) { fa[j][k] = fa[fa[j][k - 1]][k - 1]; } } } } } int lca (int a, int b) { if (depth[a] &lt; depth[b]) swap(a, b); for (int k = 19; k &gt;= 0; k -- ) { if (depth[fa[a][k]] &gt;= depth[b]) { a = fa[a][k]; } } if (a == b) return a; for (int k = 19; k &gt;= 0; k -- ) { if (fa[a][k] != fa[b][k]) { a = fa[a][k]; b = fa[b][k]; } } return fa[a][0]; } 2.6 Tarjan 强连通分量int n, m; int h[maxn], e[maxm], ne[maxm], idx; // 存图 int dfn[maxn], low[maxn], timestamp; // dfn表示编号为i的点的时间戳，low表示以点i出发走到的最小时间戳，timestamp为当前时间戳 int stk[maxn], top; // 模拟栈 bool in_stk[maxn]; // 判断是否在栈内 int id[maxn], scc_cnt, sz[maxn]; // id为点i在哪个强连通分量，scc_cnt教师强连通分量的数量 int dout[maxn]; // 出度 void tarjan(int u) { dfn[u] = low[u] = ++ timestamp; stk[ ++ top] = u, in_stk[u] = true; for (int i = h[u]; ~i; i = ne[i]) { int j = e[i]; if (!dfn[j]) { tarjan(j); low[u] = min(low[u], low[j]); } else if (in_stk[j]) low[u] = min(low[u], low[j]); } if (dfn[u] == low[u]) { ++ scc_cnt; int y; do { y = stk[top -- ]; in_stk[y] = false; id[y] = scc_cnt; } while (y != u); } } int main () { cin &gt;&gt; n &gt;&gt; m; memset(h, -1, sizeof h); while (m -- ) { int a, b; cin &gt;&gt; a &gt;&gt; b; add(a, b); } for (int i = 1; i &lt;= n; i ++ ) { if (!dfn[i]) { tarjan(i); } } for (int i = 1; i &lt;= n; i ++ ) { for (int j = h[i]; ~j; j = ne[j]) { int k = e[j]; int a = id[i], b = id[k]; if (a != b) dout[a] ++ ; } } //剩下由题 } 2.7 差分约束/* 求最小值，用最长路，求最大值，用最短路。 A = B &lt;=&gt; A≥B B≥A add(b, a, 0), add(a, b, 0); A &lt; B &lt;=&gt; B≥A+1 add(a, b, 1); A≥B &lt;=&gt; A≥B add (b, a, 0); A &gt; B &lt;=&gt; A≥B+1 add(b, a, 1); B≥A &lt;=&gt; B≥A add(a, b, 0); x &gt;= 1 建立虚拟源点x0 (dist[x0] = 0) 即x &gt;= x0 + 1 add(x0, x, 1); */ 3 数学3.1 线性筛int primes[N], cnt; // primes[]存储所有素数 bool st[N]; // st[x]存储x是否被筛掉 void get_primes(int n) { for (int i = 2; i &lt;= n; i ++ ) { if (!st[i]) primes[cnt ++ ] = i; for (int j = 0; primes[j] &lt;= n / i; j ++ ) { st[primes[j] * i] = true; if (i % primes[j] == 0) break; } } } 3.2 快速乘 &amp; 快速幂// 快速幂 int qmi (int a, int b) { // a ^ b int ans = 1; while (b) { if (b &amp; 1) ans = ans * a % mod; // 或 ans = mul(ans, a); a = a * a % mod; // 或 ans = mul(a, a); b &gt;&gt;= 1; } return ans; } // 快速乘 int mul (int a, int b) { // a * b int ans = 0; while (b) { if (b &amp; 1) ans = (ans + a) % mod; b &gt;&gt;= 1; a = (a * 2) % mod; } return ans; } 3.3 拓展欧几里得算法 exgcd/ 求x, y，使得ax + by = gcd(a, b) int exgcd(int a, int b, int &amp;x, int &amp;y) { if (!b) { x = 1; y = 0; return a; } int d = exgcd(b, a % b, y, x); y -= (a/b) * x; return d; } 3.4 欧拉函数// 求1~N中与N互质的个数 int phi(int x) { int res = x; for (int i = 2; i &lt;= x / i; i ++ ) if (x % i == 0) { res = res / i * (i - 1); while (x % i == 0) x /= i; } if (x &gt; 1) res = res / x * (x - 1); return res; } // 筛法求欧拉函数 int primes[N], cnt; // primes[]存储所有素数 int euler[N]; // 存储每个数的欧拉函数 bool st[N]; // st[x]存储x是否被筛掉 void get_eulers(int n) { euler[1] = 1; for (int i = 2; i &lt;= n; i ++ ) { if (!st[i]) { primes[cnt ++ ] = i; euler[i] = i - 1; } for (int j = 0; primes[j] &lt;= n / i; j ++ ) { int t = primes[j] * i; st[t] = true; if (i % primes[j] == 0) { euler[t] = euler[i] * primes[j]; break; } euler[t] = euler[i] * (primes[j] - 1); } } } 3.5 约数 个数/和 定理// 约数个数 //n=p1^a1*p2^a2*p3^a3*…*pk^ak //f(n) = (a1+1)(a2+1)(a3+1)…(ak+1) int main() { int n; cin &gt;&gt; n; unordered_map&lt;int, int&gt; primes; while (n -- ) { int x; cin &gt;&gt; x; for (int i = 2; i &lt;= x / i; i ++ ) while (x % i == 0) { x /= i; primes[i] ++ ; } if (x &gt; 1) primes[x] ++ ; } LL res = 1; for (auto p : primes) res = res * (p.second + 1) % mod; cout &lt;&lt; res &lt;&lt; endl; return 0; } // 约数之和 //n=p1^a1*p2^a2*p3^a3*…*pk^ak //f(n)=(p1^0+p1^1+p1^2+…p1^a1)(p2^0+p2^1+p2^2+…p2^a2)…(pk^0+pk^1+pk^2+…pk^ak） unordered_map&lt;int, int&gt; mp; while(t -- ) { int x; scanf(\"%d\", &amp;x); // 即n for(int i = 2; i &lt;= x / i; i ++) { while(x % i == 0) { x /= i; mp[i]++; } } if(x &gt; 1) mp[x] ++; } long long res = 1; for(auto p : mp) { long long a = p.first, b = p.second; long long t = 1; while(b -- ) { t = (t * a + 1) % mod; // 秦九韶算法 } res = res * t % mod; } cout &lt;&lt; res &lt;&lt; endl; 3.6 组合数// O(ab) const int N = 2010; int c[N][N]; void init () { for (int i = 0; i &lt; N ; i ++ ) { for (int j = 0; j &lt;= i; j ++ ) { if (!j) c[i][j] = 1; else c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % mod; } } } // lucas定理 // C(a, b) = C(a % p, b % p) * C(a / p, b / p); p为质数 int a, b, p; // 求C(a, b) % p; int qmi(int a, int k, int p) { int res = 1; while (k) { if (k &amp; 1) res = (LL)res * a % p; a = (LL)a * a % p; k &gt;&gt;= 1; } return res; } int C(int a, int b, int p) { if (b &gt; a) return 0; int res = 1; for (int i = 1, j = a; i &lt;= b; i ++, j -- ) { res = (LL)res * j % p; res = (LL)res * qmi(i, p - 2, p) % p; } return res; } int lucas(LL a, LL b, int p) { if (a &lt; p &amp;&amp; b &lt; p) return C(a, b, p); return (LL)C(a % p, b % p, p) * lucas(a / p, b / p, p) % p; } inline void init () { fac[0] = 1; for (int i = 1; i &lt;= n; i ++ ) fac[i] = fac[i - 1] * i % mod2; ifac[n] = qmi(fac[n], mod2 - 2) % mod2; for (int i = n; i &gt;= 1; i -- ) ifac[i - 1] = ifac[i] * i % mod2; } inline int C (int n, int m) { return fac[n] * ifac[m] % mod2 * ifac[n - m] % mod2; } // k次前缀和的组合数 C（k-1+i，k-1） 3.7 整除分块$$\\sum_{i=1}^n\\lfloor\\frac{n}{i}\\rfloor$$ // 下取整 inline int getdown (int n) { int ans = 0; for(int l = 1, r, len; l &lt;= n; l = r + 1) { r = n / (n / l), len = r - l + 1; ans += len * (n / l); } return ans; } // 上取整 inline int getup (int n) { int ans = 0; for(int l = 1, r, len; l &lt;= n; l = r + 1) { r = n / (n / l), len = r - l + 1; ans += len * (n / l + 1); if (n % r == 0) ans -= r; } return ans; } 3.8 卡特兰数$$f(n)=C_{2n}^{n}-C_{2n}^{n-1}$$ 1.n 个元素进栈序列为：1，2，3，4，...，n，则有多少种出栈序列。 2.n 对括号，则有多少种 “括号匹配” 的括号序列 3.n + 1 个叶子节点能够构成多少种形状不同的（国际）满二叉树 4.电影票一张 50 coin，且售票厅没有 coin，m 个人各自持有 50 coin，n 个人各自持有 100 coin。则有多少种排队方式，可以让每个人都买到电影票。 5.8 个高矮不同的人需要排成两队，每队 4 个人。其中，每排都是从低到高排列，且第二排的第 i 个人比第一排中第 i 个人高，则有多少种排队方式? 6.在一个凸多边形中，通过若干条互不相交的对角线，把这个多边形划分成了若干个三角形。任务是键盘上输入凸多边形的边数n，求不同划分的方案数f（n）。 前几项： 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190, 6564120420, 24466267020, 91482563640, 343059613650, 1289904147324, 4861946401452, ... 3.9 线性求逆ll inv[maxn] = {0,1}; for (int i = 2; i &lt; maxn; i ++ ) inv[i] = (mod - mod / i) * inv[mod % i] % mod; 3.10 博弈论经典nim n堆，每次拿任意个，不可不拿，先拿完赢 // 先手是否必胜？ cin &gt;&gt; n; int res = 0; for (int i = 0; i &lt; n; i ++ ){ int a; cin &gt;&gt; a; res ^= a; } if (res) printf(\"Yes\\n\"); else printf(\"No\\n\"); anti-nim游戏 n堆，每次拿任意个，不可不拿，先拿完输 先手胜当且仅当 ①所有堆石子数都为1且游戏的SG值为0（即有偶数个孤单堆-每堆只有1个石子数）；②存在某堆石子数大于1且游戏的SG值不为0. bool ok = 0; int ans = 0; for (int i = 0; i &lt; sz(res); i ++ ) { ans ^= res[i]; if (res[i] &gt; 1) ok = 1; } if ((!ok &amp;&amp; ans == 0) || (ok &amp;&amp; ans != 0)) puts(\"Alice win\"); else puts(\"Bob win\"); 对称博弈 3.11 快速傅里叶变换struct Complex{ double x,y; Complex (double x = 0, double y = 0) : x(x), y(y) {} inline Complex operator + (const Complex b) const { return Complex (x + b.x, y + b.y); } inline Complex operator - (const Complex b) const { return Complex(x - b.x, y - b.y); } inline Complex operator * (const Complex b) const { Complex res; res.x = x * b.x - y * b.y; res.y = x * b.y + y * b.x; return res; } }a[maxn], b[maxn]; int n, m, k; int rev[maxn], l; int lim = 1; void FFT (Complex *a, int type) { for (int i = 0; i &lt; lim; i ++ ) { if (i &lt; rev[i]) swap(a[i], a[rev[i]]); } for (int mid = 1; mid &lt; lim; mid &lt;&lt;= 1) { // 区间的中点 Complex wn(cos(pi / mid), type * sin(pi / mid)); for (int r = mid &lt;&lt; 1, j = 0; j &lt; lim; j += r) { // 右端点 Complex w(1, 0); for(int k = 0; k &lt; mid; k ++ , w = w * wn) { // 枚举左半区间 Complex x = a[j + k], y = w * a[mid + j + k]; a[j + k] = x + y, a[mid + j + k] = x - y; } } } } void solve() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 0; i &lt;= n; i ++ ) scanf(\"%lf\", &amp;a[i].x); for (int i = 0; i &lt;= m; i ++ ) scanf(\"%lf\", &amp;b[i].x); while (lim &lt;= n + m) lim &lt;&lt;= 1, l ++ ; for (int i = 0; i &lt; lim; i ++ ) { rev[i] = (rev[i &gt;&gt; 1] &gt;&gt; 1) | ((i &amp; 1) &lt;&lt; (l - 1)); } FFT(a, 1), FFT(b, 1); for (int i = 0; i &lt;= lim; i ++ ) a[i] = a[i] * b[i]; FFT(a, -1); for (int i = 0; i &lt;= n + m; i ++ ) printf(\"%d \", (int)(a[i].x / lim + 0.5)); } //大整数相乘 cin &gt;&gt; A &gt;&gt; B; for (int i = A.size() - 1; i &gt;= 0; i -- ) { a[A.size() - i - 1].x = A[i] - '0'; } for (int i = B.size() - 1; i &gt;= 0; i -- ) { b[B.size() - i - 1].x = B[i] - '0'; } while (lim &lt;= A.size() + B.size()) lim &lt;&lt;= 1, l ++ ; for (int i = 0; i &lt; lim; i ++ ) { rev[i] = (rev[i &gt;&gt; 1] &gt;&gt; 1) | ((i &amp; 1) &lt;&lt; (l - 1)); } FFT(a, 1), FFT(b, 1); for (int i = 0; i &lt;= lim; i ++ ) { a[i] = a[i] * b[i]; } FFT(a, -1); for (int i = 0; i &lt;= lim; i ++ ) { ans[i] += (int)(a[i].x / lim + 0.5); if (ans[i] &gt;= 10) { ans[i + 1] += ans[i] / 10; ans[i] %= 10; if (i == lim) lim ++ ; } } while (!ans[lim] &amp;&amp; lim &gt;= 1) lim -- ; while (lim &gt;= 0) { printf(\"%d\", ans[lim -- ]); } 3.12 最小二乘法求线性回归方程$$k = \\frac{\\sum_{i = 1}^{n} x_iy_i - n\\bar{x}\\bar{y}}{\\sum_{i = 1}^{n} x_i^2 - n\\bar{x}^2}$$ $$d = \\bar{y} - k\\bar{x}$$ for (int i = 1; i &lt;= n; i ++ ) q[i] = read(); double sumx = 0, sumy = 0, iq = 0, ii = 0; for (int i = 1; i &lt;= n; i ++ ) { sumx += i, sumy += q[i]; iq += i * q[i]; ii += i * i; } double k = (iq - sumx * sumy / n) / (ii - sumx * sumx / n); double d = sumy / n - k * sumx / n; double ans = 0; for (int i = 1; i &lt;= n; i ++ ) { ans += (k * i + d - q[i]) * (k * i + d - q[i]); } printf(\"%.6Lf\\n\", ans); 3.13 线性基const int MAXL = 60; struct LinearBasis { int a[MAXL + 1]; int cnt = 0; LinearBasis () { fill(a, a + MAXL + 1, 0); } LinearBasis (int *x, int n) { // 快速构造线性基 build (x, n); } inline bool insert (int t) { // 线性基动态插入数 for (int j = MAXL; j &gt;= 0; j -- ) { if (!t) return false; if (!(t &amp; (1ll &lt;&lt; j))) continue; if (a[j]) t ^= a[j]; else { cnt ++ ; // for (int k = 0; k &lt; j; k ++ ) { // if (t &amp; (1ll &lt;&lt; k)) t ^= a[k]; // } // for (int k = j + 1; k &lt;= MAXL; k ++ ) { // if (a[k] &amp; (1ll &lt;&lt; j)) a[k] ^= t; // } a[j] = t; return false; } } return true; } void build (int *x, int n) { fill(a, a + MAXL + 1, 0); for (int i = 1; i &lt;= n; i ++ ) insert(x[i]); } inline void rebuild () { // 重构成易于求kth的形式 for (int i = 0; i &lt;= MAXL; i ++ ) { for (int j = i - 1; j &gt;= 0; j -- ) { if (a[i] &amp; (1ll &lt;&lt; j)) a[i] ^= a[j]; } } } inline void mergefrom (const LinearBasis &amp;b) { // 合并两个线性基 for (int i = 0; i &lt;= MAXL; i ++ ) insert(b.a[i]); } static LinearBasis merge (const LinearBasis &amp;a, const LinearBasis &amp;b) { LinearBasis res = a; for (int i = 0; i &lt;= MAXL; i ++ ) res.insert(b.a[i]); return res; } inline int querymax () { // 查询子集最大异或和 int res = 0; for (int i = 0; i &lt;= MAXL; i ++ ) res ^= a[i]; return res; } inline int querymin () { // 查询子集最小异或和 for (int i = 0; i &lt;= MAXL; i ++ ) if (a[i]) return a[i]; } inline int kth (int k) { // k大异或和 if (cnt &lt; n) k -- ; if (k &gt;= (1ll &lt;&lt; cnt)) return -1; int ans = 0; for (int i = 0, j = 0; i &lt;= MAXL; i ++ ) { if (a[i]) { if (k &amp; (1ll &lt;&lt; j)) ans ^= a[i]; j ++ ; } } return ans; } inline int rank (int x) { // 查询异或和排名，不去重需要 k % mod * qmi(2, n - a.cnt) % mod + 1) % mod; int ans = 0; for (int i = 0, j = 0; i &lt;= MAXL; i ++ ) { if (a[i]) { if (x &amp; (1ll &lt;&lt; i)) ans |= (1ll &lt;&lt; j); j ++ ; } } return ans; } }; 4 动态规划4.1 线性DP4.1.2 最长上升子序列 O(nlogn)// O(n^2) int f[N], q[N]; // q原数组,f[i]表示以结尾的最长上升序列 int mx = 1; for (int i = 1; i &lt;= n; i ++ ) { f[i] = 1; // 设f[i]默认为1，找不到前面数字小于自己的时候就为1 for (int j = 1; j &lt; i; j ++ ) { if (q[i] &gt; q[j]) f[i] = max(f[i], f[j] + 1); } mx = max(mx, f[i]); } // O(nlogn) vector&lt;int&gt; stk; stk.push_back(q[1]); for (int i = 2; i &lt;= n; i ++ ) { if (q[i] &gt; stk.back()) stk.push_back(q[i]); // //如果该元素大于栈顶元素,将该元素入栈 else *lower_bound(stk.begin(), stk.end(), q[i]) = q[i]; // //替换掉第一个大于或者等于这个数字的那个数 } cout &lt;&lt; stk.size() &lt;&lt; endl; 4.1.3 最长公共子序列 O(n^2)int a[N], b[N]; int f[N][N]; // f[i][j]表示a串前i个元素和b串前j个元素的最长公共子序列长度，注意下标从1开始 cin &gt;&gt; n &gt;&gt; m &gt;&gt; a + 1 &gt;&gt; b + 1; for (int i = 1; i &lt;= n; i ++ ) { for (int j = 1; j &lt;= m; j ++ ) { if (a[i] == b[j]) { f[i][j] = f[i - 1][j - 1] + 1; } else { f[i][j] = max(f[i - 1][j], f[i][j - 1]); } } } // LCS + 输出字符串 cin &gt;&gt; n &gt;&gt; m &gt;&gt; a + 1 &gt;&gt; b + 1; int A = strlen(a + 1), B = strlen(b + 1); // a串b串长度 for (int i = A; i &gt;= 1; i -- ) { for (int j = B; j &gt;= 1; j -- ) { if (a[i] == b[j]) f[i][j] = f[i + 1][j + 1] + 1; else f[i][j] = max (f[i + 1][j], f[i][j + 1]); } } int i = 1, j = 1; while (i &lt;= A &amp;&amp; j &lt;= B) { if (a[i] == b[j]) { cout &lt;&lt; a[i]; // 输出最长公共子串 i ++ , j ++ ; } else if (f[i][j] == f[i + 1][j]) i ++ ; else j ++ ; } 4.1.4 最长公共上升子序列 O(n^2)#include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 3010; int a[maxn], b[maxn]; int f[maxn][maxn]; // f[i] [j] 代表所有a[1 ~ i]和b[1 ~ j]中以b[j]结尾的公共上升子序列的长度最大值； int n; int main() { cin &gt;&gt; n; for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; a[i]; for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; b[i]; for (int i = 1; i &lt;= n; i ++ ){ int maxv = 1; for (int j = 1; j &lt;= n; j ++ ){ f[i][j] = f[i - 1][j]; if (a[i] == b[j]) f[i][j] = max(f[i][j], maxv); if (a[i] &gt; b[j]) maxv = max(maxv, f[i - 1][j] + 1); } } int ans = 0; for (int i = 1; i &lt;= n; i ++ ) ans = max(ans, f[n][i]); cout &lt;&lt; ans &lt;&lt; endl; } 4.2 背包4.2.1 01背包 O(nm)// 求恰好装满的最优解,f[0] = 0, f[1~m] = -inf; int n, m; int v[N], w[N]; int f[N]; int main() { cin &gt;&gt; n &gt;&gt; m; // n件物品，背包容量为m for (int i = 1; i &lt;= n; i ++ ){ int v, w; cin &gt;&gt; v &gt;&gt; w; // v质量，w价值 for (int j = m; j &gt;= v; j -- ) f[j] = max(f[j], f[j - v] + w); } cout &lt;&lt; f[m] &lt;&lt; endl; return 0; } 4.2.2 完全背包 O(nm)// 每件物品有无限个 int f[N]; int main() { cin &gt;&gt; n &gt;&gt; m; // n件物品，背包容量为m for (int i = 0; i &lt;= n; i ++ ){ int v, w; cin &gt;&gt; v &gt;&gt; w;// v质量，w价值 // 正序枚举 for (int j = v; j &lt;= m; j ++ ) f[j] = max(f[j], f[j - v] + w); } cout &lt;&lt; f[m] &lt;&lt; endl; return 0; } 4.2.3 多重背包4.2.3.1 二进制优化 O (NVlogs) // 每件物品最多有Si个，用二进制优化后再做01背包 int v[N], w[N]; int f[M]; int main() { cin &gt;&gt; n &gt;&gt; m; int cnt = 0; // 表示下标 for (int i = 1; i &lt;= n; i ++ ){ int a, b, s; // a质量，b价值，s最多个数 cin &gt;&gt; a &gt;&gt; b &gt;&gt; s; int k = 1; // 幂次 while (k &lt;= s){ cnt ++; v[cnt] = a * k; w[cnt] = b * k; s -= k; k *= 2; } if (s &gt; 0){ // 表示有大于幂次的部分 cnt ++ ; v[cnt] = a * s; w[cnt] = b * s; } } //n = cnt; for (int i = 1; i &lt;= cnt; i ++ ){ for (int j = m; j &gt;= v[i]; j -- ){ f[j] = max(f[j], f[j - v[i]] + w[i]); } } cout &lt;&lt; f[m] &lt;&lt; endl; return 0; } 4.2.3.2 单调队列优化 O (NV)int f[N], g[N], q[N]; // fj为前i个物品，在体积j下的最大价值，g为前i-1个物品,在体积j下的最大价值, q为单调队列. int main() { cin &gt;&gt; n &gt;&gt; m; for (int i = 0; i &lt; n; i ++ ) { int v, w, s; cin &gt;&gt; v &gt;&gt; w &gt;&gt; s; memcpy(g, f, sizeof f); for (int j = 0; j &lt; v; j ++ ) { int hh = 0, tt = -1; for (int k = j; k &lt;= m; k += v) { if (hh &lt;= tt &amp;&amp; q[hh] &lt; k - s * v) hh ++ ; while (hh &lt;= tt &amp;&amp; g[q[tt]] - (q[tt] - j) / v * w &lt;= g[k] - (k - j) / v * w) tt -- ; q[ ++ tt] = k; f[k] = g[q[hh]] + (k - q[hh]) / v * w; } } } cout &lt;&lt; f[m] &lt;&lt; endl; return 0; } 4.2.4 分组背包 O (nms)int v[N][N], w[N][N], s[N]; int f[N]; int main() { cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i ++ ){ cin &gt;&gt; s[i]; for (int j = 0; j &lt; s[i]; j ++ ){ cin &gt;&gt; v[i][j] &gt;&gt; w[i][j]; } } for (int i = 1; i &lt;= n; i ++ ){ for (int j = m; j &gt;= 0; j -- ){ for (int k = 0; k &lt; s[i]; k ++ ){ if (v[i][k] &lt;= j) f[j] = max(f[j], f[j - v[i][k]] + w[i][k]); } } } cout &lt;&lt; f[m] &lt;&lt; endl; return 0; } 4.2.5 超大背包// 当物品质量过高，则将价值和质量转换 int f[maxn]; // f[i]为价值为i下的最小体积 void solve() { cin &gt;&gt; n &gt;&gt; m; memset(f, 0x3f, sizeof f); f[0] = 0; for (int i = 1; i &lt;= n; i ++ ){ int w, v; cin &gt;&gt; v &gt;&gt; w; // 用价值上限暴力枚举 for (int j = 100000; j &gt;= w; j -- ) f[j] = min(f[j], f[j - w] + v); } int ans = 0; for (int i = 1; i &lt;= 100000; i ++ ){ if (f[i] &lt;= m) ans = max(ans, i); // 暴力枚举所有价值，当体积能装下即为一组合法解 } cout &lt;&lt; ans &lt;&lt; endl; } 4.2.6 二维费用背包(有物品数量限制的背包) O(nmk)int n, V, M; int f[maxn][maxn]; // 表示不超过i的第一费用，j的第二费用的最大价值。 int main() { cin &gt;&gt; n &gt;&gt; V &gt;&gt; M; // M为第二重最大费用，或为物品数量限制 for (int i = 1; i &lt;= n; i ++ ){ int v, m, w; cin &gt;&gt; v &gt;&gt; m &gt;&gt; w; for (int j = V; j &gt;= v; j -- ){ for (int k = M; k &gt;= m; k -- ){ // 第二重费用，或为物品数量限制 f[j][k] = max(f[j][k], f[j - v][k - m] + w); } } } cout &lt;&lt; f[V][M] &lt;&lt; endl; } 4.2.7 混合背包// 01背包，完全背包，多重背包的混合 // 考虑将01背包和完全背包转化为多重背包，再使用二进制优化求解多重背包 int n, m, v[100010], w[100010], dp[100010]; int main() { cin &gt;&gt; n &gt;&gt; m; // n件物品，容量为m int cnt = 1; for(int i = 1; i &lt;= n; i ++) { int a, b, s; cin &gt;&gt; a &gt;&gt; b &gt;&gt; s; //a体积，b价值 int k = 1; // 幂次 if(s &lt; 0) s = 1; // s&lt;0，01背包，只能拿一个 else if(s == 0) s = m / a; // s=0,完全背包，最多拿m/a个 while(k &lt;= s) { v[cnt] = a * k; w[cnt] = b * k; s -= k; k *= 2; cnt ++; } if(s &gt; 0) { v[cnt] = s * a; w[cnt] = s * b; cnt ++ ; } } for(int i = 1; i &lt;= cnt; i ++) { for(int j = m; j &gt;= v[i]; j -- ) { dp[j] = max(dp[j], dp[j - v[i]] + w[i]); } } cout &lt;&lt; dp[m]; } 4.2.6 背包问题输出方案//用res[i]表示背包容量为i时上次选择了第几个物品. #include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 101000; int n, m; int dp[maxn], res[maxn]; int v[maxn], w[maxn]; int main () { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++ ) scanf(\"%d%d\", &amp;v[i], &amp;w[i]); for (int i = 1; i &lt;= n; i ++ ) { for (int j = v[i]; j &lt;= m; j ++ ) { if (dp[i - 1][j] &lt; dp[i - 1][j - v[i]] + w[i]) { res[j] = v[i]; dp[j] = dp[j - v[i]] + w[i]; } } } printf(\"%d\\n\", dp[m]); vector&lt;int&gt; ans; int now = dp[m]; while (res[now] != 0) { ans.push_back(res[now]); now -= res[now]; } for (int i = ans.size() - 1; i &gt;= 0; i -- ) { printf(\"%lld \", ans[i]); } } 4.3 区间DP O(n^3)int f[maxn][maxn], g[maxn][maxn]; // 合并i~j所需的最小/最大价值 int s[maxn]; // 原数组的前缀和 int w[maxn]; for (int i = 1; i &lt;= n; i ++ ) { cin &gt;&gt; w[i]; w[i + n] = w[i]; // 若有环形要求 } for (int i = 1; i &lt;= n * 2; i ++ ) s[i] = s[i - 1] + w[i]; memset(f, 0x3f, sizeof f); memset(g, -0x3f, sizeof g); for (int len = 1; len &lt;= n; len ++ ) { // 枚举区间长度 for (int l = 1; l + len - 1 &lt;= n * 2; l ++ ) { // 枚举左端点 (若无环形则到n) int r = l + len - 1; // 找到右端点 if (l == r) f[l][r] = g[l][r] = 0; else { for (int k = l; k &lt; r; k ++ ) { // 枚举分界点 f[l][r] = min(f[l][r], f[l][k] + f[k + 1][r] + s[r] - s[l - 1]); // minvalue g[l][r] = max(g[l][r], g[l][k] + g[k + 1][r] + s[r] - s[l - 1]); // maxvalue } } } } int mi = inf, mx = -inf; for (int i = 1; i &lt;= n; i ++ ) { // 若无环形则直接f[1][n]; mi = min(mi, f[i][i + n - 1]); mx = max(mx, g[i][i + n - 1]); } cout &lt;&lt; mi &lt;&lt; endl; cout &lt;&lt; mx &lt;&lt; endl; /* 将ax和ax+1合并为ax*ax+1，获得(ax-ax+1)^2 注：不用考虑合并的和得到的分数计算方式不相等，合并完后就是改变ax和ax+1的值，直接照题目计算即可 */ void solve() { int n; cin &gt;&gt; n; for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i]; for (int i = 1; i &lt;= n; i++) { s[i][i] = a[i]; for (int j = i + 1; j &lt;= n; j++) { s[i][j] = s[i][j - 1] * a[j] % mod; } } for (int len = 2; len &lt;= n; len++) { for (int l = 1; l &lt;= n - len + 1; l++) { int r = l + len - 1; for (int k = l; k &lt; r; k++) { dp[l][r] = max(dp[l][r], dp[l][k] + dp[k + 1][r] + (s[l][k] - s[k + 1][r]) * (s[l][k] - s[k + 1][r])); } } } cout &lt;&lt; dp[1][n] &lt;&lt; endl; } 4.4 树形DP// 1.树中最长路径，求距离型 int dfs(int u, int f) { int dist = 0; int d1 = 0, d2 = 0; // d1为最长路径，d2为次长路径 for (int i = h[u]; i != -1; i = ne[i]) { int j = e[i]; if (j == f) continue; int d = dfs(j, u) + w[i]; dist = max(dist, d); if (d &gt;= d1) d2 = d1, d1 = d; else if (d &gt; d2) d2 = d; } ans = max(ans, d1 + d2); return dist; } int main () { cin &gt;&gt; n; memset(h, -1, sizeof h); for (int i = 1; i &lt; n; i ++ ) { int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; add(a, b, c), add(b, a, c); } dfs(1, -1); cout &lt;&lt; ans &lt;&lt; endl; } // 4.5 状压DP4.6 数位DP// 统计0~N有多少位含i int dgt(int n) { int res = 0; while (n) ++ res, n /= 10; return res; } int count (int n, int i) { int res = 0, d = dgt(n); for (int j = 1; j &lt;= d; j ++ ) { int p = pow(10, j - 1), l = n / p / 10, r = n % p, dj = n / p % 10; if (i) res += l * p; if (!i &amp;&amp; l) res += (l - 1) * p; if ( (dj &gt; i) &amp;&amp; (i || l) ) res += p; if ( (dj == i) &amp;&amp; (i || l) ) res += r + 1; } return res; } // 统计数位上至少有k个某数 #include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 210; int f[maxn][maxn]; int k, b; void init () { for (int i = 0; i &lt; maxn; i ++ ) { for (int j = 0; j &lt;= i; j ++ ) { if (!j) f[i][j] = 1; else f[i][j] = f[i - 1][j] + f[i - 1][j - 1]; } } } int dp (int n) { if (!n) return 0; vector&lt;int&gt; nums; while (n) nums.push_back(n % b), n /= b; int res = 0; int ls = 0; for (int i = nums.size() - 1; i &gt;= 0; i -- ) { int x = nums[i]; if (x) { res += f[i][k - ls]; if (x &gt; 1) { if (k - ls - 1 &gt;= 0) res += f[i][k - ls - 1]; break; } else { ls ++ ; if (ls &gt; k) break; } } if (!i &amp;&amp; ls == k) res ++ ; } return res; } int main () { init (); int l, r; cin &gt;&gt; l &gt;&gt; r &gt;&gt; k &gt;&gt; b; cout &lt;&lt; dp(r) &lt;&lt; ' ' &lt;&lt; dp(l - 1) &lt;&lt; endl; } // 统计l~r中有多少个满足条件的数（单调增，减，不出现某数等） #include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 15; int f[maxn][maxn]; void init () { for (int i = 0; i &lt;= 9; i ++ ) f[1][i] = 1; for (int i = 2; i &lt; maxn; i ++ ) { for (int j = 0; j &lt;= 9; j ++ ) { for (int k = j; k &lt;= 9; k ++ ) { f[i][j] += f[i - 1][k]; } } } } int dp(int n) { if (!n) return 1; vector&lt;int&gt; nums; while (n) nums.push_back(n % 10), n /= 10; int res = 0; int ls = 0; for (int i = nums.size() - 1; i &gt;= 0; i -- ) { int x = nums[i]; for (int j = ls; j &lt; x; j ++ ) { res += f[i + 1][j]; } if (x &lt; ls) break; ls = x; if (!i) res ++ ; } return res; } int main () { init(); int l, r; while (cin &gt;&gt; l &gt;&gt; r) { cout &lt;&lt; dp(r) - dp(l - 1) &lt;&lt; endl; } } 4.7 单调队列优化DP//单调队列常用来优化：i的前m个范围内区间的最值问题。（注意，此处的范围都是一个定值 //n个物品中，连续m个中至少选出一个，总价值最小。 //或 不能连续k个在一起，即至少从k+1个中选出一个不选。 #include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 200010; int n, m; int w[maxn], dp[maxn]; int q[maxn]; int main () { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++ ) scanf(\"%d\", &amp;w[i]); int hh = 0, tt = 0; for (int i = 1; i &lt;= n; i ++ ) { while (hh &lt;= tt &amp;&amp; i - q[hh] &gt; m) hh ++ ; dp[i] = dp[q[hh]] + w[i]; while (hh &lt;= tt &amp;&amp; dp[q[tt]] &gt;= dp[i]) tt -- ; q[ ++ tt] = i; } if (n + 1 - m &gt; q[hh]) hh ++ ; printf(\"%d\\n\", dp[q[hh]]); } 4.8 斜率优化DP#include &lt;bits/stdc++.h&gt; using namespace std; #define int long long const int maxn = 1000010; int n, S; int q[maxn]; int st[maxn], sc[maxn], f[maxn]; signed main () { scanf(\"%lld%lld\", &amp;n, &amp;S); for (int i = 1; i &lt;= n; i ++ ) { scanf(\"%lld %lld\", st + i, sc + i); st[i] += st[i - 1]; sc[i] += sc[i - 1]; } int hh = 0, tt = 0; q[0] = 0; for (int i = 1; i &lt;= n; i ++ ) { while (hh &lt; tt &amp;&amp; (f[q[hh + 1]] - f[q[hh]]) &lt;= (sc[q[hh + 1]] - sc[q[hh]]) * (st[i] + S)) // 由于K单调，因此直接维护。否则可以二分 hh ++ ; f[i] = f[q[hh]] + S * (sc[n] - sc[q[hh]]) + st[i] * (sc[i] - sc[q[hh]]); while (hh &lt; tt &amp;&amp; (f[q[tt]] - f[q[tt - 1]]) * (sc[i] - sc[q[tt]]) &gt;= (f[i] - f[q[tt]]) * (sc[q[tt]] - sc[q[tt - 1]])) // 维护下凸包 tt -- ; q[ ++ tt] = i; } printf(\"%lld\\n\", f[n]); } 5. 字符串5.1 KMPconst int mxn = 1e6 + 100; struct KMP { int ne[mxn], len; string t; void clear() { len = ne[0] = ne[1] = 0; } //下标从1开始 //string 转 char ，在末尾加'\\0' void init (string s) { len = sz(s) - 1; t = s; for (int i = 2; i &lt;= len; i ++ ) { ne[i] = ne[i - 1]; while (ne[i] &amp;&amp; s[i] != s[ne[i] + 1]) ne[i] = ne[ne[i]]; ne[i] += (s[i] == s[ne[i] + 1]); } } // 求所有在s串中的start_pos. vector&lt;int&gt; match (string s) { int len_s = sz(s) - 1; vector&lt;int&gt; st_pos(0); for (int i = 1, j = 1; i &lt;= len_s;) { while (j != 1 &amp;&amp; s[i] != t[j]) j = ne[j - 1] + 1; if (s[i] == t[j]) j ++ , i ++ ; else i ++ ; if (j == len + 1) { st_pos.pb(i - j + 1); j = ne[len] + 1; } } return st_pos; } void debug () { for (int i = 0; i &lt;= len; i ++ ) { printf(\"[debug] nxt[%d]=%d\\n\", i, ne[i]); } } /* 循环周期 形如 acaca 中 ac 是一个合法周期 */ vector&lt;int&gt; periodic() { vector&lt;int&gt; ret; int now = len; while (now) { now = ne[now]; ret.pb(len - now); } return ret; } /* 循环节 形如 acac 中ac、acac是循环节，aca不是*/ vector&lt;int&gt; periodic_loop() { vector&lt;int&gt; ret; for (int x : periodic()) { if (len % x == 0) ret.pb(x); } return ret; } int min_periodic_loop() { return periodic_loop()[0]; } }kmp; 5.2 Manacherstruct Manacher { int lc[maxn]; string ch; int N; Manacher(string s) {init(s); manacher();} /* s 1 bas */ void init (string s) { int n = sz(s) - 1; ch.resize(n * 2 + 10); ch[n * 2 + 1] = '#'; ch[0] = '@'; ch[n * 2 + 2] = '\\0'; for (int i = n; i &gt;= 1; i -- ) { ch[i * 2] = s[i]; ch[i * 2 - 1] = '#'; } N = 2 * n + 1; } void manacher() { lc[1] = 1; int k = 1; for (int i = 2; i &lt;= N; i ++ ) { int p = k + lc[k] - 1; if (i &lt;= p) { lc[i] = min(lc[2 * k - i], p - i + 1); } else lc[i] = 1; while (ch[i + lc[i]] == ch[i - lc[i]]) lc[i] ++ ; if (i + lc[i] &gt; k + lc[k]) k = i; } } void debug () { puts(ch.c_str()); for (int i = 1; i &lt;= N; i ++ ) { printf(\"lc[%d]=%d\\n\", i, lc[i]); } } }; void solve() { string s; cin &gt;&gt; s; s = \" \" + s; Manacher manacher(s); manacher.debug(); } 5.3 Hashconst int sigma = 60 * 60; /* 字符集大小 */ const int HASH_CNT = 2; /* hash次数 */ int s[maxn]; /* char* 1-bas * sum[i] = s[i]+s[i-1]*Seed+s[i-2]*Seed^2+...+s[1]*Seed^(i-1)*/ ULL Prime_Pool[] = {1998585857ul, 23333333333ul}; ULL Seed_Pool[] = {911, 146527, 19260817, 91815541}; ULL Mod_Pool[] = {29123, 998244353, 1000000009, 4294967291ull}; struct Hash { ULL seed, mod; ULL base[maxn], sum[maxn]; int perm[sigma]; void init (int seedindex, int modindex) { seed = Seed_Pool[seedindex], mod = Mod_Pool[modindex]; base[0] = 1; for (int i = 1; i &lt;= n; i ++ ) { base[i] = base[i - 1] * seed % mod; } for (int i = 1; i &lt;= n; i ++ ) { sum[i] = (sum[i - 1] * seed % mod + s[i]) % mod; } } /*random_shuffle 离散化id，防止kill_hash*/ void index_init(int seedindex, int modindex) { seed = Seed_Pool[seedindex], mod = Mod_Pool[modindex]; base[0] = 1; for (int i = 1; i &lt;= n; i ++ ) { base[i] = base[i - 1] * seed % mod; } iota (perm + 1, perm + sigma + 1, 1); random_shuffle(perm + 1, perm + sigma + 1); for (int i = 1; i &lt;= n; i ++ ) { sum[i] = (sum[i - 1] * seed % mod + perm[s[i]]) % mod; } } ULL gethash (int l, int r) { return (sum[r] - sum[l - 1] * base[r - l + 1] % mod + mod) % mod; } }hasher[HASH_CNT]; inline pair&lt;ULL, ULL&gt; hashrange(int l, int r) { return mkp(hasher[0].gethash(l, r), hasher[1].gethash(l, r)); } map&lt;char, int&gt; id; int idcnt; void solve() { read(n), read(m); string a; cin &gt;&gt; a; for (int i = 0; i &lt; n; i ++ ) { if (!id.count(a[i])) id[a[i]] = ++ idcnt; s[i + 1] = id[a[i]]; } for (int i = 0; i &lt; HASH_CNT; i ++ ) hasher[i].index_init(i, i); while (m -- ) { int l1, r1, l2, r2; read(l1), read(r1), read(l2), read(r2); if (hashrange(l1, r1) == hashrange(l2, r2)) puts(\"Yes\"); else puts(\"No\"); } } 5.4 AC自动机#include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 300010; queue&lt;int&gt; q; //int vis[maxn]; 用于做出现次数 struct Aho_Corasick_Automaton { int c[maxn][26], fail[maxn], cnt, val[maxn]; // int flag[maxn], in[maxn], ans[maxn]; // 用于做出现次数 void ins (string s, int x) { // 不加x,即为出现个数 int len = s.size(); int now = 0; for (int i = 0; i &lt; len; i ++ ) { int v = s[i] - 'a'; if (!c[now][v]) c[now][v] = ++ cnt; now = c[now][v]; } // if (!flag[now]) flag[now] = x; // 用于做出现次数 // val[x] = flag[now]; // val[now] ++ ; // 用于做出现个数 } void build() { for (int i = 0; i &lt; 26; i ++ ) { if (c[0][i]) { fail[c[0][i]] = 0; q.push(c[0][i]); } } while (q.size()) { int t = q.front(); q.pop(); for (int i = 0; i &lt; 26; i ++ ) { if (c[t][i]) { fail[c[t][i]] = c[fail[t]][i]; // in[fail[c[t][i]]] ++ ; // 用于做出现次数 q.push(c[t][i]); } else c[t][i] = c[fail[t]][i]; } } } void query (char *s) { int len = strlen(s); int now = 0; // int ans = 0; for (int i = 0; i &lt; len; i ++ ) { now = c[now][s[i] - 'a']; ans[now] ++ ; // 用于做出现次数 // for (int t = now; t &amp;&amp; ~val[t]; t = fail[t]) { // 用于做出现个数 // // ans += val[t], val[t] = -1; // } } // return ans; 最终出现个数 } // void topsort() { // 用于做出现次数 // for (int i = 1; i &lt;= cnt; i ++ ) { // if (!in[i]) q.push(i); // } // while (q.size()) { // int t = q.front(); q.pop(); // vis[flag[t]] = ans[t]; // int v = fail[t]; // in[v] -- ; // ans[v] += ans[t]; // if (!in[v]) q.push(v); // } // } void clear () { cnt = 0; memset(c, 0, sizeof c); memset(val, 0, sizeof val); memset(fail, 0, sizeof fail); // memset(flag, 0, sizeof flag); // 用于做出现次数 // memset(ans, 0, sizeof ans); // memset(in, 0, sizeof in); } }AC; int n; string p[200]; char t[1000010]; // vis[AC.val[i]] 第i个串的出现个数. int main () { while (scanf(\"%d\", &amp;n), n) { AC.clear(); for (int i = 1; i &lt;= n; i ++ ) { cin &gt;&gt; p[i]; AC.ins(p[i], i); } AC.build(); scanf(\"%s\", t); AC.query(t); AC.topsort(); int mx = 0; for (int i = 1; i &lt;= n; i ++ ) { mx = max(mx, vis[AC.val[i]]); // printf(\"%d\\n\", vis[AC.val[i]]); } printf(\"%d\\n\", mx); for (int i = 1; i &lt;= n; i ++ ) { if (vis[AC.val[i]] == mx) cout &lt;&lt; p[i] &lt;&lt; endl; } } } 5.5 最小表示法#include &lt;bits/stdc++.h&gt; using namespace std; char s[1000]; int main () { scanf(\"%s\", s + 1); int n = strlen(s + 1); for (int i = 1; i &lt;= n; i ++ ) { s[n + i] = s[i]; } int i = 1, j = 2, k; while (i &lt;= n &amp;&amp; j &lt;= n) { for (k = 0; k &lt; n &amp;&amp; s[i + k] == s[j + k]; k ++ ); if (k == n) break; if (s[i + k] &gt; s[j + k]) { i += k + 1; if (i == j) i ++ ; } else { j += k + 1; if (i == j) j ++ ; } } int ans = min(i, j); for (int i = ans; i &lt;= ans + n - 1; i ++ ) printf(\"%c\", s[i]); } 5.6 Trie// 字典树 const int mxn = 1e6 + 100; struct Trie { int nxt[mxn &lt;&lt; 1][26], cnt[mxn &lt;&lt; 1]; int c = 0; void clear() { c = 0; ms(nxt[0], 0); ms(cnt, 0); } inline int newnode () { c ++ ; return c; } void insert (string s) { int u = 0, now = 0; while (now &lt; sz(s)) { u = insert(u, s[now] - 'a'); now ++ ; } cnt[u] ++ ; } inline int insert (int pre, int ch) { return nxt[pre][ch] ? nxt[pre][ch] : nxt[pre][ch] = newnode(); } inline int query (string s) { int u = 0, now = 0; while (now &lt; sz(s)) { if (!nxt[u][s[now] - 'a']) return 0; else u = nxt[u][s[now] - 'a']; now ++ ; } return cnt[u]; } }trie; void solve() { read(n); for (int i = 1; i &lt;= n; i ++ ) { string op, a; cin &gt;&gt; op &gt;&gt; a; if (op == \"I\") trie.insert(a); else printf(\"%lld\\n\", trie.query(a)); } } // 01trie 最大区间异或和 const int mxn = 5e5 + 100; struct Tire { int nxt[mxn &lt;&lt; 2][2], l[mxn &lt;&lt; 2]; int cnt, ansl, ansr, ansv; inline void init () { cnt = 0; ansv = -1; ms(nxt[0], 0); ms(l, 0x3f); } inline int create () { cnt ++ ; ms(nxt[cnt], 0); return cnt; } inline void insert (int id, int x) { int u = 0; for (int i = 31; i &gt;= 0; i -- ) { int t = ((x &gt;&gt; i) &amp; 1); if (!nxt[u][t]) nxt[u][t] = create(); u = nxt[u][t]; } l[u] = id; // l[u] = min(l[u], id); } inline void query (int id, int x) { int u = 0, res = 0; // de(ansv); de(x); for (int i = 31; i &gt;= 0; i -- ) { int t = ((x &gt;&gt; i) &amp; 1); if (nxt[u][!t]) { u = nxt[u][!t]; res += 1ll &lt;&lt; i; } else u = nxt[u][t]; } // de(id); de(res); // if (res == ansv) { // if (l[u] &lt; ansl) { // ansl = l[u]; ansr = id; // } // } if (res &gt; ansv) { ansv = res; ansl = l[u]; ansr = id; } } }trie; void solve() { read(n); trie.init(); trie.insert(0, 0); int sum = 0; for (int i = 1; i &lt;= n; i ++ ) { int x; read(x); sum ^= x; trie.query(i, sum); trie.insert(i, sum); } printf(\"%lld %lld %lld\\n\", trie.ansv, trie.ansl + 1, trie.ansr); } // 可持久化01trie const int mxn = 6e5 + 100; struct Tire { int nxt[mxn * 25][2], sum[mxn * 25]; int root[mxn * 25]; int cnt; inline void init () { cnt = 0; ms(nxt[0], 0); ms(root, 0); ms(sum, 0); } inline int create () { cnt ++ ; ms(nxt[cnt], 0); return cnt; } inline int insert (int x, int pre) { int u = ++ cnt, t = u; for (int i = 30; i &gt;= 0; i -- ) { int t = ((x &gt;&gt; i) &amp; 1); nxt[u][0] = nxt[pre][0], nxt[u][1] = nxt[pre][1]; sum[u] = sum[pre] + 1; nxt[u][t] = ++ cnt; u = nxt[u][t], pre = nxt[pre][t]; } sum[u] = sum[pre] + 1; return t; } inline int query (int x, int l, int r) { int res = 0; for (int i = 30; i &gt;= 0; i -- ) { int t = !((x &gt;&gt; i) &amp; 1); if (sum[nxt[r][t]] - sum[nxt[l][t]] &gt; 0) { res |= (1ll &lt;&lt; i); l = nxt[l][t], r = nxt[r][t]; } else l = nxt[l][!t], r = nxt[r][!t]; } return res; } }trie; void solve() { read(n), read(m); int now = 0; n ++ ; trie.root[1] = trie.insert(now, trie.root[0]); for (int i = 2; i &lt;= n; i ++ ) { int x; read(x); now ^= x; trie.root[i] = trie.insert(now, trie.root[i - 1]); } while (m -- ) { char op[2]; scanf(\"%s\", op); if (*op == 'A') { int x; read(x); now ^= x; n ++ ; trie.root[n] = trie.insert(now, trie.root[n - 1]); } else { int l, r, x; read(l), read(r), read(x); int tmp = now ^ x; ll ans = trie.query(tmp, trie.root[l - 1], trie.root[r]); printf(\"%lld\\n\", ans); } } } 6 杂项6.1 高精度__int128使用（kuangbin模板）（范围：-2^127 ~ 2^127， 约10^38，longlong范围10^19） #include &lt;bits/stdc++.h&gt; using namespace std; inline __int128 read(){ __int128 x = 0, f = 1; char ch = getchar(); while(ch &lt; '0' || ch &gt; '9'){ if(ch == '-') f = -1; ch = getchar(); } while(ch &gt;= '0' &amp;&amp; ch &lt;= '9'){ x = x * 10 + ch - '0'; ch = getchar(); } return x * f; } inline void print(__int128 x){ if(x &lt; 0){ putchar('-'); x = -x; } if(x &gt; 9) print(x / 10); putchar(x % 10 + '0'); } int main(void){ __int128 a = read(); __int128 b = read(); print(a + b); cout &lt;&lt; endl; return 0; } 大整数类（压9位） #include &lt;bits/stdc++.h&gt; using namespace std; typedef long long ll; struct Wint:vector&lt;ll&gt; { const static ll BIT=1e9; Wint(ll n=0) {push_back(n);check();} Wint&amp; operator=(const char* num) { int Len=strlen(num)-1; clear(); for(int i=Len;i&gt;=0;i-=9) { push_back(0); ll w=1; for(int j=i;j&gt;i-9&amp;&amp;j&gt;=0;--j) back()+=(num[j]^48)*w,w*=10; } return *this; } Wint&amp; check() { while(!empty()&amp;&amp;!back()) pop_back(); if(empty()) return *this; for(int i=1;i&lt;size();++i) (*this)[i]+=(*this)[i-1]/BIT, (*this)[i-1]%=BIT; while(back()&gt;=BIT) { push_back(back()/BIT); (*this)[size()-2]%=BIT; } return *this; } }; bool operator&lt;(Wint a,Wint b) { if(a.size()!=b.size()) return a.size()&lt;b.size(); for(int i=a.size()-1;i&gt;=0;--i) if(a[i]!=b[i]) return a[i]&lt;b[i]; return 0; } bool operator&gt;(Wint a,Wint b) {return b&lt;a;} bool operator&lt;=(Wint a,Wint b) {return !(a&gt;b);} bool operator&gt;=(Wint a,Wint b) {return !(a&lt;b);} bool operator!=(Wint a,Wint b) {return a&lt;b||b&lt;a;} bool operator==(Wint a,Wint b) {return !(a&lt;b)&amp;&amp;!(b&lt;a);} Wint&amp; operator+=(Wint &amp;a,Wint b) { if(a.size()&lt;b.size()) a.resize(b.size()); for(int i=0;i&lt;b.size();++i) a[i]+=b[i]; return a.check(); } Wint operator+(Wint a,Wint b) {return a+=b;} Wint&amp; operator-=(Wint &amp;a,Wint b) { for(int i=0;i&lt;b.size();a[i]-=b[i],++i) if(a[i]&lt;b[i]) { int j=i+1; while(!a[j]) ++j; while(j&gt;i) --a[j],a[--j]+=Wint::BIT; } return a.check(); } Wint operator-(Wint a,Wint b) {return a-=b;} Wint operator*(Wint a,Wint b) { if(a.empty()&amp;&amp;b.empty()) return a; Wint n; n.assign(a.size()+b.size()-1,0); for(int i=0;i&lt;a.size();++i) for(int j=0;j&lt;b.size();++j) n[i+j]+=a[i]*b[j]; return n.check(); } Wint&amp; operator*=(Wint &amp;a,Wint b) {return a=a*b;} Wint operator/(Wint a,int b) { Wint n; bool wp=0; ll t=0; for(int i=a.size()-1;i&gt;=0;--i) { t=t*Wint::BIT+a[i]; if(wp||t/b) wp=1,n.push_back(t/b); t%=b; } reverse(n.begin(),n.end()); return n; } Wint&amp; operator/=(Wint &amp;a,int b) {return a=a/b;} void readX(Wint &amp;n) {char s[100010]; scanf(\"%s\",s); n=s;} void writeX(Wint n) { if(n.empty()) {putchar('0'); return;} int Len=n.size()-1; printf(\"%lld\",n[Len]); for(int i=Len-1;i&gt;=0;--i) printf(\"%09lld\",n[i]); } 6.2 二维前缀和//构造前缀和矩阵 a[i][j]+=a[i][j-1]+a[i-1][j]-a[i-1][j-1]; //求x1, y1, x2, y2为边界的子矩阵之和 a[x2][y2]-a[x1-1][y2]-a[x2][y1-1]+a[x1-1][y1-1]; 6.3 双指针6.4 ST表// 可换成 max, min, gcd void init () { for (int j = 0; j &lt; 20; j ++ ) { for (int i = 1; i + (1 &lt;&lt; j) - 1 &lt;= n; i ++ ) { if (!j) dp[i][j] = q[i]; else dp[i][j] = max(dp[i][j - 1], dp[i + (1 &lt;&lt; j - 1)][j - 1]); } } } int query (int l, int r) { int k = log2(r - l + 1); return max(dp[l][k], dp[r - (1 &lt;&lt; k) + 1][k]); } 6.5 快读函数 read()// 仅支持整型 template &lt;typename _T&gt; inline void read(_T &amp;f) { f = 0; _T fu = 1; char c = getchar(); while (c &lt; '0' || c &gt; '9') { if (c == '-') { fu = -1; } c = getchar(); } while (c &gt;= '0' &amp;&amp; c &lt;= '9') { f = (f &lt;&lt; 3) + (f &lt;&lt; 1) + (c &amp; 15); c = getchar(); } f *= fu; } //重载流输入型 struct IOS{ template&lt;typename ATP&gt;IOS&amp; operator &gt;&gt; (ATP &amp;x){ x = 0; int f = 1; char c; for(c = getchar(); c &lt; '0' || c &gt; '9'; c = getchar()) if(c == '-') f = -1; while(c &gt;= '0' &amp;&amp; c &lt;= '9') x = x * 10 + (c ^ '0'), c = getchar(); x*= f; return *this; } }io; io &gt;&gt; n; 6.6 模拟退火/* 求费马点型 在二维平面上有 n 个点，第 i 个点的坐标为 (xi,yi)。 请你找出一个点，使得该点到这 n 个点的距离之和最小。 该点可以选择在平面中的任意位置，甚至与这 n 个点的位置重合。 */ #define x first #define y second typedef pair&lt;double, double&gt; PII; const int maxn = 110; int n; PII q[maxn]; double ans = 1e8; double rand (double l, double r) { return (double)rand() / RAND_MAX * (r - l) + l; } double dis (PII a, PII b) { return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y)); } double calc (PII p) { double res = 0; for (int i = 1; i &lt;= n; i ++ ) { res += dis(p, q[i]); } ans = min(ans, res); return res; } void simulate_anneal () { PII cur(rand(0, 10000), rand(0, 10000)); for (double t = 1e4; t &gt; 1e-4; t *= 0.9) { PII np(rand(cur.x - t, cur.x + t), rand(cur.y - t, cur.y + t)); double d = calc(np) - calc(cur); if (exp(-d / t) &gt; rand(0, 1)) cur = np; } } int main () { srand(time(NULL)); scanf(\"%d\", &amp;n); for (int i = 1; i &lt;= n; i ++ ) scanf(\"%lf%lf\", &amp;q[i].first, &amp;q[i].second); // 或 while ((double)clock()/CLOCKS_PER_SEC&lt;0.8) for (int i = 1; i &lt;= 100; i ++ ) simulate_anneal(); printf(\"%.0lf\\n\", ans); } 6.7 STLvector, 变长数组，倍增的思想 size() 返回元素个数 empty() 返回是否为空 clear() 清空 front()/back() push_back()/pop_back() begin()/end() [] 支持比较运算，按字典序 pair&lt;int, int&gt; first, 第一个元素 second, 第二个元素 支持比较运算，以first为第一关键字，以second为第二关键字（字典序） string，字符串 int has = s.find('xxxx'); if (has != string::npos) 含xxx字符 szie()/length() 返回字符串长度 empty() clear() substr(起始下标，(子串长度)) 返回子串 c_str() 返回字符串所在字符数组的起始地址 代表可以用printf输出string类 queue, 队列 size() empty() push() 向队尾插入一个元素 front() 返回队头元素 back() 返回队尾元素 pop() 弹出队头元素 priority_queue, 优先队列，默认是大根堆 push() 插入一个元素 top() 返回堆顶元素 pop() 弹出堆顶元素 定义成小根堆的方式：priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q; stack, 栈 size() empty() push() 向栈顶插入一个元素 top() 返回栈顶元素 pop() 弹出栈顶元素 deque, 双端队列 size() empty() clear() front()/back() push_back()/pop_back() push_front()/pop_front() begin()/end() [] set, map, multiset, multimap, 基于平衡二叉树（红黑树），动态维护有序序列 size() empty() clear() begin()/end() ++, -- 返回前驱和后继，时间复杂度 O(logn) set/multiset insert() 插入一个数 find() 查找一个数 count() 返回某一个数的个数 erase() (1) 输入是一个数x，删除所有x O(k + logn) (2) 输入一个迭代器，删除这个迭代器 lower_bound()/upper_bound() lower_bound(x) 返回大于等于x的最小的数的迭代器 upper_bound(x) 返回大于x的最小的数的迭代器 map/multimap insert() 插入的数是一个pair erase() 输入的参数是pair或者迭代器 find() [] 时间复杂度是 O(logn) lower_bound()/upper_bound() unordered_set, unordered_map, unordered_multiset, unordered_multimap, 哈希表 和上面类似，增删改查的时间复杂度是 O(1) 不支持 lower_bound()/upper_bound()， 迭代器的++，-- bit.size() 返回大小（位数） bit.count() 返回1的个数 bit.any() 返回是否有1 bit.none() 返回是否没有1 bit.set() 全都变成1 bit.set(p) 将第p + 1位变成1（bitset是从第0位开始的！） bit.set(p, x) 将第p + 1位变成x bit.reset() 全都变成0 bit.reset(p) 将第p + 1位变成0 bit.flip() 全都取反 bit.flip(p) 将第p + 1位取反 bit.to_ulong() 返回它转换为unsigned long的结果，如果超出范围则报错 bit.to_ullong() 返回它转换为unsigned long long的结果，如果超出范围则报错 bit.to_string() 返回它转换为string的结果 6.8 离散化vector&lt;int&gt; v; for (int i = 1; i &lt;= n; i ++ ) { read(q[i]); v.pb(q[i]); } sort(all(v)); v.erase(unique(all(v)), v.end()); for (int i = 1; i &lt;= n; i ++ ) { q[i] = lower_bound(all(v), q[i]) - v.begin() + 1; } 6.9 随机数mt19937 sed(time(nullptr)); uniform_int_distribution&lt;int&gt; range(l, r); // l到r内随机数 cout &lt;&lt; range(sed) &lt;&lt; endl;","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"模板","slug":"模板","permalink":"http://2715992064.github.io/tags/%E6%A8%A1%E6%9D%BF/"}],"author":"Cedeat"},{"title":"暑期集训7月4日题解","slug":"2022.7.4","date":"2022-07-03T16:00:00.000Z","updated":"2022-07-04T14:16:33.108Z","comments":true,"path":"2022/07/04/2022.7.4/","link":"","permalink":"http://2715992064.github.io/2022/07/04/2022.7.4/","excerpt":"","text":"CF1661B Getting ZeroProblem - 1661B - Codeforces 考虑到2^15 = 32768，bfs也许最多跑15层，但每一层都会入队许多数，不加剪枝的情况下是2^15次，因为一个数出队都会让两个新数入队。去重剪枝后，实测极端情况下，一个数进行bfs仍需要入队最多1e4次，如此时间复杂度就过高。 考虑我们最终得到的数是2^15，与其先执行操作乘2一步步加到32768，显然先加再乘是更优的 证明：如果一个数可以通过先乘2再加一的方式得到32768，我们可以先设n经过k次乘2操作得到了数x，那么x一定是偶数，因此需要偶数次加一操作最后得到32768。我们可以假设进行了（32768-x）次加一操作，那么在乘2之前，我们只需要进行 (32768 - x) / 2^k次加一操作就能得到相同的结果，这样明显是比先乘再加更优。由于32768 = 2^15, x 也是2^k的倍数，因此(32768 - x) / 2^k一定是整数，为2^(15-k) - n 但15的范围本身并不大，不需要推公式得来，公式只用于证明正确性。我们可以枚举加一操作进行 i ∈ [0, 15]次，然后经过k次乘2操作得到0，最终答案即为min(i + k) #include &lt;bits/stdc++.h&gt; #define int long long #define mp(A, B) make_pair(A, B) #define sz(a) signed(a.size()) #define pb push_back #define all(x) x.begin(), x.end() #define endl '\\n' #define fi first #define se second #define eps 1e-8 #define debug(a) cout &lt;&lt; #a &lt;&lt; \"=\" &lt;&lt; a &lt;&lt; endl; using namespace std; typedef double db; typedef pair&lt;int, int&gt; PII; typedef unsigned long long ULL; const int maxn = 400010; const int inf = 0x3f3f3f3f; const int mod1 = 100000007; const int mod2 = 998244353; const int inv_p_6 = 166374059; const int inv_p_2 = 499122177; int gcd(int a, int b) {return b ? gcd(b, a % b) : a;} int lcm(int a, int b) {return a / gcd(a, b) * b;} //int h[maxn], ne[maxn], e[maxn], w[maxn], idx; int tt; int n, m, k; //int q[maxn]; void solve() { scanf(\"%lld\", &amp;n); int ans = 1e18; for (int i = 0; i &lt;= 15; i ++ ) { int now = n + i, cnt = i; int more = 0; while (more &lt; 15 &amp;&amp; now % 32768 != 0) { now = (now * 2) % 32768; more ++ , cnt ++ ; if (now == 0) break; } ans = min(ans, cnt); } printf(\"%lld \", ans); } signed main() { // cin.tie(nullptr), cout.tie(nullptr); // ios::sync_with_stdio(false); tt = 1; scanf(\"%lld\", &amp;tt); while (tt -- ) solve(); return 0; } CF1644C Increase Subarray SumsProblem - 1644C - Codeforces 数据范围只有5000，n^2枚举长度为len的最大连续子段和，然后对于k∈[0, n]分别枚举len，求出最大值。 注：初始化ans为0，代表一个都不取的情况。 #include &lt;bits/stdc++.h&gt; #define int long long #define mp(A, B) make_pair(A, B) #define sz(a) signed(a.size()) #define pb push_back #define all(x) x.begin(), x.end() #define endl '\\n' #define fi first #define se second #define eps 1e-8 #define debug(a) cout &lt;&lt; #a &lt;&lt; \"=\" &lt;&lt; a &lt;&lt; endl; using namespace std; typedef double db; typedef pair&lt;int, int&gt; PII; typedef unsigned long long ULL; const int maxn = 5010; const int inf = 0x3f3f3f3f; const int mod1 = 100000007; const int mod2 = 998244353; const int inv_p_6 = 166374059; const int inv_p_2 = 499122177; int gcd(int a, int b) {return b ? gcd(b, a % b) : a;} int lcm(int a, int b) {return a / gcd(a, b) * b;} //int h[maxn], ne[maxn], e[maxn], w[maxn], idx; int tt; int n, m, k, x; int q[maxn]; int dp[maxn]; void solve() { scanf(\"%lld%lld\", &amp;n, &amp;x); for (int i = 1; i &lt;= n; i ++ ) { scanf(\"%lld\", &amp;q[i]); q[i] += q[i - 1]; } memset(dp, -inf, sizeof dp); for (int len = 1; len &lt;= n; len ++ ) { for (int l = 1; l + len - 1 &lt;= n; l ++ ) { int r = l + len - 1; dp[len] = max(dp[len], q[r] - q[l - 1]); } } for (int i = 0; i &lt;= n; i ++ ) { int ans = 0; for (int len = 1; len &lt;= n; len ++ ) { if (i &lt; len) ans = max(ans, dp[len] + i * x); else ans = max(ans, dp[len] + len * x); } printf(\"%lld \", ans); } puts(\"\"); } signed main() { // cin.tie(nullptr), cout.tie(nullptr); // ios::sync_with_stdio(false); int tt = 1; scanf(\"%lld\", &amp;tt); while (tt -- ) solve(); return 0; } CF1648B Integral ArrayProblem - 1648B - Codeforces 这题很好，展开说一下： 1.刚开始我一直在想，给出范围c到底有什么用，甚至一度以为这是一个无用信息。既然给出范围c，目的就是为了限制循环，不让我们越界。而如果按照题上的要求，通过除法来考虑该题，c就是用不上的条件，因为除法不可能越除越多。因此我们需要转换一个角度，把除法转化为乘法，这样题目上给的约束c就是一个有利的条件。 2.数组内可能存在许多相等的数，这会带来许多重复计算。 根据题上给的条件，假设 ：$$\\left\\lfloor\\dfrac{x}{y}\\right\\rfloor = r$$由于要化除为乘，我们可以设y，r已知。那么根据下取整的性质，x是有多种情况的，具体范围是 [y * r , y * (r + 1) - 1]，如果x/y=r不存在在数组中，那么对于一个不存在在数组中的r，如果数组中有在y * r的范围内存在的x，即是无解的情况。因此，我们只需要枚举y和r（y在c的限制范围内的倍数 且 不在数组中），判断数组内是否含有 [y * r , y * (r + 1) - 1] 。 注： 1.枚举y时，不能用1 ~ n枚举，因为数组中有许多重复元素，这样就会导致我们重复计算很多次y * c。而如果只枚举1 ~ c，数组中相同的元素只会重复一次，其实相当于起到了去重的效果 2.用前缀和进行O(1)查询。 #include &lt;bits/stdc++.h&gt; //#define int long long #define mp(A, B) make_pair(A, B) #define sz(a) signed(a.size()) #define pb push_back #define all(x) x.begin(), x.end() #define endl '\\n' #define fi first #define se second #define eps 1e-8 #define debug(a) cout &lt;&lt; #a &lt;&lt; \"=\" &lt;&lt; a &lt;&lt; endl; using namespace std; typedef double db; typedef pair&lt;int, int&gt; PII; typedef unsigned long long ULL; const int maxn = 1000010; const int inf = 0x3f3f3f3f; const int mod1 = 100000007; const int mod2 = 998244353; const int inv_p_6 = 166374059; const int inv_p_2 = 499122177; int gcd(int a, int b) {return b ? gcd(b, a % b) : a;} int lcm(int a, int b) {return a / gcd(a, b) * b;} //int h[maxn], ne[maxn], e[maxn], w[maxn], idx; int tt; int n, m, k, c; int q[maxn]; int cnt[maxn], precnt[maxn]; void solve() { scanf(\"%d%d\", &amp;n, &amp;c); for (int i = 0; i &lt;= c; i ++ ) { cnt[i] = precnt[i] = 0; } for (int i = 1;i &lt;= n; i ++ ) { scanf(\"%d\", &amp;q[i]); cnt[q[i]] ++ ; } for (int i = 0; i &lt;= c; i ++ ) precnt[i] = precnt[i - 1] + cnt[i]; for (int i = 2; i &lt;= c; i ++ ) { if (cnt[i]) { for (int j = 1; j * i &lt;= c; j ++ ) { if (!cnt[j]) { int r = min(c, (j + 1) * i - 1); if (precnt[r] - precnt[j * i - 1]) { puts(\"NO\"); return; } } } } } puts(\"YES\"); } signed main() { // cin.tie(nullptr), cout.tie(nullptr); // ios::sync_with_stdio(false); int tt = 1; scanf(\"%lld\", &amp;tt); while (tt -- ) solve(); return 0; } CF1661C Water the TreesProblem - 1661C - Codeforces 官方题解中有很妙的二分思路。 首先证明，对于操作后的结果，所有树的大小等于mx或mx+1，且不可能比mx+1更大。 假设最后树的大小均等于mx+2，那么我们可以删除一些动作，使得高度为mx， 对于mx+1来说，仅有某些情况比mx更优（如样例这种，1加到较大值而2加到较小值，且较小值和较大值只差1，这样不会浪费每一天），所以，我们要计算最终答案为mx和mx+1，从中取较小者。 如何二分？ 二分天数mid，如此有操作一 (mid+1)/2 次，操作二 (mid) / 2次。首先贪心地使用操作二，有二则用二，中间的1用操作1弥补，如果操作二用完，可以用两次操作一替代操作二。 #include &lt;bits/stdc++.h&gt; #define int long long #define mp(A, B) make_pair(A, B) #define sz(a) signed(a.size()) #define pb push_back #define all(x) x.begin(), x.end() #define endl '\\n' #define fi first #define se second #define eps 1e-8 #define debug(a) cout &lt;&lt; #a &lt;&lt; \"=\" &lt;&lt; a &lt;&lt; endl; using namespace std; typedef double db; typedef pair&lt;int, int&gt; PII; typedef unsigned long long ULL; const int maxn = 1000010; const int inf = 0x3f3f3f3f; const int mod1 = 100000007; const int mod2 = 998244353; const int inv_p_6 = 166374059; const int inv_p_2 = 499122177; int gcd(int a, int b) {return b ? gcd(b, a % b) : a;} int lcm(int a, int b) {return a / gcd(a, b) * b;} //int h[maxn], ne[maxn], e[maxn], w[maxn], idx; int tt; int n, m, k, mx; int q[maxn]; bool check (int x) { int op2 = x / 2, op1 = x - op2; for (int i = 1; i &lt;= n; i ++ ) { int res = (mx - q[i]) / 2; if ((mx - q[i]) &amp; 1) op1 -- ; if (op2 &gt;= res) op2 -= res; else { res -= op2; op2 = 0; op1 -= res * 2; } } return op1 &gt;= 0; } void solve() { scanf(\"%lld\", &amp;n); mx = 0; for (int i = 1; i &lt;= n; i ++ ) { scanf(\"%lld\", &amp;q[i]); mx = max(mx, q[i]); } int l = 0, r = 1e18; while (l &lt; r) { int mid = l + r &gt;&gt; 1; if (check(mid)) r = mid; else l = mid + 1; } int ans1 = l; mx ++ ; l = 0, r = 1e18; while (l &lt; r) { int mid = l + r &gt;&gt; 1; if (check(mid)) r = mid; else l = mid + 1; } int ans2 = l; printf(\"%lld\\n\", min(ans1, ans2)); } signed main() { // cin.tie(nullptr), cout.tie(nullptr); // ios::sync_with_stdio(false); int tt = 1; scanf(\"%lld\", &amp;tt); while (tt -- ) solve(); return 0; } CF1667A Make it Increasing还是比较简单的一道题，找到某个分界点为0，让左边的值都小于0，右边的值都大于0。 数据范围很小，O(n^2)暴力枚举所有分界点。 #include &lt;bits/stdc++.h&gt; #define int long long #define mp(A, B) make_pair(A, B) #define sz(a) signed(a.size()) #define pb push_back #define all(x) x.begin(), x.end() #define endl '\\n' #define fi first #define se second #define eps 1e-8 #define debug(a) cout &lt;&lt; #a &lt;&lt; \"=\" &lt;&lt; a &lt;&lt; endl; using namespace std; typedef double db; typedef pair&lt;int, int&gt; PII; typedef unsigned long long ULL; const int maxn = 200010; const int inf = 0x3f3f3f3f; const int mod1 = 100000007; const int mod2 = 998244353; const int inv_p_6 = 166374059; const int inv_p_2 = 499122177; int gcd(int a, int b) {return b ? gcd(b, a % b) : a;} int lcm(int a, int b) {return a / gcd(a, b) * b;} //int h[maxn], ne[maxn], e[maxn], w[maxn], idx; int tt; int n, m, k; int q[maxn]; void solve() { scanf(\"%lld\", &amp;n); for (int i = 1; i &lt;= n; i ++ ) scanf(\"%lld\", &amp;q[i]); int ans = 1e18; for (int mid = 1; mid &lt;= n; mid ++ ) { int now = 0; int ls = 0; for (int i = mid + 1; i &lt;= n; i ++ ) { int res = ls / q[i]; res ++ ; ls = res * q[i]; now += res; } // printf(\"%lld\\n\", ans); ls = 0; for (int i = mid - 1; i &gt;= 1; i -- ) { int res = ls / q[i]; res -- ; ls = res * q[i]; now += abs(res); } // printf(\"%lld\\n\", ans); ans = min(ans, now); } printf(\"%lld\\n\", ans); } signed main() { // cin.tie(nullptr), cout.tie(nullptr); // ios::sync_with_stdio(false); int tt = 1; // scanf(\"%lld\", &amp;tt); while (tt -- ) solve(); return 0; } CF1660F Promising StringProblem - 1660F1 - Codeforces Problem - 1660F2 - Codeforces 先说ezver，数据范围5000所以可以n^2，因此可以找出所有lr。 判断能否使用操作的方法：根据抽屉原理，如果’-‘的个数大于’+’个数2个以上，那么一定会有两个’-‘并排。假设当前’+’和’-‘的个数是a和b，如果执行一次操作，b的个数减少2，a的个数增加2，即ab差值减3，而要ab相等，即差值为0，所以枚举前缀和，如果差值%3为0，即为合法答案。 #include &lt;bits/stdc++.h&gt; #define int long long #define mp(A, B) make_pair(A, B) #define sz(a) signed(a.size()) #define pb push_back #define all(x) x.begin(), x.end() #define endl '\\n' #define fi first #define se second #define eps 1e-8 #define debug(a) cout &lt;&lt; #a &lt;&lt; \"=\" &lt;&lt; a &lt;&lt; endl; using namespace std; typedef double db; typedef pair&lt;int, int&gt; PII; typedef unsigned long long ULL; const int maxn = 200010; const int inf = 0x3f3f3f3f; const int mod1 = 100000007; const int mod2 = 998244353; const int inv_p_6 = 166374059; const int inv_p_2 = 499122177; int gcd(int a, int b) {return b ? gcd(b, a % b) : a;} int lcm(int a, int b) {return a / gcd(a, b) * b;} //int h[maxn], ne[maxn], e[maxn], w[maxn], idx; int tt; int n, m, k; int q[maxn]; void solve() { scanf(\"%lld\", &amp;n); string a; a.resize(n); scanf(\"%s\", a.c_str()); vector&lt;int&gt; plus(n + 1), minus(n + 1); for (int i = 0; i &lt; a.size(); i ++ ) { plus[i] = plus[i - 1], minus[i] = minus[i - 1]; if (a[i] == '+') plus[i] ++ ; else minus[i] ++ ; } int ans = 0; for (int i = 0; i &lt; n; i ++ ) { for (int j = i + 1; j &lt; n; j ++ ) { int pls = plus[j] - plus[i - 1], mns = minus[j] - minus[i - 1]; if (pls == mns) ans ++ ; else if (mns - pls &gt;= 2) { while (mns &gt; pls) { mns -= 3; if (mns == pls) { ans ++ ; break; } } } } } printf(\"%lld\\n\", ans); } signed main() { // cin.tie(nullptr), cout.tie(nullptr); // ios::sync_with_stdio(false); int tt = 1; scanf(\"%lld\", &amp;tt); while (tt -- ) solve(); return 0; } hardver: 数据范围大后不能再枚举所有lr了，但是可以只枚举右边界r，来判断合法的左边界。 如何判断？ 设’+’个数为a，’-‘个数为b 首先考虑合法的条件，根据ezver的推论可知，需要ab的差值%3为0，且b&gt;=a，（这是因为C语言中的取余无法判断正负。 约束一：对于某个q[i]的贡献，我们只看之前和q[i]%3相等的那些数，与其他的数无关，所以我们可以单独把%3相等的放在同一组中判断。 约束二：如果要查询之前出现的所有b&gt;=a的情况。首先考虑使用前缀和数组q，将+和-的权值变为-1和+1，那么如果b&gt;=a，就是q[r] &gt;= q[l]，我们可以边遍历边计算，对于当前遍历到的r，在它的同余组中，只有小于它的q[l]才会被计算贡献，因此维护三个树状数组（三个约数，进行查逆序对的操作。 #include &lt;bits/stdc++.h&gt; #define int long long #define mp(A, B) make_pair(A, B) #define sz(a) signed(a.size()) #define pb push_back #define all(x) x.begin(), x.end() #define endl '\\n' #define fi first #define se second #define eps 1e-8 #define debug(a) cout &lt;&lt; #a &lt;&lt; \"=\" &lt;&lt; a &lt;&lt; endl; using namespace std; typedef double db; typedef pair&lt;int, int&gt; PII; typedef unsigned long long ULL; const int maxn = 200010; const int inf = 0x3f3f3f3f; const int mod1 = 100000007; const int mod2 = 998244353; const int inv_p_6 = 166374059; const int inv_p_2 = 499122177; int gcd(int a, int b) {return b ? gcd(b, a % b) : a;} int lcm(int a, int b) {return a / gcd(a, b) * b;} //int h[maxn], ne[maxn], e[maxn], w[maxn], idx; int tt; int n, m, k; int q[maxn]; int tr[4][maxn &lt;&lt; 1 | 1]; int lowbit (int x) { return x &amp; -x; } void add (int c, int x, int k) { for (; x &lt;= (n &lt;&lt; 1 | 1); x += lowbit(x)) tr[c][x] += k; } int query (int c, int x) { int ans = 0; for (; x; x -= lowbit(x)) ans += tr[c][x]; return ans; } void solve() { scanf(\"%lld\", &amp;n); string a; a.resize(n); scanf(\"%s\", a.c_str()); for (int i = 0; i &lt; 3; i ++ ) { for (int j = 0; j &lt;= (n &lt;&lt; 1 | 1); j ++ ) tr[i][j] = 0; } int now = n + 1; for (int i = 1; i &lt;= n; i ++ ) { q[i] = q[i - 1]; if (a[i - 1] == '-') q[i] ++ ; else q[i] -- ; } puts(\"\"); int ans = 0; for (int i = 0; i &lt;= n; i ++ ) { ans += query((q[i] % 3 + 3) % 3, q[i] + now); add((q[i] % 3 + 3) % 3, q[i] + now, 1); } printf(\"%lld\\n\", ans); } signed main() { // cin.tie(nullptr), cout.tie(nullptr); // ios::sync_with_stdio(false); int tt = 1; scanf(\"%lld\", &amp;tt); while (tt -- ) solve(); return 0; } 第一天集训结束，congratulations!","categories":[],"tags":[{"name":"题解","slug":"题解","permalink":"http://2715992064.github.io/tags/%E9%A2%98%E8%A7%A3/"},{"name":"暑假集训","slug":"暑假集训","permalink":"http://2715992064.github.io/tags/%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD/"}],"author":"Cedeat"},{"title":"KMP字符串匹配","slug":"KMP字符串匹配","date":"2022-05-11T16:00:00.000Z","updated":"2022-05-13T05:57:54.500Z","comments":true,"path":"2022/05/12/kmp-zi-fu-chuan-pi-pei/","link":"","permalink":"http://2715992064.github.io/2022/05/12/kmp-zi-fu-chuan-pi-pei/","excerpt":"","text":"KMP字符串匹配","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"字符串","slug":"字符串","permalink":"http://2715992064.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}],"author":"Cedeat"},{"title":"线段树","slug":"线段树","date":"2022-05-02T16:00:00.000Z","updated":"2022-05-07T14:41:09.436Z","comments":true,"path":"2022/05/03/xian-duan-shu/","link":"","permalink":"http://2715992064.github.io/2022/05/03/xian-duan-shu/","excerpt":"","text":"线段树总结线段树的五大操作 ： build（建树），modify（修改），query（查询），pushup（自底向上维护父子节点关系，类似于更新），pushdown（维护lazytag），方便日后查询。 pushup一般不会太过复杂，主要维护父子节点的关系，根据题意维护即可。 void pushup(int u) { tr[u].sum = tr[u &lt;&lt; 1].sum + tr[u &lt;&lt; 1 | 1].sum; } // 父节点的区间和等于左右儿子的区间和。 void pushup(int u) { tr[u].v = max(tr[u &lt;&lt; 1].v, tr[u &lt;&lt; 1 | 1].v); } // 父节点的最大值等于左右儿子的最大值。 pushdownpushdown操作主要是用于维护lazytag，表示下传lazytag。 主要分为三步 1.判断是否含有lazytag 2.令左右节点的值按照lazytag进行修改，并下传lazytag至左右节点 3.将当前节点的lazytag置空 注意： 1.我们此处lazytag的含义是 当前节点含有lazytag，并且区间已经修改过，因此在下传时要先更新区间值。 2.lazytag的核心是延迟修改，所以只在modify和query操作完全包含区间时才不会下传，当不完全包含区间时，表示我们必须要向下寻找剩余的区间，那么再向下的区间就不得不修改，因此要先进行pushdown void pushdown(int u) // 例为维护区间加的lazytag { auto &amp;r = tr[u], &amp;left = tr[u &lt;&lt; 1], &amp;right = tr[u &lt;&lt; 1 | 1]; if (r.add){ left.add += r.add, left.sum += (left.r - left.l + 1) * r.add; right.add += r.add, right.sum += (right.r - right.l + 1) * r.add; r.add = 0; } } buildvoid build (int u, int l, int r) { if (l == r) tr[u] = {l, r, q[r]}; else { tr[u] = {l, r, q[r], 0}; // 该节点的左端点，右端点，以及维护的值和lazytag（可以不为1） int mid = l + r &gt;&gt; 1; build(u &lt;&lt; 1, l, mid); // 向左下递归建树 build(u &lt;&lt; 1 | 1, mid + 1, r); // 向右下递归建树 pushup(u); // 最后自底向上更新节点所维护的值 } } modify单点修改 void modify(int u, int x, int v) // x为待修改的数的下标，v为修改后的值 { if (tr[u].l == x &amp;&amp; tr[u].r == x) tr[u].v = v; // 修改 else{ // 未达到就继续递归 int mid = tr[u].l + tr[u].r &gt;&gt; 1; if (x &lt;= mid) modify(u &lt;&lt; 1, x, v); else modify(u &lt;&lt; 1 | 1, x, v); pushup(u); // 修改后自底向上更新一下。 } } 区间修改 含lazytag操作的区间修改，我们需要首先判断： 1.如果当前节点的区间被完全包含在所找的区间内，那么不再继续向下寻找，更新当前节点的值，打上lazytag，到此为止。 2.如果不完全包含，那么先下传标记（如果有标记），再左右递归，直到完全包含（只有一个也算）。最后再向上更新。 void modify(int u, int l, int r, int d) { if (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) { tr[u].sum += (tr[u].r - tr[u].l + 1) * d; tr[u].add += d; } else { pushdown(u); int mid = tr[u].l + tr[u].r &gt;&gt; 1; if (l &lt;= mid) modify(u &lt;&lt; 1, l, r, d); if (r &gt; mid) modify(u &lt;&lt; 1 | 1, l, r, d); pushup(u); } } queryquery操作就相对直白，分为以下几步 1.如果当前节点被完全包含查询区间时，那么直接返回节点值 2.否则就先下传lazytag，再递归左右儿子分别求和，要注意lr和tr[u].l, tr[u].r的区别。 int query(int u, int l, int r) { if (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) return tr[u].sum; pushdown(u); int mid = tr[u].l + tr[u].r &gt;&gt; 1; int sum = 0; if (l &lt;= mid) sum += query(u &lt;&lt; 1, l, r); if (r &gt; mid) sum += query(u &lt;&lt; 1 | 1, l, r); return sum; }","categories":[{"name":"算法进阶","slug":"算法进阶","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"数据结构","slug":"数据结构","permalink":"http://2715992064.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"author":"Cedeat"},{"title":"BFS优化","slug":"BFS优化","date":"2022-04-29T16:00:00.000Z","updated":"2022-05-02T10:55:28.084Z","comments":true,"path":"2022/04/30/bfs-you-hua/","link":"","permalink":"http://2715992064.github.io/2022/04/30/bfs-you-hua/","excerpt":"","text":"BFS优化双端队列广搜在普通BFS中，我们默认边权为1，仅当在这个情况下，我们才能够找到最短路，而当边权不为1时，我们就要考虑最短路算法。双端队列广搜就是利用BFS的两端性，来对边权分别为1或0的点进行BFS，使其仍找到最短路。 BFS具有两端性，即在我们进行BFS的过程中，我们的队列只存在两个值，一个是当前走到的距离d，另一个是通过当前距离，然后push到队列里的新的距离d+1，针对这个特点，我们可以用双端队列进行BFS，从而在队尾push d+1的值，在队头push d的值，这样就不影响BFS的顺序了。 175. 电路维修 - AcWing题库 #include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;cstdio&gt; #include &lt;cstring&gt; #include &lt;deque&gt; using namespace std; #define x first #define y second typedef pair&lt;int, int&gt; PII; const int maxn = 510; int n, m; char g[maxn][maxn]; int dist[maxn][maxn]; bool st[maxn][maxn]; int bfs() { memset(dist, 0x3f, sizeof dist); memset(st, 0, sizeof st); dist[0][0] = 0; deque&lt;PII&gt; q; q.push_back({0, 0}); char cs[] = \"\\\\/\\\\/\"; int dx[4] = {-1, -1, 1, 1}, dy[4] = {-1, 1, 1, -1}; int ix[4] = {-1, -1, 0, 0}, iy[4] = {-1, 0, 0, -1}; while (q.size()) { auto t = q.front(); q.pop_front(); if (st[t.x][t.y]) continue; st[t.x][t.y] = 1; for (int i = 0; i &lt; 4; i ++ ) { int a = t.x + dx[i], b = t.y + dy[i]; if (a &gt;= 0 &amp;&amp; a &lt;= n &amp;&amp; b &gt;= 0 &amp; b &lt;= m) { int ca = t.x + ix[i], cb = t.y + iy[i]; int d = dist[t.x][t.y] + (g[ca][cb] != cs[i]); if (d &lt; dist[a][b]) { dist[a][b] = d; if (g[ca][cb] != cs[i]) q.push_back({a, b}); // 双端队列的特性，对距离为d+1的入队尾，对距离为d的入队头。 else q.push_front({a, b}); } } } } return dist[n][m]; } int main () { int tt; cin &gt;&gt; tt; while (tt -- ) { cin &gt;&gt; n &gt;&gt; m; for (int i = 0; i &lt; n; i ++ ) scanf(\"%s\", g[i]); int t = bfs(); if (t == 0x3f3f3f3f) cout &lt;&lt; \"NO SOLUTION\" &lt;&lt; endl; else cout &lt;&lt; t &lt;&lt; endl; } } 双向广搜双向广搜一般用于最小步数模型中，因为最短路模型中一般搜到的点都不多。而在最小步数模型中，有可能发生TLE或MLE。 双向广搜指的是同时从起点和终点进行BFS，直到他们的状态相等为止，可以理解为首尾双向奔赴。在双向广搜中有一个常用的优化，即每次优先搜索队列状态较小的部分，比如首.size &lt; 尾.size，我们要对首队列进行搜索。 190. 字串变换 - AcWing题库 #include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;cstdio&gt; #include &lt;cstring&gt; #include &lt;queue&gt; using namespace std; const int maxn = 6; int n; string A, B; string a[maxn], b[maxn]; int extend(queue&lt;string&gt; &amp;q, unordered_map&lt;string, int&gt; &amp;da, unordered_map&lt;string, int&gt; &amp;db, string a[maxn], string b[maxn]) { int d = da[q.front()]; while (q.size() &amp;&amp; da[q.front()] == d) { auto t = q.front(); q.pop(); for (int i = 0; i &lt; n; i ++ ) { for (int j = 0; j &lt; t.size(); j ++ ) { if (t.substr(j, a[i].size()) == a[i]) { string r = t.substr(0, j) + b[i] + t.substr(j + a[i].size()); if (db.count(r)) return da[t] + db[r] + 1; if (da.count(r)) continue; da[r] = da[t] + 1; q.push(r); } } } } return 11; } int bfs() { if (A == B) return 0; queue&lt;string&gt; qa, qb; unordered_map&lt;string, int&gt; da, db; qa.push(A), qb.push(B); da[A] = db[B] = 0; int step = 0; while (qa.size() &amp;&amp; qb.size()) { int t; if (qa.size() &lt; qb.size()) t = extend(qa, da, db, a, b); else t = extend(qb, db, da, b, a); if (t &lt;= 10) return t; if (++ step == 10) return -1; } return -1; } int main () { cin &gt;&gt; A &gt;&gt; B; while (cin &gt;&gt; a[n] &gt;&gt; b[n]) n ++ ; int t = bfs(); if (t == -1) cout &lt;&lt; \"NO ANSWER!\" &lt;&lt; endl; else cout &lt;&lt; t &lt;&lt; endl; return 0; }","categories":[{"name":"算法进阶","slug":"算法进阶","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"搜索","slug":"搜索","permalink":"http://2715992064.github.io/tags/%E6%90%9C%E7%B4%A2/"}],"author":"Cedeat"},{"title":"斜率优化DP","slug":"斜率优化DP","date":"2022-04-26T07:49:00.000Z","updated":"2022-04-30T04:26:43.227Z","comments":true,"path":"2022/04/26/xie-lu-you-hua-dp/","link":"","permalink":"http://2715992064.github.io/2022/04/26/xie-lu-you-hua-dp/","excerpt":"","text":"斜率优化DP引入 一个线性DP题300. 任务安排1 - AcWing题库 这题n只有5000的数据，n^2可做。 f[i]表示取前i个任务，且第j个任务的最后一个正好是i。 公式：$$ \\begin{align}f_i &amp;= \\min\\bigg({ f_j + S \\times \\sum_{k=j+1}^n c_k + \\sum_{k=1}^i t_k \\times \\sum_{k=j+1}^i c_k}\\bigg) \\前缀和优化：f_i &amp;= \\min\\bigg(f_j + S \\times (sc_n - sc_j) + st_i \\times (sc_i - sc_j)\\bigg)\\end{align}$$状态转移方程 f[i] = min(f[i], f[j] + sumt[i] * (sumc[i] - sumc[j]) + s * (sumc[n] - sumc[j])); 本题仅作为题意的说明及公式的推引。 #include &lt;iostream&gt; #include &lt;cstdio&gt; #include &lt;cstring&gt; #include &lt;algorithm&gt; using namespace std; #define int long long const int maxn = 5010; int f[maxn], q[maxn], sumt[maxn], sumc[maxn]; int n, s; signed main () { cin &gt;&gt; n &gt;&gt; s; for (int i = 1; i &lt;= n; i ++ ) { int t, c; cin &gt;&gt; t &gt;&gt; c; sumt[i] = sumt[i - 1] + t; sumc[i] = sumc[i - 1] + c; } memset(f, 0x3f, sizeof f); f[0] = 0; for (int i = 1; i &lt;= n; i ++ ) { for (int j = 0; j &lt; i; j ++ ) { f[i] = min(f[i], f[j] + sumt[i] * (sumc[i] - sumc[j]) + s * (sumc[n] - sumc[j])); } } cout &lt;&lt; f[n] &lt;&lt; endl; }","categories":[{"name":"算法进阶","slug":"算法进阶","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"http://2715992064.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"单调队列优化DP","slug":"单调队列优化DP","date":"2022-04-25T06:49:00.000Z","updated":"2022-05-04T07:43:24.134Z","comments":true,"path":"2022/04/25/dan-diao-dui-lie-you-hua-dp/","link":"","permalink":"http://2715992064.github.io/2022/04/25/dan-diao-dui-lie-you-hua-dp/","excerpt":"","text":"单调队列优化DP单调队列优化的经典问题是滑动窗口，而滑动窗口本质上解决的问题都是移动区间内的最值问题，所以碰到此类问题我们都可以用单调队列进行优化。 纯滑动窗口问题题目链接：154. 滑动窗口 - AcWing题库 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 1000010; int a[N], q[N]; // q为单调队列，需要注意，队列中存放的是数组下标。 int main() { int n, k; cin &gt;&gt; n &gt;&gt; k; for (int i = 0; i &lt; n; i ++ ) cin &gt;&gt; a[i]; int hh = 0, tt = -1; // hh为队列头，tt为队列尾。tt &lt; hh的原因是防止在刚进入循环时判断出错，所以要将tt小于hh，从而达到先入一个数的情况。 for (int i = 0; i &lt; n; i ++ ){ // 模拟队尾碰到新数a[i]的过程 if (hh &lt;= tt &amp;&amp; i - k + 1 &gt; q[hh]) hh ++ ; // 单调队列长度大于k，队头出队，加上hh &lt;= tt的原因主要是防止初始状态时tt &lt; hh。 while (hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt --; // 碰到新数a[i]后，若当前队尾大于a[i]，则放入后不满足单调递减 q[ ++ tt] = i; // 新元素入队 if (i &gt;= k - 1) printf(\"%d \", a[q[hh]]); // 用单调队列维护一个单调递减的区间，故每次窗口内最大值一定是队头 } printf(\"\\n\"); // 以下同上，改为维护单调递增即可。 hh = 0, tt = -1; for (int i = 0; i &lt; n; i ++ ){ if (hh &lt;= tt &amp;&amp; i - k + 1 &gt; q[hh]) hh ++ ; while (hh &lt;= tt &amp;&amp; a[q[tt]] &lt;= a[i]) tt --; q[ ++ tt] = i; if (i &gt;= k - 1) printf(\"%d \", a[q[hh]]); } printf(\"\\n\"); return 0; } 135. 最大子序和 - AcWing题库 考虑维护一个单调递增的前缀和的滑动窗口。 #include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 300010; int n, m; int s[maxn], q[maxn]; int main () { ios::sync_with_stdio(false); cin.tie(nullptr); cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i ++ ) { cin &gt;&gt; s[i]; s[i] += s[i - 1]; // 前缀和 } int res = -0x3f3f3f3f; // 长度至少为1 int hh = 0, tt = 0; for (int i = 1; i &lt;= n; i ++ ) { // 枚举右端点 if (q[hh] &lt; i - m) hh ++ ; // 区间长度如果大于m，就不可以 res = max (res, s[i] - s[q[hh]]); // 更新最值 while (hh &lt;= tt &amp;&amp; s[i] &lt;= s[q[tt]]) tt -- ; // 滑动窗口开滑 q[ ++ tt ] = i; // 入队 } cout &lt;&lt; res &lt;&lt; endl; } 1088. 旅行问题 - AcWing题库 首先我们要考虑将环形问题化为一条区间。 用p[i] 表示 如图，对于顺时针遍历，如果我们可以满足条件，从3走到3，那么对于所有的k，都存在s[k] - s[i] &gt;= 0，即对图中情况，都满足s[k] - s[2] &gt;= 0，即s[k] &gt;= s[2]。所以我们只需要找到一个长度为n的滑动窗口，满足窗口内的最小值满足s[min] &gt;= s[2]，所以该题就转化为了一个区间最值问题。 同理逆时针 #include &lt;bits/stdc++.h&gt; using namespace std; #define int long long const int maxn = 2e6 + 10; int n; int p[maxn], d[maxn]; int s[maxn]; int q[maxn]; bool st[maxn]; signed main () { cin &gt;&gt; n; for (int i = 1; i &lt;= n; i ++ ) { cin &gt;&gt; p[i] &gt;&gt; d[i]; } for (int i = 1; i &lt;= n; i ++ ) s[i] = s[i + n] = p[i] - d[i]; for (int i = 1; i &lt;= 2 * n; i ++ ) s[i] += s[i - 1]; int hh = 0, tt = -1; for (int i = 2 * n; i &gt;= 1; i -- ) { if (hh &lt;= tt &amp;&amp; q[hh] &gt; i + n - 1) hh ++ ; while (hh &lt;= tt &amp;&amp; s[q[tt]] &gt;= s[i]) tt -- ; q[ ++ tt] = i; if (i &lt;= n &amp;&amp; s[q[hh]] &gt;= s[i - 1]) st[i] = 1; } // 逆时针 hh = 0, tt = -1; d[0] = d[n]; for (int i = 1; i &lt;= n; i ++ ) s[i] = s[i + n] = p[i] - d[i - 1]; for (int i = 2 * n; i &gt;= 0; i -- ) s[i] += s[i + 1]; for (int i = 1; i &lt;= 2 * n; i ++ ) { if (hh &lt;= tt &amp;&amp; q[hh] &lt; i - n + 1) hh ++ ; while (hh &lt;= tt &amp;&amp; s[q[tt]] &gt;= s[i]) tt -- ; q[ ++ tt] = i; if (i &gt; n &amp;&amp; s[q[hh]] &gt;= s[i + 1]) st[i - n] = 1; } for (int i = 1; i &lt;= n; i ++ ) { if (st[i]) cout &lt;&lt; \"TAK\" &lt;&lt; endl; else cout &lt;&lt; \"NIE\" &lt;&lt; endl; } } 滑动窗口+DP1089. 烽火传递 - AcWing题库 #include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 1e6 + 10, inf = -0x3f3f3f3f; int n, m, l, r; int a[maxn], f[maxn], q[maxn &lt;&lt; 1]; int main () { cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; a[i]; int hh = 0, tt = 0; for (int i = 1; i &lt;= n; i ++ ) { if (q[hh] &lt; i - m) hh ++ ; f[i] = f[q[hh]] + a[i]; while (hh &lt;= tt &amp;&amp; f[q[tt]] &gt;= f[i]) tt -- ; q[ ++ tt] = i; } int res = 1e9; for (int i = n - m + 1; i &lt;= n; i ++ ) { // 答案一定在最后一段区间内选出 res = min(res, f[i]); } cout &lt;&lt; res &lt;&lt; endl; } 1090. 绿色通道 - AcWing题库 加入二分的做法。 #include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 500100; int n, m; int w[maxn]; int q[maxn], f[maxn]; bool check (int x) { int hh = 0, tt = 0; for (int i = 1; i &lt;= n; i ++ ) { if (q[hh] &lt; i - x - 1) hh ++ ; f[i] = f[q[hh]] + w[i]; while (hh &lt;= tt &amp;&amp; f[q[tt]] &gt;= f[i]) tt -- ; q[ ++ tt ] = i; } for (int i = n - x; i &lt;= n; i ++ ) { if (f[i] &lt;= m) return true; } return false; } int main () { cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; w[i]; int l = 0, r = n; while (l &lt; r) { int mid = l + r &gt;&gt; 1; if (check(mid)) r = mid; else l = mid + 1; } cout &lt;&lt; l &lt;&lt; endl; } 1087. 修剪草坪 - AcWing题库 经典问题修剪草坪，我们可以把问题转化为每k+1头牛里至少选择一头，每次选择k+1内的最小值，这样就转化成了滑动窗口的裸题。 #include &lt;bits/stdc++.h&gt; using namespace std; #define int long long const int maxn = 1000010; int q[maxn], n, m; int ans, f[maxn]; signed main () { cin &gt;&gt; n &gt;&gt; m; int alls = 0; for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; f[i], alls += f[i]; int hh = 0, tt = 0; for (int i = 1; i &lt;= n; i ++ ) { if (hh &lt;= tt &amp;&amp; i - q[hh] &gt; m + 1) hh ++ ; f[i] += f[q[hh]]; while (hh &lt;= tt &amp;&amp; f[q[tt]] &gt;= f[i]) tt -- ; q[ ++ tt] = i; } for (int i = n - m; i &lt;= n; i ++ ) ans = max(ans, alls - f[i]); cout &lt;&lt; ans &lt;&lt; endl; } 二维滑动窗口1091. 理想的正方形 - AcWing题库 #include &lt;iostream&gt; #include &lt;cstring&gt; #include &lt;cstdio&gt; #include &lt;algorithm&gt; using namespace std; //#define int long long const int maxn = 1010, inf = 1e9; int n, m, k; int w[maxn][maxn]; int row_min[maxn][maxn], row_max[maxn][maxn]; int q[maxn]; void get_min(int a[], int b[], int tot) { int hh = 0, tt = -1; for (int i = 1; i &lt;= tot; i ++ ) { if (hh &lt;= tt &amp;&amp; q[hh] &lt;= i - k) hh ++ ; while (hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt -- ; q[ ++ tt] = i; b[i] = a[q[hh]]; } } void get_max(int a[], int b[], int tot) { int hh = 0, tt = -1; for (int i = 1; i &lt;= tot; i ++ ) { if (hh &lt;= tt &amp;&amp; q[hh] &lt;= i - k) hh ++ ; while (hh &lt;= tt &amp;&amp; a[q[tt]] &lt;= a[i]) tt -- ; q[ ++ tt] = i; b[i] = a[q[hh]]; } } signed main () { ios::sync_with_stdio(false); cin.tie(0); cin &gt;&gt; n &gt;&gt; m &gt;&gt; k; for (int i = 1; i &lt;= n; i ++ ) { for (int j = 1; j &lt;= m; j ++ ) { cin &gt;&gt; w[i][j]; } } for (int i = 1; i &lt;= n; i ++ ) { get_min(w[i], row_min[i], m); get_max(w[i], row_max[i], m); } int res = inf; int a[maxn], b[maxn], c[maxn]; for (int i = k; i &lt;= m; i ++ ) { for (int j = 1; j &lt;= n; j ++ ) a[j] = row_min[j][i]; get_min(a, b, n); for (int j = 1; j &lt;= n; j ++ ) a[j] = row_max[j][i]; get_max(a, c, n); for (int j = k; j &lt;= n; j ++ ) res = min(res, c[j] - b[j]); } cout &lt;&lt; res &lt;&lt; endl; }","categories":[{"name":"算法进阶","slug":"算法进阶","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"http://2715992064.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"杂项","slug":"杂","date":"2022-04-10T16:00:00.000Z","updated":"2022-05-07T06:41:50.694Z","comments":true,"path":"2022/04/11/za/","link":"","permalink":"http://2715992064.github.io/2022/04/11/za/","excerpt":"","text":"汉诺塔问题#include &lt;bits/stdc++.h&gt; using namespace std; void move(int n, char a, char b) { cout &lt;&lt; \"No.\" &lt;&lt; n &lt;&lt; ' ' &lt;&lt; \"disk: \" &lt;&lt; a &lt;&lt; \"-&gt;\" &lt;&lt; b &lt;&lt; endl; } void hanoi (int n, char a, char b, char c) { if (n == 1){ move(n, a, c); } else{ hanoi(n - 1, a, c, b); // 将a上面n - 1个盘子借助c移到b move(n, a, c);// 将最后一个n号盘子从a移动到c hanoi(n - 1, b, a, c); // 将b上的n - 1个盘子借助a移到c上 } } int main() { int n; cin &gt;&gt; n; hanoi(n, 'a', 'b', 'c'); } 约瑟夫环#include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 1001000; int tt; int n, k; int q[maxn]; void solve() { cin &gt;&gt; n &gt;&gt; k; q[1] = 0; for (int i = 2; i &lt;= n; i++) { q[i] = (q[i - 1] + k) % i; } cout &lt;&lt; q[n] + 1 &lt;&lt; endl; } signed main() { solve(); return 0; } 对顶堆动态维护中位数将前半部分元素push进大根堆，后半部分元素push进小根堆，再每次维护两堆的大小，需保证两堆中的元素差不大于一，每次查询中位数时 1.如果元素总数为偶数，中位数即为两堆顶的平均数。 2.否则，中位数即为两堆中元素较多的堆顶。 #include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;cstdio&gt; #include &lt;cstdio&gt; #include &lt;cstring&gt; #include &lt;vector&gt; #include &lt;cstdio&gt; #include &lt;string&gt; #include &lt;map&gt; #include &lt;queue&gt; #include &lt;cmath&gt; using namespace std; #define pb push_back #define all(x) x.begin(), x.end() #define int long long #define endl '\\n' #define x first #define y second typedef double db; typedef pair&lt;int, int&gt; PII; const int maxn = 200010; const int inf = 0x3f3f3f3f; const int mod = 100000007; int gcd(int a, int b) {return b ? gcd(b, a % b) : a;} int lcm(int a, int b) {return a / gcd(a, b) * b;} //int h[maxn], ne[maxn], e[maxn], w[maxn], idx; int tt; int n, m, k; int q[maxn]; void solve() { cin &gt;&gt; n; for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; q[i]; priority_queue&lt;int&gt; bg; priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; ss; //bg.push(q[1]); int mid = q[1]; cout &lt;&lt; mid &lt;&lt; endl; for (int i = 2; i &lt;= n; i ++ ) { if (q[i] &gt; mid) ss.push(q[i]); else bg.push(q[i]); if (i &amp; 1) { while (bg.size() != ss.size()) { if (bg.size() &gt; ss.size()) { ss.push(mid); mid = bg.top(); bg.pop(); } else { bg.push(mid); mid = ss.top(); ss.pop(); } } cout &lt;&lt; mid &lt;&lt; endl; } } } signed main() { cin.tie(nullptr), cout.tie(nullptr); ios::sync_with_stdio(false); tt = 1; //cin &gt;&gt; tt; while (tt -- ) solve(); return 0; }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"}],"author":"Cedeat"},{"title":"数字三角形模型","slug":"数字三角形","date":"2022-03-15T16:00:00.000Z","updated":"2022-03-17T07:46:13.984Z","comments":true,"path":"2022/03/16/shu-zi-san-jiao-xing/","link":"","permalink":"http://2715992064.github.io/2022/03/16/shu-zi-san-jiao-xing/","excerpt":"","text":"数字三角形模型数字三角形模型DP是线性DP的一类，有非常多的变式，不过本质是从顶部出发，向右或下走，即满足数字三角形的所有条件。 例1 Acwing898.数字三角形 标程： #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 510; int f[N][N]; int n; int main() { cin &gt;&gt; n; for (int i = 1; i &lt;= n; i ++ ){ for (int j = 1; j &lt;= i; j ++ ){ cin &gt;&gt; f[i][j]; } } for (int i = n; i &gt;= 1; i -- ){ for (int j = i; j &gt;= 1; j -- ){ f[i][j] = max(f[i + 1][j], f[i + 1][j + 1]) + f[i][j]; } // 从底向上出发，不考虑边界问题 } cout &lt;&lt; f[1][1] &lt;&lt; endl; return 0; } 例2 Acwing1015.摘花生 经典的数字三角形模型，甚至不需要考虑边界问题。 标程 #include &lt;iostream&gt; #include &lt;algorithm&gt; using namespace std; const int N = 110; int n, m; int w[N][N]; int f[N][N]; //表示走到i，j时的最大数量 int main() { int T; scanf(\"%d\", &amp;T); while (T -- ) { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++ ) for (int j = 1; j &lt;= m; j ++ ) scanf(\"%d\", &amp;w[i][j]); for (int i = 1; i &lt;= n; i ++ ) for (int j = 1; j &lt;= m; j ++ ) f[i][j] = max(f[i - 1][j], f[i][j - 1]) + w[i][j]; // 状态转移方程，表示从左或上走来 printf(\"%d\\n\", f[n][m]); } return 0; } 例3 Acwing1018.最低通行费 和摘花生一题类似 标程： #include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 110; int q[maxn][maxn]; int f[maxn][maxn]; int n; int main() { memset(f, 0x3f, sizeof f); // 初始化为inf，因为我们要取得是min cin &gt;&gt; n; for (int i = 1; i &lt;= n; i ++ ){ for (int j = 1; j &lt;= n; j ++ ) cin &gt;&gt; q[i][j]; } f[1][1] = q[1][1]; for (int i = 1; i &lt;= n; i ++ ){ for (int j = 1; j &lt;= n; j ++ ){ f[i][j] = min({f[i][j], f[i - 1][j] + q[i][j], f[i][j - 1] + q[i][j]}); } } cout &lt;&lt; f[n][n] &lt;&lt; endl; } 例4 Acwing1027.方格取数 相对麻烦的数字三角形模型，因为需要找两条路径。 一种可行的办法是先走一条路，存下走过的路径，清零后再找一次第二条路。 还有一种方法，我们可以同时走两条路，多开几个状态来表示两条路。这样的话，最直观的方法是用四个状态维护i1,i2,j1,j2，进行状态转移。 不过我们可以得到 i1 + j1 = i2 + j2 的方程，即可设i1 + j1 = k，那么用三维即可满足所有的状态。 j1 = k - i1, j2 = k - i2; 标程： #include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 15; int q[maxn][maxn]; int f[maxn * 2][maxn][maxn]; int a, b, c; int n; int main() { cin &gt;&gt; n; while (cin &gt;&gt; a &gt;&gt; b &gt;&gt; c, a || b || c) q[a][b] = c; for (int k = 2; k &lt;= 2 * n; k ++ ){ for (int i1 = 1; i1 &lt;= n; i1 ++ ){ for (int i2 = 1; i2 &lt;= n; i2 ++ ){ int j1 = k - i1, j2 = k - i2; if (j1 &gt;= 1 &amp;&amp; j1 &lt;= n &amp;&amp; j2 &gt;= 1 &amp;&amp; j2 &lt;= n){ int t = q[i1][j1]; if (i1 != i2) t += q[i2][j2]; int &amp;x = f[k][i1][i2]; x = max(x, f[k - 1][i1 - 1][i2 - 1] + t); x = max(x, f[k - 1][i1][i2 - 1] + t); x = max(x, f[k - 1][i1 - 1][i2] + t); x = max(x, f[k - 1][i1][i2] + t);//四种状态转移方程 } } } } cout &lt;&lt; f[2 * n][n][n] &lt;&lt; endl; }","categories":[{"name":"算法进阶","slug":"算法进阶","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"http://2715992064.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}],"author":"Cedeat"},{"title":"树状数组维护区间和/最值","slug":"树状数组","date":"2022-02-17T16:00:00.000Z","updated":"2022-02-18T13:52:42.455Z","comments":true,"path":"2022/02/18/shu-zhuang-shu-zu/","link":"","permalink":"http://2715992064.github.io/2022/02/18/shu-zhuang-shu-zu/","excerpt":"","text":"–2022.2.18更新树状数组维护区间最值 树状数组维护区间和/最值假设给定我们一个数组，让我们进行单点修改和区间查询操作，则需要O（1）和O（n）的时间复杂度，多次修改查询的总复杂度最坏为O（n^2），而用树状数组进行这些操作的时间复杂度仅有O（logn），总最坏时间复杂度为O（nlogn）。 引入-lowbit操作lowbit（x）非负整数x在二进制表示下最低位1及其后面的0构成的数值。 例如 lowbit(44) = lowbit(101100) = (100) = 4; 一个数x(101100)将其取反后(010011)在加一(010100)后，我们可以观察到，在二进制上除最低位1及其后面的0，其余所有位都取反了，此时我们再与原数进行按位与操作，就能得到x的lowbit。 计算机在存储时用的是补码而非反码，因此在编译器中的-x表示的就是x取反后加一，因此： lowbit(X) = x &amp; -x; 树状数组维护区间和 我们在一个数组a上建立以上的树形结构，每个节点t[x]保存以x为根的子树中叶结点值的和。 t[x]节点覆盖的长度即为lowbit(x)。 t[x]节点的父节点为t[x + lowbit(x)]。 单点修改操作 &amp; 建立树状数组 可见，我们修改一个点，也要修改其上的父节点，最坏的时间复杂度为O(logn) void add(int x, int k){ for (; x &lt;= n; x += x &amp; -x) t[x] += k; } 如何建立树状数组？有了单点修改的操作，我们只需要在读入时对每个t[i]进行add操作即可 for (int i = 1; i &lt;= n; i ++ ){ int x; cin &gt;&gt; x; add(i, a); } 区间查询操作 而对于区间查询（以7为例），我们要同时加上t[7], t[6],t[4]（即覆盖了a[1]~a[7]的所有t[x])。 int ask(int x){ int ans = 0; for (; x; x -= x &amp; -x) ans += t[x]; return ans; } //单点修改与区间查询 #include &lt;bits/stdc++.h&gt; using namespace std; #define int long long int n, p; int q[1123456], t[1123456]; inline int lowbit(int x) { return x &amp; -x; } void add(int x, int k) { for (; x &lt;= n; x += lowbit(x)) t[x] += k; } int ask(int x) { int ans = 0; for (; x; x -= lowbit(x)) ans += t[x]; return ans; } signed main() { cin &gt;&gt; n &gt;&gt; p; for (int i = 1; i &lt;= n; i ++ ){ cin &gt;&gt; q[i]; add(i, q[i]); } while (p -- ){ int op, x, y; cin &gt;&gt; op &gt;&gt; x &gt;&gt; y; if (op == 1) add(x, y); if (op == 2) cout &lt;&lt; ask(y) - ask(x - 1) &lt;&lt; endl; } return 0; } 区间修改与单点查询要将一个区间内同时加上一个数k，或查询当前的第i个数，我们需要新的操作。 注意初始化树状数组时b[i] = q[i] - q[i - 1]; //区间修改与单点查询 #include &lt;bits/stdc++.h&gt; using namespace std; #define int long long int n, p; int q[1123456], t[1123456]; inline int lowbit(int x) { return x &amp; -x; } void add(int x, int k) { for (; x &lt;= n; x += lowbit(x)) t[x] += k; } int ask(int x) { int ans = 0; for (; x; x -= lowbit(x)) ans += t[x]; return ans; } signed main() { cin &gt;&gt; n &gt;&gt; p; for (int i = 1; i &lt;= n; i ++ ){ cin &gt;&gt; q[i]; add(i, q[i] - q[i - 1]); } while (p -- ){ int op, l, r, x; cin &gt;&gt; op; if (op == 1){ cin &gt;&gt; l &gt;&gt; r &gt;&gt; x; add(l, x), add(r + 1, -x); } if (op == 2){ cin &gt;&gt; x; cout &lt;&lt; ask(x) &lt;&lt; endl; } } return 0; } 区间修改与区间查询 如图，我们仍用树状数组维护差分数组b的前缀和，区间查询的值即为蓝色部分，我们可以发现蓝色部分不方便计算，因此构建一个大矩形（红色），再减去不计算的部分（黄色），这一部分我们可以维护另外一个i*b[i]的前缀和数组。 //区间修改与区间查询 #include &lt;bits/stdc++.h&gt; using namespace std; #define int long long int n, p; int q[1123456], t[1123456], s[1123456], sum[1123456]; inline int lowbit(int x) { return x &amp; -x; } void add1(int x, int k) { for (int i = x; i &lt;= n; i += lowbit(i)) t[i] += k, s[i] += x * k; } int ask1(int x) { int ans = 0; for (int i = x; i; i -= lowbit(i)) ans += (x + 1) * t[i] - s[i]; return ans; } signed main() { cin &gt;&gt; n &gt;&gt; p; for (int i = 1; i &lt;= n; i ++ ){ cin &gt;&gt; q[i]; sum[i] = q[i] + sum[i - 1]; add1(i, q[i] - q[i - 1]); } while (p -- ){ int op, l, r, x; cin &gt;&gt; op; if (op == 1){ cin &gt;&gt; l &gt;&gt; r &gt;&gt; x; add1(l, x), add1(r + 1, -x); } if (op == 2){ cin &gt;&gt; l &gt;&gt; r; cout &lt;&lt; ask1(r) - ask1(l - 1) &lt;&lt; endl; } } return 0; } 本篇题解图片来自〔manim | 算法 | 数据结构〕 完全理解并深入应用树状数组 | 支持多种动态维护区间操作 个人认为讲的很详细。 树状数组维护最大值用树状数组维护最大值。同样可以让每个节点t[x]保存以x为根的子树中叶结点值的最大值，对于维护的最大值，我们同样可以进行单点修改和区间查询操作。 单点修改由之前维护区间和的单点修改操作，我们很容易想到： void add(int x, int k){ // 将q[x]变为k for (; x &lt;= n; x += lowbit(x)) t[x] = max(t[x], k); } 这段代码是由前面树状数组维护区间和里单点操作修改而成，仅将t[x]+=k 变为 t[x] = max(t[x], k)。 那么这段代码是否可行呢？ 如果我们要将这个数变大，即k &gt;= q[x]，那么这段代码是没有问题的，t[x]每次都会更新，然后往上一步步寻找。但想一下，如果k &lt; q[x]，并且q[x]恰好是t[x]覆盖范围内唯一的最大值，那么我们要将q[x]变小，其范围内最大值，即t[x]也一定会变小，但这个max操作并不会将t[x]变小，因此这样的单点修改是不可行的。 唯一的方法，是连同q[x]和t[x]一起更新，不进行max操作，然后往上找相关的数继续更新。 还是该图，我们想一下，与t[8]直接相关的有几个数？ 很容易观察到： t[8] = max({a[8], t[4], t[6], t[7]}); 我们转化为二进制观察： t[1000] = max({a[1000], t[100], t[110], t[111]}); 这里我们直接给出公式： t[i] = max({q[i], t[i - lowbit(i)/(2^1)], t[i - lowbit[i]/(2^2)]...t[i - 2^0]}); 代码： void update(int x, int k){ // 将q[x]变为k q[x] = k; // 将原数组也改变，可加可不加 for (; x &lt;= n; x += lowbit(x)){ t[x] = k; // 直接更新 for (int i = 1; i &lt; lowbit(x); i &lt;&lt;= 1) t[x] = max(t[x], t[x - i]);//公式 } } 区间查询查询区间[l, r]的最大值，需要用上原数组。 区间查询的过程我们主要用分类讨论解决。 如果 r - lowbit(r) + 1 &gt;= l, ans = max(query(l, r - lowbit(r)), t[r]); 否则 res = max(query(l, r - 1), q[r]); 直接看代码吧，不难理解： int query(int l, int r) { int ans = 0; while (r &gt;= l){ ans = max(q[r], ans), r -- ; for (; r - lowbit(r) &gt;= l; r -= lowbit(r)) ans = max(t[r], ans); } return ans; } 尾部添数树状数组维护最大值支持向区间尾部添加一个值。 void add(int x) { q[ ++ tot] = x; t[tot] = max(q[tot], query(tot + 1 - lowbit(tot), tot - 1)); }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"数据结构","slug":"数据结构","permalink":"http://2715992064.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"author":"Cedeat"},{"title":"C++STL","slug":"STL","date":"2022-02-10T16:00:00.000Z","updated":"2022-02-12T09:21:42.822Z","comments":true,"path":"2022/02/11/stl/","link":"","permalink":"http://2715992064.github.io/2022/02/11/stl/","excerpt":"","text":"常用C++STL向量（vector）容器变长数组，使用倍增的思想。 初始化vector &lt;int&gt; a; // 普通初始化 vector &lt;int&gt; a(10); // 定义长度 vector &lt;int&gt; a(10, 3); // 将长度为10的vector全部初始化为3 vector &lt;int&gt; a[10] // vector数组，表示定义10个vector 函数a.size() || a.length // 返回vector内元素的个数 a.empty() // 返回ture或false，判断是否为空 a.clear() // 清空 a.front() || a.back() // 返回第一个/最后一个数 a.push_back() || a.pop_back() // 队尾插入一个数/队尾删除一个数 a.begin() || a.end() // vector的迭代器 遍历for (int i = 0; i &lt; n; i ++ ) a.push_back(i); // 下标遍历 for (auto i = a.begin(); i != a.end(); i ++ ) cout &lt;&lt; *i &lt;&lt; ' '; // 迭代器遍历 for (auto x : a) cout &lt;&lt; x &lt;&lt; ' '; // 范围遍历 比较运算vector同样可以用来进行比较运算，比较的方式是通过字典序进行比较。 pair二元组pair &lt;type, type&gt; p; pair的取得方式，第一个元素为 p.frist()，第二个为p.second() pair同样也支持比较运算，以frist为第一关键字，second为第二关键字，进行字典序比较。 初始化p = make_pair(10, \"abc\"); p = {20, \"abc\"}; 若要用pair存储两个以上的元素，也可以这样定义 pair&lt;int, pair&lt;int, int&gt;&gt; p; 字符串string初始化string a = \"abc\"; a += \"bcd\"; // string可以在字符串后加上一个字符串或字符。 函数a.size(); // 长度 a.empty(); // 判断空 a.clear(); // 清空 a.substr(x, y); // a的从x起始，长度为y的字串，若其后字串长度不满y，则到末尾为止。 a.substr(x); // 从x起始，末尾中止的字串. printf(\"%s\\n\", a.c_str()); // string首元素的地址。 队列queue，优先队列priority_queuequeue函数push() // 向队尾插入元素 front() || back() // 返回队头/队尾元素 pop() // 弹出队头元素 size() // 长度 empty() // 判断是否为空 q = queue&lt;int&gt;() // 清空queue priority_queue优先队列（堆）push() // 插入元素 top() // 返回堆顶元素 pop() // 弹出堆顶元素 优先队列默认为大根堆，如果我们想定义小根堆，有两种方式 （1）heap.push(-x) 插入-x （2）priority_queue&lt;, vector, greater&gt; heap; 栈stack函数push() // 栈顶插入元素 top() // 返回栈顶元素 pop() // 弹出栈顶元素 size(); empty(); 双端队列deque双端队列可以看作是加强版的vector，可以从队头和队尾进行插入和删除操作。不过因为效率太低，一般不使用。 size() empty() clear() front() / back() push_back() / pop_back() push_front / pop_front() begin()/end() []","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"数据结构","slug":"数据结构","permalink":"http://2715992064.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"author":"Cedeat"},{"title":"二分图（二部图）","slug":"二部图（二分图）","date":"2022-02-10T16:00:00.000Z","updated":"2022-02-12T09:20:55.179Z","comments":true,"path":"2022/02/11/er-bu-tu-er-fen-tu/","link":"","permalink":"http://2715992064.github.io/2022/02/11/er-bu-tu-er-fen-tu/","excerpt":"","text":"二部图（二分图）什么是二分图对于一个无向图G=(V,E)，如果将顶点V分隔为两个互不相交的子集（A,B），且图中的每条边（i，j）所关联的两个顶点分别属于两个不同的顶点集（i in A，j in B），则称图G为一个二分图。 二分图有一个重要的性质，即图中不含奇数环，这是二分图成立的充要条件。 二分图不一定是连通图。 染色法判断二分图判断一个无向图是否是二分图，通常使用染色法。 染色法的实现思路（DFS）：1.用1，2代表两个颜色，0代表未染色，任选一个点染成1或2 2.遍历所有点，每次将未染色的点进行dfs 3.若染色失败即break/return #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 100010, M = 200010; int n, m; int h[N], e[M], ne[M], idx; int color[N]; void add(int a, int b) { e[idx] = b, ne[idx] = h[a], h[a] = idx ++; } bool dfs(int u, int c) { color[u] = c; // 染色 for (int i = h[u]; i != -1; i = ne[i]){ int j = e[i]; if (!color[j]){ if (!dfs(j, 3 - c)) return false; // 如果在dfs递归的过程中出现染色失败，则整个图都不是二分图 } else if (color[j] == c) return false; // 如果一条边的两端点同种颜色，则染色失败 } return true; // 无染色错误则染色成功 } int main() { cin &gt;&gt; n &gt;&gt; m; memset(h, -1, sizeof h); while (m -- ){ int a, b; cin &gt;&gt; a &gt;&gt; b; add(a, b), add(b, a); } bool flag = true; for (int i = 1; i &lt;= n; i ++ ){ // 遍历所有点，因为二分图不一定是连通图 if (!color[i]){ if (!dfs(i, 1)){ flag = false; break; } } } if (flag) printf(\"Yes\\n\"); else printf(\"No\"); return 0; } 我在写时遇到一个问题 if (!color[j]){ if (!dfs(j, 3 - c)) return false; 为何不能改成 if (!color[j]){ dfs(j, 3 - c); 这样改来，我以为在判断该点没有染色的时候，dfs只是为了染色，根本的判断染色失败在下面的一行判断中，所以这样更换没有问题，但实则不然。 这个dfs的作用不只是为了染色，也是利用dfs的返回值，判断在递归过程中是否产生了染色错误。而不加这个判断，只能判断u是否处于奇数环中，而u不一定处于奇数环，所以有可能判断错误。 二分图的最大匹配（匈牙利算法）匹配：在图论中一个匹配是指一个边的集合，其中任意两条边都没有公共顶点。 最大匹配，一个图所有匹配中，所含匹配边数最多的匹配称为最大匹配。 匈牙利算法的过程1.从左集合依次找右集合的点，如果有右集合的点还没有被匹配，就把它们连上一条边。 2.如果左集合中某一点找到的右集合中一点已经匹配过，那么就从该右集合点反找它匹配的左集合点，并找该左集合点有没有别的右集合点可以连，如果有，则连接这个右集合点，原右集合点与新左集合点相连。 虽然二分图是无向图，但匈牙利算法只需要从左边集合找右边集合，因此我们只存一条边也可以。 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 510, M = 100010; int n1, n2, m; int h[N], e[M], ne[M], idx; int match[N]; bool st[N]; void add(int a, int b) { e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ; } bool find(int x) { for (int i = h[x]; i != -1; i = ne[i]){ int j = e[i]; if (!st[j]){ st[j] = true; if (match[j] == 0 || find(match[j])){ match[j] = x; return true; } } } return false; } int main() { scanf(\"%d%d%d\", &amp;n1, &amp;n2, &amp;m); memset(h, -1, sizeof h); while (m -- ){ int a, b; cin &gt;&gt; a &gt;&gt; b; add(a, b); } int res = 0; for (int i = 0; i &lt;= n1; i ++ ){ memset(st, false, sizeof st); if (find(i)) res ++; } cout &lt;&lt; res &lt;&lt; endl; return 0; } 为什么要开st数组？为什么要memset？假设我们找到左1与右1相连，左2也欲与右1相连，于是返回左1再次查找，在查找过程中我们会一直进入find(match[1])的递归过程中。 如果加了st数组呢？在返回左1之前我们就将右1设为true，在返回左1后就不会再判断右1，因为左1已经与右1相连，也即是说，每次返回左边寻找之前都会将这个左点相连的右点设定一次，避免重复查找。而对于不同的左点，每次重新开始找都要初始化一次st数组。","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"图论/搜索","slug":"图论-搜索","permalink":"http://2715992064.github.io/tags/%E5%9B%BE%E8%AE%BA-%E6%90%9C%E7%B4%A2/"}],"author":"Cedeat"},{"title":"堆","slug":"堆","date":"2022-02-10T16:00:00.000Z","updated":"2022-02-12T09:20:04.600Z","comments":true,"path":"2022/02/11/dui/","link":"","permalink":"http://2715992064.github.io/2022/02/11/dui/","excerpt":"","text":"堆堆的结构：一颗完全二叉树（十分平衡，除最后一层（叶结点）以外，其他节点均非空，最后一层从左到右依次排布）。 小根堆也指最小堆。经过排序的完全二叉树，其中每一个非终端节点均小于其左右子节点，其根节点为所有元素的最小值。 大根堆同理。 存储方式用一维数组维护堆状数据结构。 一号点为根节点。下标为x的节点，其左节点下标为2 * x，右节点下标为2 * x + 1。 基本操作1.向下调整（down操作）:若将一个数变大，则须将这个节点下移。以小根堆为例，将一个节点下移，则需要判断它与左右子节点的大小关系，并将它与（自己，左节点，右节点）三个数中的最小值交换。 void down(int u) { int t = u; // 定义t，用来寻找三个数中最小值的下标。 if (u * 2 &lt;= size &amp;&amp; h[u * 2] &lt; h[u]) t = u * 2; // 判断左节点是否存在，且左节点是否更小。 if (u * 2 + 1 &lt;= size &amp;&amp; h[u * 2 + 1] &lt; h[u]) t = u * 2 + 1; // 同上，判断右节点。 if (t != u) // 需要操作 { swap(h[u], h[t]); down (t); // 递归操作，直到u为当前三个数的最小值。 } } 2.向上调整（up操作）：同理，要将一个数变小，则需将这个节点上移，对于小根堆，上移操作仅需跟它的父节点比较即可。 void up(int u) { while (u / 2 &amp;&amp; h[u / 2] &gt; h[u]){ swap(h[u / 2], h[u]); u /= 2; }// 迭代操作，当为头节点或不能再向上时结束。 } 3.插入一个数：将该数插入到整个堆的最后一个位置，然后进行up操作。 heap[++ size] = x; up(size); 4.删除任意一个元素：对于一维数组，删除数组的尾部非常简单，令size–即可，但若要删除中间元素，则需要整体改变下标的位置。 假设我们现在要删除第k个节点，只需将第k个节点变为最后一个节点，然后再删除最后一个节点。最后，对k节点进行down操作或up操作（因为此处第k个节点被赋给了最后一个结点的值），为了不用再进行判断，我们让k节点都进行up和down操作（不用担心会额外进行操作，当满足条件时，up操作和down操作只会执行其一）。 heap[k] = heap[size]; size -- ; down(k); up(k);// 删除头节点，将K改为1即可。 5.求集合中的最小（大）值：对堆来说，最值即为根结点。 heap[1]; //大根堆为最大值，小根堆为最小值。 6.修改任意一个元素：将要修改的元素（k节点）修改后，再进行一次up操作和down操作。 heap[k] = x; down(k); up(k); 7.堆的构建如果我们将n个元素每个都进行一次down操作，则时间复杂度为O（nlogn），也可通过优化，将复杂度改为O(n)。 堆的最后一层至多有n / 2个元素，如果我们要对所有元素进行down操作，则只需要对倒数第二层以上进行down操作，在对倒数第二层进行down操作时，也会保证处理到最后一层的元素，这样，我们就只须处理n / 2个数据，时间复杂度变为O(n)。 for (int i = n / 2; i ; i -- ) down(i); 进阶：堆的映射：当我们把上述所提到的删除和修改第K个节点改为删除和修改第K个插入的数，就会变成更复杂的情况。 在这里我们需要额外开两个数组ph[N]和hp[N]，ph[k]用来存储第k个插入的数在堆中的下标，但仅有此并不够，当我们在进行up或down操作时，堆中的值会改变。 举个例子，当第5个插入的数在堆中的下标为3，其子节点在堆中的下标为6。那么ph[5]即为3，但此时小根堆是不稳定的，如果我们要进行一次down操作，会将heap[3]和heap[6]的值进行交换，此时第5个插入的数，即ph[5]就会改变。一句话来说，单单用ph数组对堆进行映射是单向的关系。 为了解决这种情况，我们另设一个数组hp[N]用来表示，第k个插入的数在堆中的下标在ph数组中的值。也就是说，用此数组将堆中的下标映射与ph数组，从而达到双向的关系。 ph数组与hp数组互为反函数。即ph[j] = k, hp[k] = j; 有这两个工具，我们就可以将down和up操作中的swap函数进行“升级”，即不仅仅改变堆中的两个值，他们所对应的插入关系也应该交换。 void heap_swap(int a, int b) { swap(ph[hp[a]], ph[hp[b]]); swap(hp[a], hp[b]); swap(h[a], h[b]); } 堆排序完整代码#include &lt;bits/stdc++.h&gt; using namespace std; const int N = 100010; int n, m; int h[N], cnt; void down(int u) { int t = u; if (u * 2 &lt;= cnt &amp;&amp; h[u * 2] &lt; h[t]) t = u * 2; if (u * 2 + 1 &lt;= cnt &amp;&amp; h[u * 2 + 1] &lt; h[t]) t = u * 2 + 1; if (u != t){ swap(h[u], h[t]); down(t); } } void up (int u) { while (u / 2 &amp;&amp; h[u / 2] &gt; h[u]){ swap(h[u], h[u / 2]); u &gt;&gt;= 1; } } int main() { scanf(\"%d %d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++ ) scanf(\"%d\", &amp;h[i]); cnt = n; for (int i = n / 2; i ; i --) down(i); while (m -- ){ printf(\"%d \", h[1]); h[1] = h[cnt -- ]; down(1); } return 0; }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"数据结构","slug":"数据结构","permalink":"http://2715992064.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"author":"Cedeat"},{"title":"最小生成树","slug":"最小生成树","date":"2022-02-10T16:00:00.000Z","updated":"2022-02-12T09:21:16.357Z","comments":true,"path":"2022/02/11/zui-xiao-sheng-cheng-shu/","link":"","permalink":"http://2715992064.github.io/2022/02/11/zui-xiao-sheng-cheng-shu/","excerpt":"","text":"最小生成树什么是最小生成树？设定一个n点m条边的无向图G=(V,E)，V表示图中点的集合，E表示图中边的集合，n=|V|，m=|E|。 由V中的n个顶点和E中的n-1条边构成的无向连通子图成为G的一棵生成树，其中边权之和最小的生成树成为最小生成树。 Prim算法与Dijkstra算法相似，prim算法也分为朴素版和堆优化版，而堆优化版一般使用不多。 Prim算法也分为以下几步，只不过这里的dist数组意义不同，dijkstra算法的dist数组的含义是距离起点的距离，而prim算法里的dist数组含义是距离集合的最短距离（即到集合内任何一点的距离最小值）： 1.进行n轮循环，每一轮循环中遍历所有的点，找到一个距离集合最小的点t。对于第一轮循环，因为dist全为INF，所以就是随机找一个点将dist初始化为0。 2.将找到的点t加入到集合当中，并且将生成树的总边权res更新。 3.用该点更新所有的dist。 因为这种方法一定可以遍历到所有的点，当某一个点t的dist为INF且不是第一轮时，代表这个点t与集合是不连通的，即不满足生成树的概念，不是连通的。 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 510, INF = 0x3f3f3f3f; int n, m; int g[N][N]; int dist[N]; bool st[N]; int prim() { memset(dist, 0x3f, sizeof dist); int res = 0; for (int i = 0; i &lt; n; i ++ ){ int t = -1; for (int j = 1; j &lt;= n; j ++ ){ if (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j])) t = j; } if (i &amp;&amp; dist[t] == INF) return INF; if (i) res += dist[t]; st[t] = true; for (int j = 1; j &lt;= n; j ++ ) dist[j] = min(dist[j], g[t][j]); } return res; } int main() { cin &gt;&gt; n &gt;&gt; m; memset(g, 0x3f, sizeof g); while (m -- ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; g[a][b] = g[b][a] = min(g[a][b], c); // 无向图 } int t = prim(); if (t == INF) printf(\"impossible\"); else printf(\"%d\\n\", t); return 0; } Kruskal算法Kruskal算法的思路十分简单，总体概括为以下两步。 1.将所有边按权重从小到大排序。 2.按权重大小枚举每条边ab，如果ab不连通，就将这条边加入到集合中。这部分的操作可以使用并查集来做。 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 100010, M = 200010, INF = 0x3f3f3f3f; int n, m; int p[N]; struct Edge { int a, b, w; }edges[M]; bool cmp(Edge a, Edge b) { return a.w &lt; b.w; } int find (int x) { if (p[x] != x) p[x] = find(p[x]); return p[x]; } int kruskal() { sort(edges, edges + m, cmp); for (int i = 0; i &lt;= n; i ++ ) p[i] = i; // 并查集的初始操作 int res = 0, cnt = 0; // cnt表示连通的边数 for (int i = 0; i &lt; m; i ++ ){ int a = edges[i].a, b = edges[i].b, w = edges[i].w; a = find(a), b = find(b); if (a != b){ p[a] = b; // 将边加入集合 res += w; cnt ++ ; } } if (cnt &lt; n - 1) return INF; return res; } int main() { cin &gt;&gt; n&gt;&gt; m; for (int i = 0; i &lt; m; i ++ ){ int a, b, w; cin &gt;&gt; a &gt;&gt; b &gt;&gt; w; edges[i] = {a, b, w}; } int t = kruskal(); if (t == INF) printf(\"impossible\"); else printf(\"%d\", t); return 0; } 关于Kruskal的拓展Kruskal重构树：在进行Kruskal的过程中，我们找到不在同一集合的两个边，不再合并两个点，而是新建一个节点，将该节点作为中转连接这两个集合，用这两个节点的边权作为该点的点权。 试想，如果我们按降序排序（从大到小）排序所有的边，再建Kruskal重构树，那么我们所建立的将是一个小根堆（因为最大的边总是先入，最后进入的一定是生成树内最小的边）。我们可以应用于从u出发只经过边权不超过x的边所能到达的节点。 对于最大重构树上的某lca(u,v)，其点权表示的是从u到v中最大边权的最小值。 重构树的构建 void kruskal() { for(int i=1;i&lt;=n;++i)ff[i]=i; sort(rem+1,rem+1+m,cmp); for(int i=1;i&lt;=m;++i) { int fu=find(rem[i].u),fv=find(rem[i].v); if(fu!=fv) { val[++cnt]=rem[i].dis; // 用边权代表点权 ff[cnt]=ff[fu]=ff[fv]=cnt; // 三点都加入集合 add(fu,cnt); add(cnt,fu); // 建无向边 add(fv,cnt); add(cnt,fv); } } for(int i=1;i&lt;=cnt;++i) if(!vis[i]) { int f=find(i); dfs1(f,0); dfs2(f,f); } }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"图论/搜索","slug":"图论-搜索","permalink":"http://2715992064.github.io/tags/%E5%9B%BE%E8%AE%BA-%E6%90%9C%E7%B4%A2/"}],"author":"Cedeat"},{"title":"最短路","slug":"最短路","date":"2022-02-10T16:00:00.000Z","updated":"2022-03-04T09:41:23.442Z","comments":true,"path":"2022/02/11/zui-duan-lu/","link":"","permalink":"http://2715992064.github.io/2022/02/11/zui-duan-lu/","excerpt":"","text":"图论最短路 Dijkstra算法朴素Dijkstra算法 O(n^2)Dijkstra算法用于求节1到点n的最短路，适用于稠密图（其时间复杂度与边数m无关）。 对每个点设定一个dist，代表其距离点1的距离，初始化为无穷大，后续再进行更新。令dist[1] = 0，也就是说，此时除dist1以外，其他点的距离是不确定的。 设定一个集合s，表示已经确定最短路的点。首先对n个点，需要进行n次迭代。**1.找到一个t，t为非s集合中距离最小的点（即不确定距离的dist值最小的点）。2.将t点加入到s集合中（表示该点已经确定距离）。3.**用t更新其他点的距离。（有两种情况，1.假设t点后有一点j，j点的最短路是由t走过来的，即dist[t] +g[t] [j]是最短路径。2.j点的最短路不由t走过来，即此时的dist[j]是最短路)。 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 510; int n, m; int g[N][N]; // 邻接矩阵存稠密图 int dist[N]; // 每个点距离点1的距离 bool st[N]; // 判断该点是否确定 int dijkstra() { memset(dist, 0x3f, sizeof dist); dist[1] = 0; for (int i = 0; i &lt; n; i ++ ){ // n个点循环n次 int t = -1; for (int j = 1; j &lt;= n; j ++ ){ // 找未确定的点中dist最小的点 if (!st[j] &amp;&amp; (t == -1 || dist[j] &lt; dist[t])) t = j; } if (t == n &amp;&amp; dist[t] != 0x3f3f3f3f) return dist[t]; else if (t == n &amp;&amp; dist[t] == 0x3f3f3f3f) return -1; // 提前结束循环的优化，不加也可 st[t] = true; for (int j = 1; j &lt;= n; j ++ )// 用t更新其他未确定点的距离 dist[j] = min(dist[j], dist[t] + g[t][j]); } if (dist[n] == 0x3f3f3f3f) return -1; else return dist[n]; } int main() { cin &gt;&gt; n &gt;&gt; m; memset(g, 0x3f, sizeof g); while (m -- ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; g[a][b] = min(g[a][b], c); } printf(\"%d\\n\", dijkstra()); return 0; } 堆优化Dijkstra算法 O(mlogn)适用于稀疏图，当边数m和点数n相差不多时，其时间复杂度要比O(n^2)小。而因为是稀疏图，我们的储存方式要用邻接表来存 在上面的朴素算法我们可以得到，三步中第一步找不确定距离中最小dist的复杂度为n^2， 而求最小值我们也可以用先前学过的小根堆来维护，每次取出根节点即可。 #include &lt;bits/stdc++.h&gt; using namespace std; typedef pair&lt;int, int&gt; PII; const int N = 1e6 + 10; int n, m; int h[N], w[N], e[N], ne[N], idx; int dist[N]; bool st[N]; int add(int a, int b, int c) { e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ; } int dijkstra() { memset(dist, 0x3f, sizeof dist); dist[1] = 0; priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap; heap.push({0, 1}); while (heap.size()){ auto t = heap.top(); heap.pop(); int ver = t.second, distance = t.first; if (st[ver]) continue; // 防止产生冗余 st[ver] = true; for (int i = h[ver]; i != -1; i = ne[i]){ int j = e[i]; if (dist[j] &gt; dist[ver] + w[i]){ dist[j] = dist[ver] + w[i]; heap.push({dist[j], j}); } } } if (dist[n] == 0x3f3f3f3f) return -1; else return dist[n]; } int main() { cin &gt;&gt; n &gt;&gt; m; memset(h, -1, sizeof h); while (m -- ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; add(a, b, c); } cout &lt;&lt; dijkstra() &lt;&lt; endl; return 0; } Dijkstra算法的弊端Dijkstra算法是基于贪心的思想，前提是每次走的一步都一定是最优的情况，因此并不能处理含有负权边的情况。因为当出现负权边，并不是局部最优解就是全局最优解。 Bellman_ford算法bellman_ford算法适用于含负权边的情况中，但是由于它的方法十分简单暴力，在多数情况下不如SPFA算法，但唯一的一点优势是可以利用它处理有限制边数的最短路问题。 松弛操作对于bellman_ford算法，我们默认只用它处理有显示边数k的情况。首先进行k次循环，表示走k次边，每走一次边，我们都重新更新一次能走到的dist[j]，这一点和dijkstra算法相似，称为松弛操作。bellman_ford算法的本质就是通过不断地遍历进行松弛操作来找到最小边。 dist[b] = min(dist[b], dist[a] + w); // 松弛操作 串联情况但和dijkstra算法不同的是，针对于有限制边数的最短路情况下，我们每次更新只能更新出离已经确定的点的旁边的一个点，以此来表示一次更新，否则我们更新到第三个点时会使用第二次本次更新过的点进行更新，相当于在一次迭代中进行了两次更新（可以理解为一次走两条边），当最多边数k有限时就不一定符合情况了，这种情况称为串联情况。 负环情况当存在负权边时，负环情况也有可能出现。负环情况指的是一条含有负权边的环，走完这一个环所需的总边权为负，当出现这种情况，我们就可以通过无限次的走负环来让最小长度为负无穷。因此当出现负环时多数情况是无解的，即不能走到n点处。但当存在负环，但走向n点的必经之路上不存在负环，问题一样有解。 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 510, M = 10010; struct Edge { int a, b ,c; }edges[M]; // 结构体存边 int n, m, k; int dist[N]; int backup[N]; // 题目有特殊的边数限制，因此在更新时只能更新上次备份，否则会出现串联 void bellman_ford() { memset(dist, 0x3f, sizeof dist); dist[1] = 0; for (int i = 0; i &lt; k; i ++ ){ memcpy(backup, dist, sizeof dist); // 每次都将上次的dist存到备份里 for (int j = 0; j &lt; m; j ++ ){ auto e = edges[j]; dist[e.b] = min(dist[e.b], backup[e.a] + e.c); } } } int main() { cin &gt;&gt; n &gt;&gt; m &gt;&gt; k; for (int i = 0; i &lt; m ; i ++ ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; edges[i] = {a, b, c}; } bellman_ford(); if (dist[n] &gt; 0x3f3f3f3f / 2) printf(\"impossible\\n\"); else printf(\"%d\\n\", dist[n]); return 0; } 最后的判断条件是0x3f3f3f3f，目的是为了防止出现一个点还未确定最小距离(0x3f3f3f3f)，而与n点之间存在负权边，会将dist[n]更新成小于0x3f3f3f3f的值，所以不能用dist[n] == 0x3f3f3f3f判断。 SPFA算法 O(nm)Bellman_ford算法过于简单粗暴，在每次走一条边时要遍历所有的边进行更新，而多数的边都是无效更新（都是在0x3f3f3f3f左右变换，不是真正的确定长度)，也就是说，只有一个点的前驱节点变小了，该节点才会变小。 SPFA就是基于BFS的思想，对Bellman_ford算法的更新进行优化。 最短路#include &lt;bits/stdc++.h&gt; using namespace std; const int N = 100010; int n, m; int h[N], w[N], e[N], ne[N], idx; int dist[N]; bool st[N]; void add(int a, int b, int c) { e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ; } int spfa() { memset(dist, 0x3f, sizeof dist); dist[1] = 0; queue&lt;int&gt; q; q.push(1); st[1] = true; while (q.size()){ int t = q.front(); q.pop(); st[t] = false; for (int i = h[t]; i != -1; i = ne[i]){ int j = e[i]; if (dist[j] &gt; dist[t] + w[i]){ dist[j] = dist[t] + w[i]; if (!st[j]){ q.push(j); st[j] = true; } } } } printf(\"%d\\n\", dist[n]); return dist[n]; } int main() { cin &gt;&gt; n &gt;&gt; m; memset(h, -1, sizeof h); while (m -- ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; add(a, b, c); } if (spfa() == 0x3f3f3f3f) printf(\"impossible\"); else printf(\"%d\\n\", spfa()); return 0; } 判断负权环SPFA算法同样也可以用于判断负权环的存在，这需要我们定义一个cnt数组用来存储对于走到这个点走过的边数。根据抽屉原理，当cnt[j] &gt;= n时，代表我们走到这个点共走过n条边，而n条边必定存在n+1个点，但点数只有n个，因此一定走过了相同编号的点，也必定存在负环。 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 2010, M = 10010; int n, m; int h[N], w[M], e[M], ne[M], idx; int dist[N], cnt[N]; bool st[N]; void add(int a, int b, int c) { e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ; } bool spfa() { queue&lt;int&gt; q; for (int i = 1; i &lt;= n; i ++ ){ st[i] = true; q.push(i); } while (q.size()){ int t = q.front(); q.pop(); st[t] = false; for (int i = h[t]; i != -1; i = ne[i]){ int j = e[i]; if (dist[j] &gt; dist[t] + w[i]){ dist[j] = dist[t] + w[i]; cnt[j] = cnt[t] + 1; if (cnt[j] &gt;= n) return true; //if (!st[j]){ q.push(j); st[j] = true; //} } } } return false; } int main() { cin &gt;&gt; n &gt;&gt; m; memset (h, -1, sizeof h); while (m -- ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; add(a, b, c); } if (spfa()) cout &lt;&lt; \"Yes\" &lt;&lt; endl; else cout &lt;&lt; \"No\" &lt;&lt; endl; return 0; } Floyd算法 O(n^3)用于判断多源最短路，基于动态规划的思想。 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 210, INF = 1e9; int n, m, Q; int d[N][N]; void floyd() { for (int k = 1; k &lt;= n; k ++ ){ for (int j = 1; j &lt;= n; j ++ ){ for (int i = 1; i &lt;= n; i ++ ){ d[i][j] = min(d[i][j], d[i][k] + d[k][j]); } } } } int main() { cin &gt;&gt; n &gt;&gt; m &gt;&gt; Q; for (int i = 1; i &lt;= n; i ++ ){ for (int j = 1; j &lt;= n; j ++ ){ if (i == j) d[i][j] = 0; else d[i][j] = INF; } } while (m -- ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; d[a][b] = min(d[a][b], c); } floyd(); while (Q -- ){ int a, b; cin &gt;&gt; a &gt;&gt; b; int t =d[a][b]; if (t &gt; INF / 2) printf(\"impossible\"); else printf(\"%d\\n\", t); } return 0; } 路径还原记录一个path数组，当dist数组被更新时，就同步跟新path数组，此处以朴素dijkstra算法为例： #include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 510; const int inf = 0x3f3f3f3f; int g[maxn][maxn]; int st[maxn]; int dist[500010]; int path[500010]; int n, m; int dijkstra() { memset(dist, 0x3f, sizeof dist); memset(path, -1 ,sizeof path); dist[1] = 0; for (int i = 1; i &lt;= n; i ++ ){ int t = -1; for (int j = 1; j &lt;= n; j ++ ){ if (!st[j] &amp;&amp; (t == -1 || dist[j] &lt; dist[t])) t = j; } st[t] = 1; for (int j = 1; j &lt;= n; j ++ ){ if (dist[j] &gt; dist[t] + g[t][j]){ dist[j] = dist[t] + g[t][j]; path[j] = t; // 记录 } } } return dist[n]; } vector&lt;int&gt; get_path(int x){ vector&lt;int&gt; p; for (; x != -1; x = path[x]) p.push_back(x); reverse(p.begin(), p.end()); //p中存下的是n到1的顺序，我们逆反一下顺序。 return p; } int main() { cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i ++ ){ for (int j = 1; j &lt;= n; j ++ ){ g[i][j] = (i == j) ? 0 : inf; } } for (int i = 1; i &lt;= m; i ++ ){ int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; g[a][b] = min(g[a][b], c); } printf(\"%d\\n\", dijkstra()); vector&lt;int&gt; p = get_path(n); for (auto it : p){ printf(\"%d \", it); } return 0; }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"图论/搜索","slug":"图论-搜索","permalink":"http://2715992064.github.io/tags/%E5%9B%BE%E8%AE%BA-%E6%90%9C%E7%B4%A2/"}],"author":"Cedeat"},{"title":"欧拉函数","slug":"欧拉函数","date":"2022-02-10T16:00:00.000Z","updated":"2022-02-11T13:37:25.757Z","comments":true,"path":"2022/02/11/ou-la-han-shu/","link":"","permalink":"http://2715992064.github.io/2022/02/11/ou-la-han-shu/","excerpt":"","text":"欧拉函数定义1~N中与N互质的数的个数称为欧拉函数，记为ϕ(N)。 若在算数基本定理中，N = p1^a1 * p2^a2 * ….. * pm^am。 ϕ(N) = N * (p1 - 1) / p1 * (p2 - 1) / p2 * …. * (pm - 1) / pm。 证明欧拉函数的证明基于容质原理。 设N = p1^a1 * p2^a2 * p3^a3 * … *pk ^ak。 我们要找到1N中与N互质的数，就要去掉1N中所有N的因数及其倍数。例如在1~N中所有p1的倍数的个数就有 N / p1个，以此类推…. 但倍数之间可能存在重复，若p1和p2的倍数之间存在重复，我们就需要减去他们的公倍数，即N / (p1 * p2)，以此类推… 最终形式：N - N / p1 - N / p2 - …. - N / pk + N / p1p2 + N / p1p3 + … - N / p1p2p3 - N / p1p2p4 - …. + N / p1p2p3….pk。 代码复杂度 O(nlogn) #include &lt;bits/stdc++.h&gt; using namespace std; int main() { int tt; cin &gt;&gt; tt; while (tt -- ){ int x; cin &gt;&gt; x; int res = x; for (int i = 2; i &lt;= x / i; i ++ ){ if (x % i == 0){ res = res / i * (i - 1); while (x % i == 0) x /= i; } } if (x &gt; 1) res = res / x * (x - 1); cout &lt;&lt; res &lt;&lt; endl; } return 0; } 筛法求欧拉函数筛法求欧拉函数其实就是在线性筛的过程中顺便求出每个数的欧拉函数。 #include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 1123456; typedef long long ll; bool st[maxn]; int phi[maxn], primes[maxn]; // phi[i]表示i的欧拉函数 int cnt; void get_euler(int n) { phi[1] = 1; for (int i = 2; i &lt;= n; i ++ ){ if (!st[i]){ phi[i] = i - 1; primes[cnt ++ ] = i; } for (int j = 0; primes[j] &lt;= n / i; j ++ ){ st[primes[j] * i] = 1; if (i % primes[j] == 0){ phi[primes[j] * i] = phi[i] * primes[j]; break; } else{ phi[primes[j] * i] = phi[i] * (primes[j] - 1); } } } } int main() { int n; cin &gt;&gt; n; get_euler(n); ll res = 0; for (int i = 1; i &lt;= n; i ++ ){ res += phi[i]; } cout &lt;&lt; res &lt;&lt; endl; return 0; } 这里解释一下phi[i]如何得到。 如果i是质数：显然，一个质数k的欧拉函数就是1~k-1。 如果i不是质数：如果i % primes[j] = 0，那么primes[j] * i这个数的欧拉函数其实可以由phi[i]得到。显然primes[j]是primes[j] * i的一个质因子，且primes[j]也是i的一个质因子，那么phi[i] = i * (1 - 1 / p1) * … * (1 - 1/ primes[j]) * …，(1 - 1/ primes[j])这一项必定已经包含，而欧拉函数i乘的项数与指数大小无关，只与质因子数量有关。例如phi[6] = 6 * (1 - 1 / 2) * (1 - 1 / 3)，phi[6 ^ 100] = 6 ^ 100 * (1 - 1 / 2) * (1 - 1 / 3)。因此: phi[i] = i * (1 - 1 / p1) * ... * (1 - 1 / pk); phi[primes[j] * i] = primes[j] * i * (1 - 1 / p1) * ... * (1 - 1 / pk); phi[primes[j] * i] = primes[j] * phi[i]; // 化简 如果i % primes[j] != 0，那么 phi[i] = i * (1 - 1 / p1) * ... * (1 - 1 / pk); phi[primes[j] * i] = primes[j] * i * (1 - 1 / p1) * ... * (1 - 1 / pk) * (1 - 1 / primes[j]); phi[primes[j] * i] = phi[i] * (primes[j] - 1); // 化简","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"}],"author":"Cedeat"},{"title":"线性DP","slug":"线性DP","date":"2022-02-10T16:00:00.000Z","updated":"2022-03-27T10:25:42.875Z","comments":true,"path":"2022/02/11/xian-xing-dp/","link":"","permalink":"http://2715992064.github.io/2022/02/11/xian-xing-dp/","excerpt":"","text":"线性DP数字三角形用f[i] [j]表示走到f[i] [j]的最大步数，一共只有两种走法，左上方走下来或右上方走下来，因此我们可以列出状态转移方程 f[i][j] = f[i - 1][j - 1] + a[i][j]; //左上方走下来 f[i][j] = f[i - 1][j] + a[i][j]; //右上方走下来 所以我们只要找到所有点的走法的最大值，再枚举最后一行，也就是出口处的最大值，就是整个三角型的最大值。 #include&lt;bits/stdc++.h&gt; using namespace std; const int N=510,INF=0x3f3f3f3f; int f[N][N]; int a[N][N]; int main(){ int n; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++){ for(int j=1;j&lt;=i;j++){ cin&gt;&gt;a[i][j]; } } for(int i=1;i&lt;=n;i++){ for(int j=0;j&lt;=i+1;j++){ //因为有负数，所以应该将两边也设为-INF f[i][j]=-INF; } } f[1][1]=a[1][1]; for(int i=2;i&lt;=n;i++){ for(int j=1;j&lt;=i;j++){ f[i][j]=a[i][j]+max(f[i-1][j-1],f[i-1][j]); } } int res=-INF; for(int i=1;i&lt;=n;i++) res=max(res,f[n][i]); cout&lt;&lt;res&lt;&lt;endl; } 逆序写法，更简单 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 510; int f[N][N]; int n; int main() { cin &gt;&gt; n; for (int i = 1; i &lt;= n; i ++ ){ for (int j = 1; j &lt;= i; j ++ ){ cin &gt;&gt; f[i][j]; } } for (int i = n; i &gt;= 1; i -- ){ for (int j = i; j &gt;= 1; j -- ){ f[i][j] = max(f[i + 1][j], f[i + 1][j + 1]) + f[i][j]; } } cout &lt;&lt; f[1][1] &lt;&lt; endl; // 自下向上一路选最大值选出来的 return 0; } 最长上升子序列状态表示 ：f[i] 为以i为结尾的最长的上升序列。 状态转移方程 if (w[i] &gt; w[j]) f[i] = max(f[i], f[j] + 1); 对于每个i，我们都枚举所有小于w[i]的w[j]，找出最大的小于w[i]的以w[j]为结尾的f[j]。但最后的点不一定是最大的点，我们还需要遍历一遍，找到f[i]的最大值。 #include &lt;iostream&gt; using namespace std; const int N = 1010; int n; int w[N], f[N]; int main() { cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) cin &gt;&gt; w[i]; int mx = 1; // 找出所计算的f[i]之中的最大值，边算边找 for (int i = 0; i &lt; n; i++) { f[i] = 1; // 设f[i]默认为1，找不到前面数字小于自己的时候就为1 for (int j = 0; j &lt; i; j++) { if (w[i] &gt; w[j]) f[i] = max(f[i], f[j] + 1); // 前一个小于自己的数结尾的最大上升子序列加上自己，即+1 } mx = max(mx, f[i]); } cout &lt;&lt; mx &lt;&lt; endl; return 0; } 这是一个O(n^2)的做法，对于过大的数据仍然会超时。 优化（DP+二分）状态表示：f[i]表示长度为i的单调增子序列中最后一位最小的数字。 如果当前的w[i]比f[cnt - 1]大，说明满足一个单调增的序列，就将他变成当前序列的最后一个数（不一定是最小的），同时cnt++。 如果当前w[i]比f[cnt - 1]小，说明找到一个更好的序列，可以将之前的序列更新，让这个更小的数成为当前的最后一个数。 对于查找，我们可以用二分法找到第一个大于等于w[i]的数字 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 100010; int n; int a[N]; int q[N]; int main() { cin &gt;&gt; n; for (int i = 0; i &lt; n; i ++ ) scanf(\"%d\", &amp;a[i]); int len = 0; for (int i = 0; i &lt; n; i ++ ){ int l = 0, r = len; while (l &lt; r){ int mid = l + r + 1 &gt;&gt; 1; if (q[mid] &gt; a[i]) l = mid; else r = mid - 1; } len = max(len, r + 1); //r存的是长度，r + 1表示r的下一个位置 q[r + 1] = a[i]; // 更新 } cout &lt;&lt; len &lt;&lt; endl; return 0; } 最长公共子序列状态划分：两个序列末尾的字符是否相等。 f[i][j] = max(f[i - 1][j], f[i][j - 1]); // 末尾字符不相等 f[i][j] = f[i - 1][j - 1] + 1; // 末尾字符相等 这里摘一下大佬的题解吧： ![`P27X0AXAE{I~$KSS1ECE56](https://s4.ax1x.com/2022/02/11/HawqHJ.png) #include &lt;iostream&gt; using namespace std; const int N = 1010; int n, m; char a[N], b[N]; int f[N][N]; int main() { cin &gt;&gt; n &gt;&gt; m &gt;&gt; a + 1 &gt;&gt; b + 1; for (int i = 1; i &lt;= n; i++) { for (int j = 1; j &lt;= m; j++) { if (a[i] == b[j]) { f[i][j] = f[i - 1][j - 1] + 1; } else { f[i][j] = max(f[i - 1][j], f[i][j - 1]); } } } cout &lt;&lt; f[n][m] &lt;&lt; '\\n'; return 0; } LCS+输出字符串scanf(\"%s%s\", s + 1, t + 1); //cout &lt;&lt; strlen(s + 1) &lt;&lt; ' ' &lt;&lt; strlen(t + 1) &lt;&lt; endl; for (int i = strlen(s + 1); i &gt;= 1; i -- ){ for (int j = strlen(t + 1); j &gt;= 1; j -- ){ if (s[i] == t[j]) f[i][j] = f[i + 1][j + 1] + 1; else f[i][j] = max(f[i + 1][j], f[i][j + 1]); } } int i = 1, j = 1; while (i &lt;= strlen(s + 1) &amp;&amp; j &lt;= strlen(t + 1)){ if (s[i] == t[j]){ cout &lt;&lt; s[i]; i ++; j ++; } else if (f[i][j] == f[i + 1][j]) i ++ ; else j ++; } 最短编辑距离状态表示f[i] [j] ：所有将a[1 ~ i] 变成b[1 ~ j] 的操作方式。 属性：min。 状态计算： （1）删除：若要从a中删除一个字符，则需要让f[1 ~ i - 1] 与 f[1 ~ j] 匹配，因此 f[i][j] = f[i - 1][j] + 1; （2）增加：从a中增加一个字符，需要让f[1 ~ i]与f[i ~ j - 1] 匹配 f[i][j] = f[i][j - 1] + 1; （3）修改：将f[i]改成f[j]，让前面的各位刚好匹配 f[i][j] = f[i - 1][j - 1] + 1; // f[i] != f[j] f[i][j] = f[i - 1][j - 1]; // f[i] == f[j] #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 1010; int n, m; char a[N], b[N]; int f[N][N]; int main() { cin &gt;&gt; n &gt;&gt; a + 1 &gt;&gt; m &gt;&gt; b + 1; for (int i = 0; i &lt;= n; i ++ ) f[i][0] = i; for (int i = 0; i &lt;= m; i ++ ) f[0][i] = i; for (int i = 1; i &lt;= n; i ++ ){ for (int j = 1; j &lt;= m; j ++ ){ f[i][j] = min(f[i - 1][j] + 1, f[i][j - 1] + 1); if (a[i] == b[j]) f[i][j] = min(f[i][j], f[i - 1][j - 1]); else f[i][j] = min(f[i][j], f[i - 1][j - 1] + 1); } } cout &lt;&lt; f[n][m] &lt;&lt; endl; return 0; } 最长公共上升子序列LIS+LCS的混合问题。 状态表示： f[i] [j] 代表所有a[1 ~ i]和b[1 ~ j]中以b[j]结尾的公共上升子序列的集合；f[i] [j]的值等于该集合的子序列中长度的最大值；状态计算（对应集合划分）： 首先依据公共子序列中是否包含a[i]，将f[i] [j]所代表的集合划分成两个不重不漏的子集： 不包含a[i]的子集，最大值是f[i - 1] [j]；包含a[i]的子集，将这个子集继续划分，依据是子序列的倒数第二个元素在b[]中是哪个数：子序列只包含b[j]一个数，长度是1；子序列的倒数第二个数是b[1]的集合，最大长度是f[i - 1] [1] + 1；…子序列的倒数第二个数是b[j - 1]的集合，最大长度是f[i - 1] [j - 1] + 1；如果直接按上述思路实现，需要三重循环： for (int i = 1; i &lt;= n; i ++ ) { for (int j = 1; j &lt;= n; j ++ ) { f[i][j] = f[i - 1][j]; if (a[i] == b[j]) { int maxv = 1; for (int k = 1; k &lt; j; k ++ ) if (a[i] &gt; b[k]) maxv = max(maxv, f[i - 1][k] + 1); f[i][j] = max(f[i][j], maxv); } } } #include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 3010; int a[maxn], b[maxn]; int f[maxn][maxn]; int n; int main() { cin &gt;&gt; n; for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; a[i]; for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; b[i]; for (int i = 1; i &lt;= n; i ++ ){ int maxv = 1; for (int j = 1; j &lt;= n; j ++ ){ f[i][j] = f[i - 1][j]; if (a[i] == b[j]) f[i][j] = max(f[i][j], maxv); if (a[i] &gt; b[j]) maxv = max(maxv, f[i - 1][j] + 1); } } int ans = 0; for (int i = 1; i &lt;= n; i ++ ) ans = max(ans, f[n][i]); cout &lt;&lt; ans &lt;&lt; endl; }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"http://2715992064.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}],"author":"Cedeat"},{"title":"约数","slug":"约数","date":"2022-02-04T16:00:00.000Z","updated":"2022-02-12T09:22:03.337Z","comments":true,"path":"2022/02/05/yue-shu/","link":"","permalink":"http://2715992064.github.io/2022/02/05/yue-shu/","excerpt":"","text":"约数约数，又称因数。整数a除以整数b(b≠0) 除得的商正好是整数而没有余数，我们就说a能被b整除，或b能整除a。a称为b的倍数，b称为a的约数。 试除法求约数#include &lt;bits/stdc++.h&gt; using namespace std; vector&lt;int&gt; get(int n) { vector&lt;int&gt; res; for (int i = 1; i &lt;= n / i; i ++ ){ if (n % i == 0){ res.push_back(i); if (i != n / i) res.push_back(n / i); } } sort(res.begin(), res.end()); return res; } int main() { int n; cin &gt;&gt; n; while (n -- ){ int x; cin &gt;&gt; x; auto res = get(x); for (auto it : res) cout &lt;&lt; it &lt;&lt; ' '; cout &lt;&lt; endl; } return 0; } 约数个数定理对于一个大于1正整数n可以分解质因数 则n的正约数的个数就是 其中a1、a2、a3…ak是p1、p2、p3，…pk的指数。（摘自百度百科） 此处用map做一个映射，键表示约数，值表示指数，然后遵照约束个数定理计算即可。 #include &lt;bits/stdc++.h&gt; using namespace std; const int mod = 1e9 + 7; int main() { int n; cin &gt;&gt; n; unordered_map&lt;int, int&gt; primes; while (n -- ){ int x; cin &gt;&gt; x; for (int i = 2; i &lt;= x / i; i ++ ){ while (x % i == 0){ x /= i; primes[i] ++ ; } } if (x &gt; 1) primes[x] ++ ; } long long res = 1; for (auto it : primes) res = res * (it.second + 1) % mod; cout &lt;&lt; res &lt;&lt; endl; return 0; } 约数和定理对于一个大于1正整数n可以分解质因数：n=p1^a1 * p2^a2 * p3^a3 * … * pk^ak 则由约数个数定理可知n的正约数有(a₁+1)(a₂+1)(a₃+1)…(ak+1)个， 那么n的(a₁+1)(a₂+1)(a₃+1)…(ak+1)个正约数的和为 f(n)=(p1^0+p1^1+p1^2+…p1^a1)(p2^0+p2^1+p2^2+…p2^a2)…(pk^0+pk^1+pk^2+…pk^ak） 对于每一项pn，我们可以表示为p1^a1 + p1^a1-1 …. pi^1 + 1的形式，那么对每一项，我们都让它乘a1再加1即可（秦九韶算法） #include &lt;bits/stdc++.h&gt; using namespace std; const int mod = 1e9 + 7; int main() { int n; cin &gt;&gt; n; unordered_map&lt;int, int&gt; primes; while (n -- ){ int x; cin &gt;&gt; x; for (int i = 2; i &lt;= x / i; i ++ ){ while (x % i == 0){ x /= i; primes[i] ++ ; } } if (x &gt; 1) primes[x] ++ ; } long long res = 1; for (auto it : primes){ long long a = it.first, b = it.second; long long t = 1; while (b -- ){ t = (t * a + 1) % mod; } res = res * t % mod; } cout &lt;&lt; res &lt;&lt; endl; return 0; } 最大公约数GCD计算方法：欧几里得法（辗转相除法） 递归写法： #include &lt;bits/stdc++.h&gt; using namespace std; int gcd(int a, int b) { if (b == 0) return a; else return gcd(b, a % b); } int main() { int tt; cin &gt;&gt; tt; while (tt -- ){ int a, b; cin &gt;&gt; a &gt;&gt; b; cout &lt;&lt; gcd(a, b) &lt;&lt; endl; } return 0; } 拓展 最小公倍数LCM其实最小公倍数可以由最大公因数得：lcm(a, b) = a * b / gcd(a, b) 拓展欧几里得算法 EXGCD裴蜀定理对于任意的整数a，b，都一定存在整数x，y使ax+by=d，d为gcd(a,b)的倍数。 拓展欧几里得算法是在gcd递归的过程中加上x与y的迭代 设ax1+by1=gcd(a,b), bx2+(a%b)y2=gcd(b,a%b);由gcd(a,b)=gcd(b,a%b),可得:ax1+by1=bx2+(a%b)y2;即:ax1+by1=bx2+(a-(a/b)*b)y2 =ay2+bx2-(a/b) * by2;即:ax1+by1=ay2 + b(x2-(a/b) * y2)根据恒等定理,对应项相等，得:x1=y2; y1=x2-(a/b)*y2;这样我们就得到了:x1，y1的值基于x2，y2，所以我们可以通过递归求解。 #include &lt;bits/stdc++.h&gt; using namespace std; void exgcd(int a, int b, int &amp;x, int &amp;y) { if (!b){ x = 1, y = 0; } else{ exgcd(b, a % b, y, x), y -= a / b * x; // xy互换 } } int main() { int tt; cin &gt;&gt; tt; while (tt -- ){ int a, b; cin &gt;&gt; a &gt;&gt; b; int x, y; exgcd(a, b, x, y); cout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl; } return 0; }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"数论","slug":"数论","permalink":"http://2715992064.github.io/tags/%E6%95%B0%E8%AE%BA/"}],"author":"Cedeat"},{"title":"哈希表","slug":"哈希表","date":"2022-02-03T16:00:00.000Z","updated":"2022-05-13T11:54:53.006Z","comments":true,"path":"2022/02/04/ha-xi-biao/","link":"","permalink":"http://2715992064.github.io/2022/02/04/ha-xi-biao/","excerpt":"","text":"哈希表哈希表的作用将一个庞大的空间（值域）映射到比较小的空间（0-N），N一般为1e5-1e6左右。 这种映射通常使用模运算来进行，但将若干较大范围的数映射到较小范围的数，难免会发生冲突（两个数映射到同一个数上），为解决这种冲突，我们需要特殊的存储结构。 存储结构哈希表的存储结构有两种：拉链法和开放寻址法，这两者使用不同的方式处理冲突。 拉链法通过一个一维数组（0-N）来存储映射后的数，我们可以把这个数组看为一个个槽，当发生冲突时，我们会将该槽下拉一条链表，用链表存储映射到同一个槽的数据。 因此，这里我们要用到单链表的知识，将每个h[k]set为-1，表示槽指向尾节点。 插入在插入时，我们要用到单链表的头插法。 void insert(int x) { int k = (x % N + N) % N; // 避免出现模为负 e[idx] = x; ne[idx] = h[k]; h[x] = idx ++ ; } 查询bool find (int x) { int k = (x % N + N) % N; for (int i = h[k]; i != -1; i = ne[i]) // 单链表的遍历操作 if (e[i] == x) return true; return false; } 开放寻址法开放寻址法不需要用到链表，只需要开一个一维数组，因此结构上看起来会更简单，但长度会更长一些（2N~3N），以此降低冲突的概率。 我们该如何处理冲突呢？对于开放寻址法，我们从前往后从h[k]开始往后寻找，如果h[k]不为空，就再往后一位寻找，直到为空为止。 find操作开放寻址法的核心是find操作 int find (int x) { int k = (x % N + N) % N; while (h[k] != null &amp;&amp; h[k] != x){ k ++ ; if (k == N) k = 0; } return k; } return k 的作用可以集查找和插入为一体，当h[k]为null时，代表为空，则会返回应插入的位置。若h[k]为x时，则代表找到x在哈希表中的位置。 有了find操作，插入和查找就变得十分简单了。 插入int k = find(x); h[k] = x; 查询if (h[k] != null) puts(\"Yes\"); else puts(\"No\"); 开放寻址法完整代码#include &lt;bits/stdc++.h&gt; using namespace std; const int N = 200003, null = 0x3f3f3f3f; int h[N]; int find (int x) { int k = (x % N + N) % N; while (h[k] != null &amp;&amp; h[k] != x){ k ++; if (k == N) k = 0; } return k; } int main() { memset(h, 0x3f, sizeof(h)); int n; scanf(\"%d\", &amp;n); while (n -- ){ char op[2]; int x; scanf(\"%s %d\", op, &amp;x); if (*op == 'I') h[find(x)] = x; else{ if (h[find(x)] == null) puts(\"No\"); else puts(\"Yes\"); } } return 0; } 字符串哈希字符串哈希的实质是将不同的字符串转换为不同的整数，并且为了更方便地判断一个字符串是否出现过，仅需要O(1)的时间。 要将字符串转换为整数，我们首先要预处理出所有前缀子串的哈希值。那么如何来定义前缀的哈希值呢？ 我们通常将一个字符串看为一个P进制的数，一位字符看为一位数字。例如”ABCD”这个字符串，则可以把A当作1，B当作2，C当作3…..那么这个P进制数对应的十进制数就是1 * p^3 + 2 * p^2 + 3 * p^1 + 4 *p^0，当字符串很长时，这个十进制数会非常大，我们需要再将转化后的P进制数模上Q，以此将字符串映射为0~Q-1的数。 其中，我们需要注意不能将字符映射为0，若一个字符串“A”的哈希值为0，“AA”也为0，“AAA”同样为0，这样就会出现冲突。 当P足够好是，可以避免大部分冲突，经验之谈，当P为131或13331时， Q为2^64足够好，在大多数情况下不会出现冲突。 有了前缀的字符串哈希值，我们该如何求一个区间的字符串的哈希值呢？以字符串“ABCDEFG”为例子，令A为1，B为2，以此类推， 字符串“ABCD”的哈希值为1 * p^3 + 2 * p^2 + 3 * p^1 + 4 *p^0，而原字符串的哈希值为1 * p^6 + 2 * p^5 + 3 * p^4 + 4 * p^3 + 5 * p^2 + 6 * p^1 + 7 * p^0，若要求出字串“EFG”的哈希值，只需求出5 * p^2 + 6 * p^1 + 7 * p^0即可，通过这样表示，我们可以很清晰地看出，只需令“ABCD”的哈希值乘上一个p^3，再与原串的哈希值相减即可。 由此我们得到字串哈希值的推导公式 h[r] - h[l - 1] * p^(r - l + 1); 还记得我们前文提到的Q吗，如果我们直接使用unsigned long long 来存储所有的h，我们就不需要再进行取模操作，令其自然溢出，即相当于取2^64的模。 字符串哈希完整代码#include &lt;bits/stdc++.h&gt; using namespace std; typedef unsigned long long ULL; const int N = 100010, P = 131; int n, m; char str[N]; ULL h[N], p[N]; ULL get(int l, int r) { return h[r] - h[l - 1] * p[r - l + 1]; } int main() { scanf(\"%d%d\", &amp;n, &amp;m); scanf(\"%s\", str + 1); p[0] = 1; for (int i = 1; i &lt;= n; i ++ ){ h[i] = h[i - 1] * P + str[i]; p[i] = p[i - 1] * P; } while (m -- ){ int l1, r1, l2, r2; scanf(\"%d%d%d%d\", &amp;l1, &amp;r1, &amp;l2, &amp;r2); if (get(l1, r1) == get(l2, r2)) printf(\"Yes\\n\"); else printf(\"No\\n\"); } return 0; }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"数据结构","slug":"数据结构","permalink":"http://2715992064.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"author":"Cedeat"},{"title":"质数","slug":"质数","date":"2022-02-03T16:00:00.000Z","updated":"2022-02-12T09:22:13.212Z","comments":true,"path":"2022/02/04/zhi-shu/","link":"","permalink":"http://2715992064.github.io/2022/02/04/zhi-shu/","excerpt":"","text":"质数质数的判定-试除法质数的因子一定是成对出现的，因此不必枚举所有的因子，只要枚举其中较小的因子，也就是一半的因子即可。而较小因子的上限是sqrt(n)，所以只需到sqrt即可。 #include &lt;bits/stdc++.h&gt; using namespace std; bool is_prime(int u) { if (u &lt; 2) return false; for (int i = 2; i &lt;= u / i; i ++ ){ if (u % i == 0) return true; } return false; } int main() { int n; cin &gt;&gt; n; while (n -- ){ int x; cin &gt;&gt; x; if (is_prime(x)) printf(\"Yes\\n\"); else printf(\"No\\n\"); } return 0; } 分解质因数-试除法质因数是指能整除给定数的质数。同时，两个没有共同质因子的正整数称为互质。因为1没有质因子，1与任何正整数（包括1本身）都是互质。只有一个质因子的正整数为质数。 #include &lt;bits/stdc++.h&gt; using namespace std; void devide(int u) { for (int i = 2; i &lt;= u / i; i ++ ){ if (u % i == 0){ int s = 0; while (u % i == 0){ u /= i; // 分解过程 s ++ ; } printf(\"%d %d\\n\", i, s); } } if (u &gt; 1) printf(\"%d 1\\n\", u); // 一个数最多只包含一个大于sqrtn的因子，如果u还未被除尽，说明现在的u就等于这个因子 printf(\"\\n\"); } int main() { int n; cin &gt;&gt; n; while (n -- ){ int x; cin &gt;&gt; x; devide(x); } return 0; } 素数筛普通筛法（埃氏筛）素数筛与预处理相似，通过把i的倍数删去，剩余的即是素数 #include &lt;iostream&gt; #include &lt;algorithm&gt; using namespace std; const int N= 1000010; int primes[N], cnt; bool st[N]; void get_primes(int n) { for (int i = 2; i &lt;= n; i ++ ) { if (st[i]) continue; primes[cnt ++ ] = i; for (int j = i + i; j &lt;= n; j += i) st[j] = true; } } int main() { int n; cin &gt;&gt; n; get_primes(n); cout &lt;&lt; cnt &lt;&lt; endl; return 0; } 但埃氏筛法比较暴力，有许多数被重复筛去，增加了不必要的循环，比较多余。 线性筛法（欧拉筛法）线性筛法保证每一个合数只被筛去一次，但合数的因子可能有多个素数，对于一个数c=ab(b为c的最小质因数），当通过该算法的循环循环至c * b时，易得此时c%b==0,如果此时继续循环至b后面的一个素数d，则有：cd=a * b * d=(ad)b，因为d&gt;b,所以a * d&gt;c。当循环从c继续查找到a * d时我们发现当ad再次与素数b想乘时，就又对c * d进行了一次操作，出现了冗余，所以在if(n%prime[j]==0)成立时要将该层循环break掉； 1)当i%primes[j]!=0时,说明此时遍历到的primes[j]不是i的质因子，那么只可能是此时的primes[j]&lt;i的最小质因子,所以primes[j]*i的最小质因子就是primes[j]; 2)当有i%primes[j]==0时,说明i的最小质因子是primes[j],因此primes[j]*i的最小质因子也就应该是prime[j]，之后接着用st[primes[j+1]*i]=true去筛合数时，就不是用最小质因子去更新了,因为i有最小质因子primes[j]&lt;primes[j+1],此时的primes[j+1]不是primes[j+1]*i的最小质因子，此时就应该退出循环，避免之后重复进行筛选。 举个例子，对于一个数9，9 * 2=18将18标记为合数，循环继续；9 * 3=27将27标记为合数，此时发现9%3=0，循环退出。如果将循环继续下去会出现筛除9*5=45的情况，而45=15 * 3，在15时会被在筛去一次，故不可行 #include &lt;iostream&gt; #include &lt;algorithm&gt; using namespace std; const int N= 1000010; int primes[N], cnt; bool st[N]; void get_primes(int n) { for (int i = 2; i &lt;= n; i ++ ) { if (!st[i]) primes[cnt ++ ] = i; for (int j = 0; primes[j] &lt;= n / i; j ++ ) { st[primes[j] * i] = true; if (i % primes[j] == 0) break; } } } int main() { int n; cin &gt;&gt; n; get_primes(n); cout &lt;&lt; cnt &lt;&lt; endl; return 0; }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"数论","slug":"数论","permalink":"http://2715992064.github.io/tags/%E6%95%B0%E8%AE%BA/"}],"author":"Cedeat"},{"title":"树形DP","slug":"树状DP","date":"2022-01-04T16:00:00.000Z","updated":"2022-02-12T09:19:12.578Z","comments":true,"path":"2022/01/05/shu-zhuang-dp/","link":"","permalink":"http://2715992064.github.io/2022/01/05/shu-zhuang-dp/","excerpt":"","text":"树形DP状态表示： 树形DP的状态集合有两个f[u, 0]和f[u, 1]，分别表示所有从以u为根的子树中选择，且不选u这个点的方案，和选这个点的方案。 首先对于f[u, 0]，因为它没有选择u这个点，因此子节点自由选择，可以由f[j , 0]和f[j, 1]中转移过来，取两者最大值即可。 f[u][0] = max(f[j][1], f[j][0]); 对于f[u, 1]，由于选择了u节点，因此子节点必不能选，它等同于f[j, 0]和happy(u) f[u][1] = f[j][0] + happy[u]; 还有一点，即我们需要算完子节点，才能知道上司的情况，因此我们需要用递归的形式来做，搜索的方式可以选择dfs，同时可以给相应的f[u] [x]赋一个开心值。 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 6010; int n; int h[N], e[N], ne[N], idx; int happy[N]; int f[N][2]; bool has_fa[N]; void add(int a, int b) { e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ; } void dfs(int u) { f[u][1] = happy[u]; for (int i = h[u]; i != -1; i = ne[i]){ int j = e[i]; dfs(j); f[u][1] += f[j][0]; f[u][0] += max(f[j][0], f[j][1]); } } int main() { cin &gt;&gt; n; for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; happy[i]; memset(h, -1, sizeof h); for (int i = 0; i &lt; n - 1; i ++ ){ int a, b; cin &gt;&gt; a &gt;&gt; b; add(b, a); has_fa[a] = true; } int root = 1; while (has_fa[root]) root ++; dfs(root); cout &lt;&lt; max(f[root][0], f[root][1]) &lt;&lt; endl; return 0; }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"http://2715992064.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}],"author":"Cedeat"},{"title":"状态压缩DP","slug":"状态压缩DP","date":"2022-01-04T16:00:00.000Z","updated":"2022-02-12T09:19:21.651Z","comments":true,"path":"2022/01/05/zhuang-tai-ya-suo-dp/","link":"","permalink":"http://2715992064.github.io/2022/01/05/zhuang-tai-ya-suo-dp/","excerpt":"","text":"状态压缩DP状态压缩本质上就是用一个二进制数来表示出所有的状态，从而方便用位运算节省速度。 蒙德里安的梦想要找到所有的方案数，我们需要找到所有横放1x2方格的合法方案数，当横放数量确定后，竖放的方格只需插入即可。 状态表示：用f[i] [j]记录第i列的状态j，其中状态j是用二进制表示的数，当前一位捅出来时为1，没捅出来为0。 f[i][j] = f[i - 1] [k]; //k表示能转化成j的所有合法方案。 #include &lt;bits/stdc++.h&gt; using namespace std; typedef long long LL; const int N = 12, M = 1 &lt;&lt; N; int n, m; LL f[N][M]; vector&lt;int&gt; state[M]; bool st[M]; int main() { while (cin &gt;&gt; n &gt;&gt; m, n || m){ for (int i = 0; i &lt; 1 &lt;&lt; n; i ++ ){ // 预处理所有的情况 int cnt = 0; // 连续出现的0的数量 bool is_valid = true; for (int j = 0; j &lt; n; j ++ ){ if (i &gt;&gt; j &amp; 1){ // 当碰到一次1后判断之前遇见0的数量 if (cnt &amp; 1){ // 为奇数则是不合法状态 is_valid = false; break; } cnt = 0; //重新开始计算 } else cnt ++ ; } if (cnt &amp; 1) is_valid = false; // 末尾的0不会遇到1停止，最后再处理末尾的0 st[i] = is_valid; } for (int i = 0; i &lt; 1 &lt;&lt; n; i ++ ){ // 插入所有能转化成j的状态k state[i].clear(); for (int j = 0; j &lt; 1 &lt;&lt; n; j ++ ){ if ((i &amp; j) == 0 &amp;&amp; st[i | j]){ state[i].push_back(j); } } } memset(f, 0, sizeof f); f[0][0] = 1; for (int i = 1; i &lt;= m; i ++ ){ for (int j = 0; j &lt; 1 &lt;&lt; n; j ++ ){ for (auto k : state[j]) f[i][j] += f[i - 1][k]; } } cout &lt;&lt; f[m][0] &lt;&lt; endl; } return 0; } 最短Hamilton路径同样，状态表示f[i] [j]指走到点j的状态i的路径，同样状态i用二进制数表示， 例如走0,1,2,4这三个点,则表示为:10111;走0,2,3这三个点:1101; 状态转移方程 f[i][j]=min(f[i][j],f[i-(1&lt;&lt;j)][k]+w[k][j]); #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 20, M = 1 &lt;&lt; N; int f[M][N], w[N][N]; int main() { int n; cin &gt;&gt; n; for (int i = 0; i &lt; n; i ++ ){ for (int j = 0; j &lt; n; j ++ ){ cin &gt;&gt; w[i][j]; } } memset(f, 0x3f, sizeof f); f[1][0] = 0; // 初始化起点 for (int i = 0; i &lt; 1 &lt;&lt; n; i ++ ){ for (int j = 0; j &lt; n; j ++ ){ if (i &gt;&gt; j &amp; 1) // 存在j for (int k = 0; k &lt; n; k ++ ) // 走到j点之前，以k为终点的最短距离 if (i &gt;&gt; k &amp; 1) // 存在k f[i][j] = min(f[i][j], f[i - (1 &lt;&lt; j)][k] + w[k][j]); } } cout &lt;&lt; f[(1 &lt;&lt; n) - 1][n - 1] &lt;&lt; endl; return 0; }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"http://2715992064.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}],"author":"Cedeat"},{"title":"记忆化搜索","slug":"记忆化搜索","date":"2022-01-04T16:00:00.000Z","updated":"2022-02-12T09:18:47.537Z","comments":true,"path":"2022/01/05/ji-yi-hua-sou-suo/","link":"","permalink":"http://2715992064.github.io/2022/01/05/ji-yi-hua-sou-suo/","excerpt":"","text":"记忆化搜索记忆化搜索有点像搜索+初始化判断，通过保存过去的结果，可以避免重复的搜索，以此达到更快的时间。 f[a] [b]表示走到a，b这一点的最大距离，因此f[a] [b]如果不为初始化的值，则一定是最大值，我们不必再重复搜索 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 310; int n, m; int g[N][N]; int f[N][N]; int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1}; int dp(int x, int y) { int &amp;v = f[x][y]; if (v != - 1) return v; // 记忆化搜索，该点搜过所以不用再搜 v = 1; // 初始化 for (int i = 0; i &lt; 4; i ++ ){ int a = x + dx[i], b = y + dy[i]; if (a &gt;= 1 &amp;&amp; a &lt;= n &amp;&amp; b &gt;= 1 &amp;&amp; b &lt;= m &amp;&amp; g[x][y] &gt; g[a][b]) v = max(v, dp(a , b) + 1); // 递归处理 } return v; } int main() { cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i ++ ){ for (int j = 1; j &lt;= m ; j ++ ){ cin &gt;&gt; g[i][j]; } } memset(f, -1, sizeof f); int res = 0; for (int i = 1; i &lt;= n; i ++ ){ for (int j = 1; j &lt;= m; j ++ ){ res = max(res, dp(i, j)); } } cout &lt;&lt; res &lt;&lt; endl; return 0; }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"http://2715992064.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}],"author":"Cedeat"},{"title":"数位DP","slug":"数位DP","date":"2022-01-03T16:00:00.000Z","updated":"2022-02-12T09:19:15.545Z","comments":true,"path":"2022/01/04/shu-wei-dp/","link":"","permalink":"http://2715992064.github.io/2022/01/04/shu-wei-dp/","excerpt":"","text":"数位DP感觉是一种出现很多次的题然而我一次都不会（（ 数位DP的核心是分情况讨论，找到一个第j位，表示第j位上数字i出现了多少次，最后将每个位数上数字i的出现次数相加即是总和。 对于一个数abcdefg，假定第j位是d，那么有如下可能： （1）首先对于枚举的数i，如果这个数不是0，那么对于前三位abc，从0到abc，一定会有（0~999）种情况，让d为i，因此 res += l * p; （2）对于d，我们可以分成三种情况 1.d&gt;i d大于i这个数，则一定有一刻d等于i，则共有efg +1种情况 2.d=i d=i时，后三位可以为任意，则共有000~999种情况 #include &lt;bits/stdc++.h&gt; using namespace std; int dgt(int n) { int res = 0; while (n) { n /= 10; res++; } return res; } int cnt(int n, int i) { int res = 0, d = dgt(n); for (int j = 1; j &lt;= d; j ++ ){ // 分别枚举每一位上的数 int p = pow(10, j - 1), l = n / p / 10, r = n % p, dj = n / p % 10; if (i) res += l * p; if (!i &amp;&amp; l) res += (l - 1) * p; if ((dj &gt; i) &amp;&amp; (i || l)) res += p; if ((dj == i) &amp;&amp; (i || l)) res += r + 1; } return res; } int main() { int a, b; while (cin &gt;&gt; a &gt;&gt; b, a) { if (a &gt; b) swap(a, b); for (int i = 0; i &lt;= 9; i ++ ) { cout &lt;&lt; cnt(b, i) - cnt(a - 1, i) &lt;&lt; ' '; } cout &lt;&lt; endl; } return 0; }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"http://2715992064.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}],"author":"Cedeat"},{"title":"背包问题","slug":"背包问题","date":"2022-01-03T16:00:00.000Z","updated":"2022-03-28T10:30:45.980Z","comments":true,"path":"2022/01/04/bei-bao-wen-ti/","link":"","permalink":"http://2715992064.github.io/2022/01/04/bei-bao-wen-ti/","excerpt":"","text":"背包问题背包问题是一类很大的问题，很多问题都能转化成背包问题。 01背包01背包问题的特点是所有物品仅能用一次 状态转移方程 f[i][j] = max(f[i][j], f[i - 1][j - v[i]] + w[i]); 二维版本定义二维数组f[i] [j]表示一个状态，i标志前i个物品（有序），在背包容量为j下的最优解。 用一个二重循环迭代整个过程，外层循环i，表示前i个物品，内层循环j，表示背包容量为j下，对第i个物品是否选择。因为在同一层i的循环下，随着j的增大，f[i] [j]是不可能变小的，所以最后f[n] [m]一定是我们的最优解。 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 1010; int n, m; int v[N], w[N]; int f[N][N]; int main() { cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; v[i] &gt;&gt; w[i]; for (int i = 1; i &lt;= n; i ++ ){ for (int j = 0; j &lt;= m; j ++ ){ f[i][j] = f[i - 1][j]; // 初始化 if (j &gt;= v[i]) f[i][j] = max(f[i][j], f[i - 1][j - v[i]] + w[i]); } } cout &lt;&lt; f[n][m] &lt;&lt; endl; return 0; } 为何可以变为一维？(1) 计算f[i]时只用到了f[i - 1] (2) 在f[i]中用到的状态严格小于j 为何内层循环从大到小判断我们用到的是滚动数组，更新f[i] [j]是应该用到f[i - 1]层，但如果从小到大判断，我们用到的f[j - v[i]] 就应该是f[i] [j] 而不是f[i - 1] [j]。 优化输入在计算f[i]时其实只用到了f[i - 1]，因此我们可以边输入边进行计算： for (int i = 1; i &lt;= n; i ++ ){ int v, w; cin &gt;&gt; v &gt;&gt; w; for (int j = m; j &gt;= v; j -- ) f[j] = max(f[j], f[j - v] + w); } 最终版本#include &lt;bits/stdc++.h&gt; using namespace std; const int N = 1010; int n, m; int v[N], w[N]; int f[N]; int main() { cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i ++ ){ int v, w; cin &gt;&gt; v &gt;&gt; w; for (int j = m; j &gt;= v; j -- ) f[j] = max(f[j], f[j - v] + w); } cout &lt;&lt; f[m] &lt;&lt; endl; return 0; } 超大01背包一道思路比较清奇的题（可能是蒟蒻见识少）。 Atcoder Educational DP Contest E - Knapsack 2 题目大意：给定n个物品和一个容积为W的背包，每个物品都有一个价值v和一个质量w（与01背包要求相同），求能装下的最大价值。 该题不同的一点是数据范围，物品的质量高达了1e9，用普通的01背包，就算一维优化，也开不了这么大的数组。 该题的思路就是将价值和质量转换，令f[i]为价值为i下的最小体积（因为总价值只有1e5的范围，可以暴力枚举）。 AC代码（开longlong）： #include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;cstring&gt; #include &lt;cstdio&gt; #include &lt;cmath&gt; #include &lt;cstdlib&gt; //#include &lt;unordered_map&gt; #include &lt;map&gt; #include &lt;stack&gt; #include &lt;set&gt; #include &lt;queue&gt; #include &lt;cctype&gt; #include &lt;vector&gt; #include &lt;string&gt; using namespace std; #define IOS \\ cin.tie(0), cout.tie(0); \\ ios::sync_with_stdio(false); #define int long long #define endl '\\n' #define x first #define y second typedef pair&lt;int, int&gt; PII; const int maxn = 200010; const int inf = 0x3f3f3f3f; const int mod = 100000007; //int h[maxn], ne[maxn], e[maxn], w[maxn], idx; int tt; int n, m; int q[maxn]; int f[maxn]; struct node { int x, y; } t[maxn]; bool cmp(node a, node b) { return a.x &lt; b.x; } void solve() { cin &gt;&gt; n &gt;&gt; m; memset(f, 0x3f, sizeof f); f[0] = 0; for (int i = 1; i &lt;= n; i ++ ){ int w, v; cin &gt;&gt; v &gt;&gt; w; for (int j = 100000; j &gt;= w; j -- ) f[j] = min(f[j], f[j - w] + v); } int ans = 0; for (int i = 1; i &lt;= 100000; i ++ ){ if (f[i] &lt;= m) ans = max(ans, i); } cout &lt;&lt; ans &lt;&lt; endl; } signed main() { IOS; tt = 1; //cin &gt;&gt; tt; while (tt -- ) solve(); return 0; } 完全背包问题完全背包问题的特点是每件物品有无限个 状态转移方程 f[i][j] = max(f[i][j], f[i][j - k * v[i]] + k * w[i]); 朴素版本 #include&lt;iostream&gt; using namespace std; const int N = 1010; int f[N][N]; int v[N],w[N]; int main() { int n,m; cin&gt;&gt;n&gt;&gt;m; for(int i = 1 ; i &lt;= n ;i ++) { cin&gt;&gt;v[i]&gt;&gt;w[i]; } for(int i = 1 ; i&lt;=n ;i++) for(int j = 0 ; j&lt;=m ;j++) { for(int k = 0 ; k*v[i]&lt;=j ; k++) f[i][j] = max(f[i][j],f[i-1][j-k*v[i]]+k*w[i]); } cout&lt;&lt;f[n][m]&lt;&lt;endl; } 如何优化？f[i][j] = max(f[i - 1][j] + f[i - 1][j - v] + w, f[i - 1][j - 2 * v] + 2 * w ...); f[i][j - v] = max(f[i - 1][j - v], f[i - 1][j - 2 * v] + w, ...); 因此 f[i][j] = max(f[i - 1][j], f[i][j - v[i]] + w[i]); 加上一个一维的优化，我们就可以将三重（伪）的循环变为一维 注意我们的状态转移方程，这次用到的都是f[i]一层，因此不需要反向循环，在同一个i中可以用更新过的数据继续更新下一个，这是和01背包的不同之处。 同时，我们也可以使用优化输入，边读入边计算。 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 1010; int n, m; int v[N], w[N]; int f[N]; int main() { cin &gt;&gt; n &gt;&gt; m; for (int i = 0; i &lt;= n; i ++ ){ int v, w; cin &gt;&gt; v &gt;&gt; w; for (int j = v; j &lt;= m; j ++ ) f[j] = max(f[j], f[j - v] + w); } cout &lt;&lt; f[m] &lt;&lt; endl; return 0; } 多重背包问题多重背包特点是每件物品最多有Si个 其实只是完全背包问题加上一个判断条件，因此可以通过朴素版的完全背包问题来修改 #include &lt;iostream&gt; #include &lt;algorithm&gt; using namespace std; const int N = 110; int n, m; int v[N], w[N], s[N]; int f[N][N]; int main() { cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i]; for (int i = 1; i &lt;= n; i ++ ) for (int j = 0; j &lt;= m; j ++ ) for (int k = 0; k &lt;= s[i] &amp;&amp; k * v[i] &lt;= j; k ++ ) f[i][j] = max(f[i][j], f[i - 1][j - v[i] * k] + w[i] * k); cout &lt;&lt; f[n][m] &lt;&lt; endl; return 0; } 因为是三重循环，因此时间复杂度非常高，在N=100的数据范围就进行了1000000次运算，所以局限性非常大。 在完全背包中我们使用的优化在多重背包中不能使用，原因是max不支持加减操作，在完全背包中我们只是进行了简单的代换，而在此处多了一项。 二进制优化倍增的思想：假设现在的si是1023，那么我们可以把这个1023分成10份，分别为1,2,4,8…,512，这十组里任取一个数，全部相加就可以得到0~1023中的任何一个数。所以我们可以把这几组当作01背包处理，每次选或不选。 凑出Si设Si，接着从1到2^k，2^k是小于Si的最大的2的倍数，设定一个c用来凑齐Si，即12^k可以表示出02^k+1的所有数，加上c后可以表示出cSi的所有数，将两集合合并，即可得到0Si的所有数。 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 12000, M = 2020; int n, m; int v[N], w[N]; int f[M]; int main() { cin &gt;&gt; n &gt;&gt; m; int cnt = 0; // 表示下标 for (int i = 1; i &lt;= n; i ++ ){ int a, b, s; cin &gt;&gt; a &gt;&gt; b &gt;&gt; s; int k = 1; // 幂次 while (k &lt;= s){ cnt ++; v[cnt] = a * k; w[cnt] = b * k; s -= k; k *= 2; } if (s &gt; 0){ // 表示有c的存在 cnt ++ ; v[cnt] = a * s; w[cnt] = b * s; } } n = cnt; for (int i = 1; i &lt;= n; i ++ ){ for (int j = m; j &gt;= v[i]; j -- ){ f[j] = max(f[j], f[j - v[i]] + w[i]); } } cout &lt;&lt; f[m] &lt;&lt; endl; return 0; } 单调队列优化能比二进制优化处理更多的数据，也比较好写（ #include &lt;cstring&gt; #include &lt;iostream&gt; #include &lt;algorithm&gt; using namespace std; const int N = 20010; int n, m; int f[N], g[N], q[N]; int main() { cin &gt;&gt; n &gt;&gt; m; for (int i = 0; i &lt; n; i ++ ) { int v, w, s; cin &gt;&gt; v &gt;&gt; w &gt;&gt; s; memcpy(g, f, sizeof f); for (int j = 0; j &lt; v; j ++ ) { int hh = 0, tt = -1; for (int k = j; k &lt;= m; k += v) { if (hh &lt;= tt &amp;&amp; q[hh] &lt; k - s * v) hh ++ ; while (hh &lt;= tt &amp;&amp; g[q[tt]] - (q[tt] - j) / v * w &lt;= g[k] - (k - j) / v * w) tt -- ; q[ ++ tt] = k; f[k] = g[q[hh]] + (k - q[hh]) / v * w; } } } cout &lt;&lt; f[m] &lt;&lt; endl; return 0; } 分组背包问题分组背包问题的特点是物品有N组，每组里只能选一个物品。 和完全背包问题类似。 #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 110; int n, m; int v[N][N], w[N][N], s[N]; int f[N]; int main() { cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i ++ ){ cin &gt;&gt; s[i]; for (int j = 0; j &lt; s[i]; j ++ ){ cin &gt;&gt; v[i][j] &gt;&gt; w[i][j]; } } for (int i = 1; i &lt;= n; i ++ ){ for (int j = m; j &gt;= 0; j -- ){ for (int k = 0; k &lt; s[i]; k ++ ){ if (v[i][k] &lt;= j) f[j] = max(f[j], f[j - v[i][k]] + w[i][k]); } } } cout &lt;&lt; f[m] &lt;&lt; endl; return 0; } 二维费用的背包问题其实二维费用的背包问题和一维费用十分相似，只需要将状态表示多一维即可。 二维费用的01背包问题模板： #include &lt;iostream&gt; using namespace std; const int maxn = 1010; int n, V, M; int f[maxn][maxn]; // 表示不超过i的第一费用，j的第二费用的最大价值。 int main() { cin &gt;&gt; n &gt;&gt; V &gt;&gt; M; for (int i = 1; i &lt;= n; i ++ ){ int v, m, w; cin &gt;&gt; v &gt;&gt; m &gt;&gt; w; for (int j = V; j &gt;= v; j -- ){ for (int k = M; k &gt;= m; k -- ){ f[j][k] = max(f[j][k], f[j - v][k - m] + w); } } } cout &lt;&lt; f[V][M] &lt;&lt; endl; } 可见，二维费用的背包问题和一维费用背包问题的最大区别是状态表示多一维，且多加一个循环用于表示另外一重费用。","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"http://2715992064.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}],"author":"Cedeat"},{"title":"计数DP","slug":"计数类DP","date":"2022-01-03T16:00:00.000Z","updated":"2022-02-12T09:19:05.821Z","comments":true,"path":"2022/01/04/ji-shu-lei-dp/","link":"","permalink":"http://2715992064.github.io/2022/01/04/ji-shu-lei-dp/","excerpt":"","text":"计数类DP整数划分可看作是完全背包问题的改版，将1~n的数看作体积，每个物品使用无限次，恰好能装满背包体积n的总方案数。 注意初始化时，我们要求的与完全背包不同，完全背包要求最大的价值，该题要求最大的方案数，因此我们至少有一种方案，应该全部初始化为1。 状态表示：f[i] [j]表示使用前i个整数恰好拼成j的方案数。 因此有 f[i][j] = f[i - 1][j] + f[i - 1][j - i] + f[i - 1][j - 2 * i] + ...; f[i][j - i] = f[i - 1][j - i] + f[i - 1][j - 2 * i] + ...; 由完全背包的公式推得： f[i][j] = max(f[i][j], f[i - 1][j] + f[i][j - i]); 再加上一维优化： #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 1010, mod = 1e9 + 7; int q[N]; int main() { int n; cin &gt;&gt; n; q[0] = 1; // 初始化状态为1 for (int i = 1; i &lt;= n; i ++ ){ for (int j = i; j &lt;= n; j ++ ){ q[j] = (q[j] + q[j - i]) % mod; } } cout &lt;&lt; q[n] &lt;&lt; endl; }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"http://2715992064.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}],"author":"Cedeat"},{"title":"区间DP","slug":"区间DP","date":"2022-01-02T16:00:00.000Z","updated":"2022-02-12T09:19:10.546Z","comments":true,"path":"2022/01/03/qu-jian-dp/","link":"","permalink":"http://2715992064.github.io/2022/01/03/qu-jian-dp/","excerpt":"","text":"区间DP区间DP的核心是每次都将左边一堆与右边连续的一堆合并 状态表示：f[i] [j]表示将i到j合并为一堆的方案的集合的最小值。 状态计算： f[i][j] = min(f[i][j], f[i][k] + f[k + 1][j] + s[j] - s[i - 1]); // i &lt; j f[i][j] = 0; // i == j 所有的区间dp问题，第一维都是枚举区间长度，一般 len = 1 用来初始化，枚举从 len = 2 开始，第二维枚举起点 i （右端点 j 自动获得，j = i + len - 1） for (int i = 1; i &lt;= n; i++) { dp[i][i] = 初始值 } for (int len = 2; len &lt;= n; len++) //区间长度 for (int i = 1; i + len - 1 &lt;= n; i++) { //枚举起点 int j = i + len - 1; //区间终点 for (int k = i; k &lt; j; k++) { //枚举分割点，构造状态转移方程 dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 1][j] + w[i][j]); } } #include &lt;bits/stdc++.h&gt; using namespace std; const int N = 307; int a[N], s[N]; int f[N][N]; int main() { int n; cin &gt;&gt; n; for (int i = 1; i &lt;= n; i ++ ){ cin &gt;&gt; a[i]; s[i] = s[i - 1] + a[i]; } for (int len = 1; len &lt;= n; len ++ ){ // 枚举所有长度 for (int i = 1; i + len &lt;= n; i ++ ){ int j = i + len; // 右端点 f[i][j] = 1e8; // 初始化成大数，防止取到0 for (int k = i; k &lt;= j - 1; k ++ ){ // 枚举区间所有可能的k，找到最小值 f[i][j] = min(f[i][j], f[i][k] + f[k + 1][j] + s[j] - s[i - 1]); } } } cout &lt;&lt; f[1][n] &lt;&lt; endl; return 0; } 时间复杂度O(n ^3)","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"http://2715992064.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}],"author":"Cedeat"},{"title":"拓扑排序","slug":"拓扑排序","date":"2021-12-23T16:00:00.000Z","updated":"2022-02-12T09:21:07.527Z","comments":true,"path":"2021/12/24/tuo-bu-pai-xu/","link":"","permalink":"http://2715992064.github.io/2021/12/24/tuo-bu-pai-xu/","excerpt":"","text":"拓扑排序什么是拓扑排序？若一个由图中所有点构成的序列A没满足：对于图中的每条边(x,y)，x在A中都出现在y之前，则称A是该图中的一个拓扑排序。只适用于有向无环图（AOV网）。 入度想要找到拓扑排序，我们要了解入度的概念：指有向图中某点作为图中边的终点的次数之和。 对于一个入度为零的点，即没有任何一个点指向该点，我们可以认为这个点在拓扑排序中处于顶点的位置。我们可以维护一个队列，将这些入度为零的点入队，此时这些点就已经有序，不需要再入队，即可将该点删除，即将它指向的下一个点的入度减一，然后再次寻找入度为零的点即可，这样，我们就构成了一个循环。 如何判断该图是否存在合法的拓扑序列呢？我们可以由定义得到，合法的拓扑序列，一定由图中所有点共同构成，因此只要队列中进入过n次元素，即可判断存在一个合法的序列。 #include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;cstring&gt; #include &lt;queue&gt; using namespace std; const int N = 1e5 + 10; int e[N],ne[N],h[N],idx,d[N],n,m,top[N],cnt = 1; // e,ne,h,idx 邻接表模板 // d 代表每个元素的入度 // top是拓扑排序的序列，cnt代表top中有多少个元素 void add(int a,int b){ e[idx] = b; ne[idx] = h[a]; h[a] = idx ++; } bool topsort(){ queue&lt;int&gt; q; int t; for(int i = 1;i &lt;= n; ++i)// 将所有入度为0的点加入队列 if(d[i] == 0) q.push(i); while(q.size()){ t = q.front();//每次取出队列的首部 top[cnt] = t;//加入到 拓扑序列中 cnt ++; // 序列中的元素 ++ q.pop(); for(int i = h[t];i != -1; i = ne[i]){ // 遍历 t 点的出边 int j = e[i]; d[j] --;// j 的入度 -- if(d[j] == 0) q.push(j); //如果 j 入度为0，加入队列当中 } } if(cnt &lt; n) return 0; else return 1; } int main(){ int a,b; cin &gt;&gt; n &gt;&gt; m; memset(h,-1,sizeof h); while(m--){ cin &gt;&gt; a &gt;&gt; b; add(a,b); d[b] ++;// a -&gt; b , b的入度++ } if(topsort() == 0) cout &lt;&lt; \"-1\"; else { for(int i = 1;i &lt;= n; ++i){ cout &lt;&lt; top[i] &lt;&lt;\" \"; } } return 0; }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"图论/搜索","slug":"图论-搜索","permalink":"http://2715992064.github.io/tags/%E5%9B%BE%E8%AE%BA-%E6%90%9C%E7%B4%A2/"}],"author":"Cedeat"},{"title":"DOS命令","slug":"DOS命令","date":"2021-12-16T16:00:00.000Z","updated":"2022-02-12T09:22:35.887Z","comments":true,"path":"2021/12/17/dos-ming-ling/","link":"","permalink":"http://2715992064.github.io/2021/12/17/dos-ming-ling/","excerpt":"","text":"DOS命令cd 目录名 进入特定的目录 cd\\ 退回根目录 cd .. 退回上一级 dir 显示目录文件和子目录列表。 md 目录名 在该目录下新建文件夹 rd 目录名 删除特定文件夹 del 文件名 删除特定文件 del ***.** *删除文件夹下所有文件 del *xxx 删除文件名中含xxx的文件","categories":[],"tags":[{"name":"其它","slug":"其它","permalink":"http://2715992064.github.io/tags/%E5%85%B6%E5%AE%83/"}],"author":"Cedeat"},{"title":"宽度优先搜索","slug":"BFS","date":"2021-12-15T16:00:00.000Z","updated":"2022-02-12T09:21:21.017Z","comments":true,"path":"2021/12/16/bfs/","link":"","permalink":"http://2715992064.github.io/2021/12/16/bfs/","excerpt":"","text":"BFS（宽度优先搜索）宽度优先搜索最大的优势是可以搜索到最短路，然而在空间上要比DFS上大一些。BFS是一层一层向外搜索，先搜索所有距离为1的点，再搜索所有距离为2的点，以此类推，所以搜到的点是逐渐离我们越来越远的，找到的第一个即为最小，前提是图的边的权重都为1。 走迷宫#include &lt;bits/stdc++.h&gt; using namespace std; typedef pair&lt;int, int&gt; PII; const int N = 110; int n, m; int g[N][N], d[N][N]; // g用于读取地图，d兼具判重和计算长度两种功能。 int bfs() { queue &lt;PII&gt; q; // 用队列存储每一次走到的点 memset(d, -1, sizeof d); // 初始化，用于后续判重. d[0][0] = 0; // 原点的距离是0. q.push({0, 0}); // 以原点开始查找 int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1}; // 表示该点向四个方向走的可能的情况。 while (q.size()){ auto t = q.front(); // 每次取出队头的点，进行四个方向的查找 q.pop(); // 将队列中的该点删除. for (int i = 0; i &lt; 4; i ++ ){ int x = t.first + dx[i], y = t.second + dy[i]; if (x &gt;= 0 &amp;&amp; x &lt; n &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; m &amp;&amp; g[x][y] == 0 &amp;&amp; d[x][y] == -1){ // 找到符合条件的点。 d[x][y] = d[t.first][t.second] + 1; // 用该点存放距离，t里的点为上次的点，表示从t点走到（x，y）这个点，因此距离加一。 q.push({x, y}); // 将该点推入队列，等待继续往后走. } } } return d[n - 1][m - 1]; // 返回最后一点的距离。 } int main() { cin &gt;&gt; n &gt;&gt; m; for (int i = 0 ; i &lt; n; i ++ ){ for (int j = 0; j &lt; m; j ++ ){ cin &gt;&gt; g[i][j]; // 读入地图 } } cout &lt;&lt; bfs() &lt;&lt; endl; return 0; }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"图论/搜索","slug":"图论-搜索","permalink":"http://2715992064.github.io/tags/%E5%9B%BE%E8%AE%BA-%E6%90%9C%E7%B4%A2/"}],"author":"Cedeat"},{"title":"深度优先搜索","slug":"DFS","date":"2021-12-15T16:00:00.000Z","updated":"2022-02-19T08:04:31.457Z","comments":true,"path":"2021/12/16/dfs/","link":"","permalink":"http://2715992064.github.io/2021/12/16/dfs/","excerpt":"","text":"DFS（深度优先搜索）DFS使用栈的数据结构，指对所有可能的分支进行一次搜索，优先向下走，直到不能搜索为止，当搜索到头没有路时进行回溯，或在不满足条件时剪枝，然后再次找到别的路径深入。它所找到的不一定是最短路。 全排列问题#include &lt;bits/stdc++.h&gt; using namespace std; const int N = 10; int n; int path[N]; bool st[N]; // 判断数字是否用过 void dfs(int u) { if (u == n){ for (int i = 0; i &lt; n; i ++ ) printf(\"%d \", path[i]); // 走到结尾，输出 printf(\"\\n\"); return ; // 回溯到上一层 } for (int i = 1; i &lt;= n; i ++ ){ // 用来表示用到的数字 if (!st[i]){ path[u] = i; st[i] = true; dfs(u + 1); // 往下寻找 st[i] = false; // 恢复现场 } } } int main() { cin &gt;&gt; n; dfs(0); // 从头开始 } n皇后问题#include &lt;bits/stdc++.h&gt; using namespace std; const int N = 20; int n; bool col[N], dg[N], udg[N];//col表示宗行,dg为正对角线，udg为反对角线 char g[N][N]; void dfs(int u) { if (u == n){ for (int i = 0; i &lt; n; i ++ ) printf(\"%s\", g[i]); printf(\"\\n\"); return ; } for (int i = 1; i &lt;= n; i ++ ){ if (!col[i] &amp;&amp; !dg[u + i] &amp;&amp; !udg[n - u + i]){ // 剪枝，不满足条件则不往后走 g[u][i] = 'Q'; col[i] = dg[u + i] = udg[n - u + i] = true; dfs(u + 1); col[i] = dg[u + i] = udg[n - u + i] = false; g[u][i] = '.'; } } } int main() { cin &gt;&gt; n; for (int i = 0; i &lt; n; i ++ ){ for (int j = 0; j &lt; n; j ++ ){ g[i][j] = '.'; } } dfs(0); return 0; } n皇后问题与全排列本质相同，因为每一行必定有一个皇后，我们列举皇后在每一列可能的情况。","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"图论/搜索","slug":"图论-搜索","permalink":"http://2715992064.github.io/tags/%E5%9B%BE%E8%AE%BA-%E6%90%9C%E7%B4%A2/"}],"author":"Cedeat"},{"title":"并查集","slug":"并查集","date":"2021-12-14T04:14:00.000Z","updated":"2022-02-12T09:19:46.912Z","comments":true,"path":"2021/12/14/bing-cha-ji/","link":"","permalink":"http://2715992064.github.io/2021/12/14/bing-cha-ji/","excerpt":"","text":"并查集并查集的作用1.进行集合合并。 2.查询两个元素是否处于同一集合。 并查集的原理用树的形式维护所有的集合 每个集合用一颗树来标志。树的编号就是整个集合的编号。每个节点储存的是他的父节点，p[x]表示x的父节点。 例： 对于一个元素3，若p[3] = 5，则表示3属于编号为5的这个集合当中。 并查集的实现方式（基础操作）1.如何判断树根if (p[x] == x) 2.如何求x的集合编号while (p[x] != x) x = p[x]; 每次找节点试都要重新往上找一边，时间复杂度很高，可以进行路线压缩优化。 路线压缩：即找到集合的根节点后，令集合的所有元素指向根结点，以便进行下次查找。 int find (int x) // 返回x的集合编号（祖宗节点） + 路径压缩 { if (p[x] != x) p[x] = find(p[x]); return p[x];// 递归方法实现，只有p[x] == x时，即x为祖宗节点时才会返回，令调用过程中所有的p[x]都等于祖宗节点的值。 } 3.如何合并两个集合p[x] = y;//p[x]为x的集合编号，p[y]为y的集合编号。 p[find(a)] = find(b) || p[find(a)] = p[find(b)] // 因为find(b)即祖宗节点，所以p[find(b)] == find(b)，两者含义相同。 完整代码#include &lt;iostream&gt; using namespace std; const int N = 100010; int p[N]; int find(int x) { if (p[x] != x) p[x] = find(p[x]); return p[x]; } int main() { int n, m; scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i ++ ) p[i] = i; while (m -- ) { char op[2]; int a, b; scanf(\"%s%d%d\", op, &amp;a, &amp;b); if (*op == 'M') p[find(a)] = find(b); else { if (find(a) == find(b)) puts(\"Yes\"); else puts(\"No\"); } } return 0; }","categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"数据结构","slug":"数据结构","permalink":"http://2715992064.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]}],"categories":[{"name":"算法入门","slug":"算法入门","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"},{"name":"算法进阶","slug":"算法进阶","permalink":"http://2715992064.github.io/categories/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://2715992064.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"模板","slug":"模板","permalink":"http://2715992064.github.io/tags/%E6%A8%A1%E6%9D%BF/"},{"name":"题解","slug":"题解","permalink":"http://2715992064.github.io/tags/%E9%A2%98%E8%A7%A3/"},{"name":"暑假集训","slug":"暑假集训","permalink":"http://2715992064.github.io/tags/%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD/"},{"name":"字符串","slug":"字符串","permalink":"http://2715992064.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"数据结构","slug":"数据结构","permalink":"http://2715992064.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"搜索","slug":"搜索","permalink":"http://2715992064.github.io/tags/%E6%90%9C%E7%B4%A2/"},{"name":"动态规划","slug":"动态规划","permalink":"http://2715992064.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"图论/搜索","slug":"图论-搜索","permalink":"http://2715992064.github.io/tags/%E5%9B%BE%E8%AE%BA-%E6%90%9C%E7%B4%A2/"},{"name":"数论","slug":"数论","permalink":"http://2715992064.github.io/tags/%E6%95%B0%E8%AE%BA/"},{"name":"其它","slug":"其它","permalink":"http://2715992064.github.io/tags/%E5%85%B6%E5%AE%83/"}]}